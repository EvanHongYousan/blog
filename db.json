{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":0},{"_id":"source/images/canvas-engine-research/hilo.png","path":"images/canvas-engine-research/hilo.png","modified":1,"renderable":0},{"_id":"source/images/geohash/3.png","path":"images/geohash/3.png","modified":1,"renderable":0},{"_id":"source/images/geohash/2.png","path":"images/geohash/2.png","modified":1,"renderable":0},{"_id":"source/images/geohash/9.png","path":"images/geohash/9.png","modified":1,"renderable":0},{"_id":"source/images/how-display-content-works/Group-3.png","path":"images/how-display-content-works/Group-3.png","modified":1,"renderable":0},{"_id":"source/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.21.56-am.png","path":"images/how-display-content-works/Screen-Shot-2018-03-27-at-9.21.56-am.png","modified":1,"renderable":0},{"_id":"source/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.23.20-am.png","path":"images/how-display-content-works/Screen-Shot-2018-03-27-at-9.23.20-am.png","modified":1,"renderable":0},{"_id":"source/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.44.20-am.png","path":"images/how-display-content-works/Screen-Shot-2018-03-27-at-9.44.20-am.png","modified":1,"renderable":0},{"_id":"source/images/making-css-animations-feel-natural/cover.png","path":"images/making-css-animations-feel-natural/cover.png","modified":1,"renderable":0},{"_id":"source/images/how-display-content-works/caniuse.png","path":"images/how-display-content-works/caniuse.png","modified":1,"renderable":0},{"_id":"source/images/redis-pipe/overview.png","path":"images/redis-pipe/overview.png","modified":1,"renderable":0},{"_id":"source/images/redis-protocol/overview.png","path":"images/redis-protocol/overview.png","modified":1,"renderable":0},{"_id":"source/images/talking-tricks/627b34fc-4ab1-11e9-a331-525400a20cd4.png","path":"images/talking-tricks/627b34fc-4ab1-11e9-a331-525400a20cd4.png","modified":1,"renderable":0},{"_id":"source/images/redis-ziplist/overview.png","path":"images/redis-ziplist/overview.png","modified":1,"renderable":0},{"_id":"source/images/tcp-ip-http/tcpip1.png","path":"images/tcp-ip-http/tcpip1.png","modified":1,"renderable":0},{"_id":"source/images/tcp-ip-http/tcpip2.png","path":"images/tcp-ip-http/tcpip2.png","modified":1,"renderable":0},{"_id":"source/images/tcp-ip-http/tcpip.png","path":"images/tcp-ip-http/tcpip.png","modified":1,"renderable":0},{"_id":"source/images/test-guide/index.jpg","path":"images/test-guide/index.jpg","modified":1,"renderable":0},{"_id":"source/images/tcp-ip-http/tcpip3.png","path":"images/tcp-ip-http/tcpip3.png","modified":1,"renderable":0},{"_id":"source/images/test-guide/71873817.jpg","path":"images/test-guide/71873817.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"source/images/canvas-engine-research/cocos-creator.png","path":"images/canvas-engine-research/cocos-creator.png","modified":1,"renderable":0},{"_id":"source/images/canvas-engine-research/Egret-Engine-2D.png","path":"images/canvas-engine-research/Egret-Engine-2D.png","modified":1,"renderable":0},{"_id":"source/images/composite-pattern/2018-09-02-am-11.50.24.png","path":"images/composite-pattern/2018-09-02-am-11.50.24.png","modified":1,"renderable":0},{"_id":"source/images/geohash/4.png","path":"images/geohash/4.png","modified":1,"renderable":0},{"_id":"source/images/geohash/10.png","path":"images/geohash/10.png","modified":1,"renderable":0},{"_id":"source/images/geohash/7.png","path":"images/geohash/7.png","modified":1,"renderable":0},{"_id":"source/images/geohash/6.png","path":"images/geohash/6.png","modified":1,"renderable":0},{"_id":"source/images/how-display-content-works/Screen-Shot-2018-03-27-at-10.27.27-am.png","path":"images/how-display-content-works/Screen-Shot-2018-03-27-at-10.27.27-am.png","modified":1,"renderable":0},{"_id":"source/images/node-memory-leak/4ffd766c-a3aa-11e9-8f00-0a58ac13161b.png","path":"images/node-memory-leak/4ffd766c-a3aa-11e9-8f00-0a58ac13161b.png","modified":1,"renderable":0},{"_id":"source/images/redis-transaction/overview.png","path":"images/redis-transaction/overview.png","modified":1,"renderable":0},{"_id":"source/images/crashBall-by-css3/crash-ball.gif","path":"images/crashBall-by-css3/crash-ball.gif","modified":1,"renderable":0},{"_id":"source/images/redis-PubSub/overview.png","path":"images/redis-PubSub/overview.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flat-top.min.css","path":"lib/pace/pace-theme-flat-top.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/README.md","path":"lib/three/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/gulpfile.js","path":"lib/three/gulpfile.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/renovate.json","path":"lib/three/renovate.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/package.json","path":"lib/three/package.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"source/images/redis-datapersistence/overview.png","path":"images/redis-datapersistence/overview.png","modified":1,"renderable":0},{"_id":"source/images/redis-io/overview.png","path":"images/redis-io/overview.png","modified":1,"renderable":0},{"_id":"source/images/redis-master-slave/overview.png","path":"images/redis-master-slave/overview.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-material.min.css","path":"lib/pace/pace-theme-material.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","path":"lib/three/lib/CanvasRenderer.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/lib/Projector.js","path":"lib/three/lib/Projector.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/src/three-waves.js","path":"lib/three/src/three-waves.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","path":"lib/three/src/canvas_lines.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","path":"lib/three/src/canvas_sphere.js","modified":1,"renderable":1},{"_id":"source/images/canvas-engine-research/cocos-ide-img.png","path":"images/canvas-engine-research/cocos-ide-img.png","modified":1,"renderable":0},{"_id":"source/images/geohash/5.png","path":"images/geohash/5.png","modified":1,"renderable":0},{"_id":"source/images/growth-hacker/growthhacker.png","path":"images/growth-hacker/growthhacker.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"source/images/geohash/1.png","path":"images/geohash/1.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"source/images/geohash/8.png","path":"images/geohash/8.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"source/images/gif/flash.gif","path":"images/gif/flash.gif","modified":1,"renderable":0},{"_id":"source/images/gif/sea.gif","path":"images/gif/sea.gif","modified":1,"renderable":0},{"_id":"source/images/test-guide/test_run.gif","path":"images/test-guide/test_run.gif","modified":1,"renderable":0},{"_id":"source/images/vuejs2.x-xmind/c533fcd2-f78c-11e8-aa9e-525400ac2e73.png","path":"images/vuejs2.x-xmind/c533fcd2-f78c-11e8-aa9e-525400ac2e73.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"2600d82688ead405bb35bb0c002f1bcde7cb0bf5","modified":1566978194538},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1566898198984},{"_id":"themes/next/.all-contributorsrc","hash":"6ee1b5c79fba84db228ad559715ac4c69cfc421e","modified":1566898198983},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1566898198984},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1566898198984},{"_id":"themes/next/.gitignore","hash":"d07bbc5f3b5b103f6a809f54fa2ab5ba3026e948","modified":1567042367477},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1566898198987},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1566898198987},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1566898198987},{"_id":"themes/next/README.md","hash":"01c1cfe17bbba58ba56be53fdd8fbcc535e44964","modified":1566898198987},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1566898198988},{"_id":"themes/next/gulpfile.coffee","hash":"3f4e570ed7e554840b905200e0b662e4b509170e","modified":1566898198995},{"_id":"themes/next/_config.yml","hash":"6ef38054681f0a948f3b428c534948c34f8ee3f3","modified":1567059462478},{"_id":"themes/next/package.json","hash":"0ee90fb9f79c23dfc6dc51a31ae4b0fbd96211eb","modified":1566898199012},{"_id":"source/_posts/canvas-engine-research.md","hash":"25243f7e2bd0642ecc2229fd0f6036ca58c3c280","modified":1567042367470},{"_id":"source/_posts/chain-pattern.md","hash":"3a78224eb605db1f05848b285a3b950e8fcf8a6e","modified":1567042367470},{"_id":"source/_posts/command-pattern.md","hash":"4f6c72bbaf20809d38eabd862f9682ba70f2580d","modified":1567042367471},{"_id":"source/_posts/composite-pattern.md","hash":"03d43280b24a442bf6498792000a73c72fccbd11","modified":1567042367471},{"_id":"source/_posts/crashBall-by-css3.md","hash":"6e92a3906963b84ee4451dd6e0fa632de01aba14","modified":1567045888701},{"_id":"source/_posts/growth-hacker.md","hash":"05ee410f261bea061a8bd05ba33a53204561acd3","modified":1566979589319},{"_id":"source/_posts/geohash.md","hash":"7ffee92a4091e7f01244d675af207fca20cfbc4d","modified":1567042367472},{"_id":"source/_posts/data-binding.md","hash":"dd10be3ffbfe6963afc14371b01db1cf380e4653","modified":1566979584617},{"_id":"source/_posts/iframe-bug.md","hash":"92e13594fe77b353d49d296a32b203fedcf34b40","modified":1567042367473},{"_id":"source/_posts/higher-order-function.md","hash":"dbeff42aaaafce2df438d2c68b7a7aa32cbb2fc7","modified":1566979594765},{"_id":"source/_posts/interator-pattern.md","hash":"3335847d5a4e9f2968958f6226410c6f00ea0df2","modified":1567042367473},{"_id":"source/_posts/how-display-content-works.md","hash":"335a3450fa702d0dbf67530749fa5b6cef630e7a","modified":1567045897951},{"_id":"source/_posts/node-memory-leak.md","hash":"fb6a2314154e752ca032082dd673f669b585f5cb","modified":1566979612375},{"_id":"source/_posts/making-css-animations-feel-natural.md","hash":"e070e735a3a42796e62fe74aba8b7f45e23805a6","modified":1567045880217},{"_id":"source/_posts/observer-pattern.md","hash":"9aa58c3529dce58dbcc34c53770629f8608d1673","modified":1567042367474},{"_id":"source/_posts/publisher-subscriber-pattern.md","hash":"c63c92321eb1d76fec37f056cf58ea792a021be6","modified":1567042367474},{"_id":"source/_posts/redis-PubSub.md","hash":"f7fdf7411758d1e7bb6a7594c4eefc28b90107ff","modified":1566984954761},{"_id":"source/_posts/redis-datapersistence.md","hash":"788f83ba90da0a9380da54c6865db09a880c06ea","modified":1566984062733},{"_id":"source/_posts/redis-io.md","hash":"b277ff17387f33c45bd7db51cb4a5448ddec269a","modified":1566979825545},{"_id":"source/_posts/redis-pipe.md","hash":"cd42dd52714ac386b62a570afd7695169023a188","modified":1566984762028},{"_id":"source/_posts/redis-protocol.md","hash":"6ca104d219bd30dcd2a25e70051025d7c0cf83f9","modified":1566979874855},{"_id":"source/_posts/redis-transaction.md","hash":"3a8b95bc5978676fe2b74551aa420b40e0cf6b6e","modified":1566984888989},{"_id":"source/_posts/redis-master-slave.md","hash":"f1bb8b5d6fa45b69c2fb1a801ad2361cba596ec2","modified":1566985348668},{"_id":"source/_posts/redis-ziplist.md","hash":"3c52329a76e0462b069b56aaa1bf82309090a189","modified":1566985162813},{"_id":"source/_posts/talking-tricks.md","hash":"b407db52728a35feda4f051b82ef0ef287c4806a","modified":1566979627711},{"_id":"source/_posts/tcp-ip-http.md","hash":"27ee9e979a97ffbe3fb5ac6b5e2119b1bcf2f141","modified":1566979631176},{"_id":"source/_posts/test-guide.md","hash":"633818bec01a065d7feeaf3f73237c71d087c694","modified":1566979636651},{"_id":"source/about/index.md","hash":"f8aaa315283abf99383fba4396c544b53eaddd24","modified":1567042367475},{"_id":"source/_posts/vuejs2.x-xmind.md","hash":"2d1aefce6d3839280766684f0fba04439bb569ee","modified":1566979640368},{"_id":"source/categories/index.md","hash":"02bd59163779565ba0ac2402e101334b68b37937","modified":1567042367475},{"_id":"source/images/avatar.jpg","hash":"7f189d53b69df96a475569f018db775903d58506","modified":1566870838578},{"_id":"source/images/alipay.jpg","hash":"e8b09c857422535ce80338fff73a19c5b15ca882","modified":1566871887758},{"_id":"source/images/favicon.ico","hash":"0d869678bcd7858c924f1790bc9aed7c11333e7f","modified":1567042367475},{"_id":"source/tags/index.md","hash":"099a10f66eeec2e1d199319e8105dc57b1bb4514","modified":1567042367476},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"f7ddb7faed8031a9f40eae4ee7bb48c1bc50fd14","modified":1566898198984},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"df11642d4fb7695b536740e77155d756bdb2499e","modified":1566898198984},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1566898198985},{"_id":"themes/next/.github/auto_assign.yml","hash":"9fe0dbe3f6edc59bf10ea25b14eba0e92e2c8f42","modified":1566898198985},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"cf6b1e53119097fcfacb02758962806b4edc8b89","modified":1566898198985},{"_id":"themes/next/.github/config.yml","hash":"cbd06d0c40afa9fdf056765120e9085826b00d20","modified":1566898198986},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"e06053d417579ed967a94166deb6bda5ce41d805","modified":1566898198986},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1566898198986},{"_id":"themes/next/.github/lock.yml","hash":"4f1070097b614b24050f238694127e3573ce8472","modified":1566898198986},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"18eddb3ba5e94cac0642134581f86e26f568d388","modified":1566898198986},{"_id":"themes/next/.github/release-drafter.yml","hash":"f3a449b637abd1fd9fe14342d6a242e18a86ddd2","modified":1566898198986},{"_id":"themes/next/.github/stale.yml","hash":"85975c43d606c39b91c0ad32197154be9d482a09","modified":1566898198986},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1566898198986},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"6a8d3d3f37d2212e52e1081115f33b55f0e71cf7","modified":1566898198990},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1566898198989},{"_id":"themes/next/docs/DATA-FILES.md","hash":"b6aba4f32482654d265df256988c18606318a5fd","modified":1566898198991},{"_id":"themes/next/docs/INSTALLATION.md","hash":"d747b33d4e0bb7b173b0eee3c427566e49c17b38","modified":1566898198991},{"_id":"themes/next/docs/AUTHORS.md","hash":"99483bb9c09c7c694e34ee79aa3822ff16e0753d","modified":1566898198990},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1566898198992},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"661deb61a2d225af4498769dba09561046a3d871","modified":1566898198991},{"_id":"themes/next/docs/MATH.md","hash":"5b7ea122699e84214fc83ff26e046626e6be4efc","modified":1566898198992},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"e1a7d82622845fb2d898043d604e798519d1cde7","modified":1566898198992},{"_id":"themes/next/languages/de.yml","hash":"c94ff69db40c22de61ce6446cdc9108177379074","modified":1566898198995},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1566898198996},{"_id":"themes/next/languages/en.yml","hash":"f6a8d95948762c978d2ed065c5f87d2061aa6fc1","modified":1566898198996},{"_id":"themes/next/languages/es.yml","hash":"203084eace039610ac097e0e6ce6b5f4f8356217","modified":1566898198996},{"_id":"themes/next/languages/fa.yml","hash":"856e19aec28767e1f91a8e805011f82c7601ec60","modified":1566898198996},{"_id":"themes/next/languages/fr.yml","hash":"a9ac6ce36e97a06ad6ab3431eb652b8702b7a63e","modified":1566898198996},{"_id":"themes/next/languages/hu.yml","hash":"313894fd5615e37c1935a235f8f702df7852345a","modified":1566898198996},{"_id":"themes/next/languages/id.yml","hash":"1c321f62378dc029f7b795ad2fcb0f80277de52f","modified":1566898198997},{"_id":"themes/next/languages/it.yml","hash":"08b2db3eece91edd2759ca4b26de74b2992c7dae","modified":1566898198997},{"_id":"themes/next/languages/ja.yml","hash":"8341ccdd1b2fbf11e9d80c1aacd37a969c57ca9c","modified":1566898198997},{"_id":"themes/next/languages/ko.yml","hash":"4f3a4165ceaaada238316fe8bd2438f775abebfc","modified":1566898198997},{"_id":"themes/next/languages/nl.yml","hash":"387ea251057164f8dcd38553bac01a909cf11f0d","modified":1566898198997},{"_id":"themes/next/languages/pt-BR.yml","hash":"075140b21edd6cb0ec1e9b3e79e1339d1e1a17e4","modified":1566898198997},{"_id":"themes/next/languages/pt.yml","hash":"7d3f040065b0a04a23d3be42ddfcafc95f79854e","modified":1566898198997},{"_id":"themes/next/languages/ru.yml","hash":"ca8f3c22fb10cf3e455890e0f1f2b29b8814a702","modified":1566898198998},{"_id":"themes/next/languages/tr.yml","hash":"c99f21a9cb86957618428e488ece24df063222f3","modified":1566898198998},{"_id":"themes/next/languages/uk.yml","hash":"aa90a1b6f12f5bae1ff6386ea99c63db901179a8","modified":1566898198998},{"_id":"themes/next/languages/vi.yml","hash":"a5f60a2b3dc1b90b867e99dd3b108113a04f9ba5","modified":1566898198998},{"_id":"themes/next/languages/zh-CN.yml","hash":"8c70af9442f12aa65e8737774ea032bb6420a715","modified":1566898198998},{"_id":"themes/next/languages/zh-HK.yml","hash":"1c8b8ad49a15ea3491555a2ae1819b1ad405fab2","modified":1566898198998},{"_id":"themes/next/languages/zh-TW.yml","hash":"7402f4b899dbeead3641417bfaf5f46f3a3934a5","modified":1566898198998},{"_id":"themes/next/layout/_layout.swig","hash":"843094941072cd5421360412ad90e61cc6ead82f","modified":1566898198999},{"_id":"themes/next/layout/archive.swig","hash":"3ed37b2d5346e7c956dcdd94f5647800df80b597","modified":1566898199012},{"_id":"themes/next/layout/category.swig","hash":"4b21cb24b893dcb587bdf7802199ee368c494a4f","modified":1566898199012},{"_id":"themes/next/layout/index.swig","hash":"d08bbe3c409015a693c4afefcd6f3fe70beb2082","modified":1566898199012},{"_id":"themes/next/layout/page.swig","hash":"ddd87c44b20f906d5d16820ad6fea582d00e5b7a","modified":1566898199012},{"_id":"themes/next/layout/post.swig","hash":"b5f8b8a3ce37245713ccaee811f58b2261e58187","modified":1566898199012},{"_id":"themes/next/layout/tag.swig","hash":"9463f950d147014a908766a1f5ee9ede0d136346","modified":1566898199012},{"_id":"source/images/wechatpay.jpg","hash":"1691ee8a66820b4fad41967f84e831643d7322a3","modified":1567042367476},{"_id":"source/images/canvas-engine-research/hilo.png","hash":"49728571c412ff8fde399e6b4f1a7c5503ec3c33","modified":1566870838582},{"_id":"source/images/geohash/3.png","hash":"c107bc3f16bb1aac76d4da9943e8806d613aba54","modified":1566870838588},{"_id":"source/images/geohash/2.png","hash":"3cf29fb0d0ff62d8cd16c87b705e7c9b89cd8023","modified":1566870838587},{"_id":"source/images/geohash/9.png","hash":"593270ec46ff06941fa76266dbff723e1d5ebfc8","modified":1566870838594},{"_id":"source/images/how-display-content-works/Group-3.png","hash":"64abf3ea5c7cb364d3e26cbb1147c2a0a975b9cb","modified":1566870838594},{"_id":"source/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.21.56-am.png","hash":"1dd5511d6ab3d48b2790cc6af6777489675d15e3","modified":1566870838595},{"_id":"source/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.23.20-am.png","hash":"9081e36f44255fe5c4b4743390d310f42439e848","modified":1566870838595},{"_id":"source/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.44.20-am.png","hash":"0608665537c93b00f4730a9d2217bdf5cf96ef00","modified":1566870838595},{"_id":"source/images/making-css-animations-feel-natural/cover.png","hash":"fff1aca83f5f193f25d5af7fadf1443bebfcdfa2","modified":1566870838596},{"_id":"source/images/how-display-content-works/caniuse.png","hash":"97bfde947f965386db1f766ec71cb4ff4d619c38","modified":1566870838596},{"_id":"source/images/redis-pipe/overview.png","hash":"c9066d056a12dd2e2fd37b48d2ec567e5d2740b9","modified":1562661293642},{"_id":"source/images/redis-protocol/overview.png","hash":"7c2aad874eb82cb94204d4d329319b2eb7c51dea","modified":1562653320751},{"_id":"source/images/talking-tricks/627b34fc-4ab1-11e9-a331-525400a20cd4.png","hash":"110c887769c039359191bf5a4bbd7f86ef47a01c","modified":1566870838598},{"_id":"source/images/redis-ziplist/overview.png","hash":"f8d4c5f35e6f6f70ead4ed3627e15a6e3a33fdf6","modified":1562808126357},{"_id":"source/images/tcp-ip-http/tcpip1.png","hash":"9f399ac7398fc4f1c35c9acd4353c40a7b33671e","modified":1566870838598},{"_id":"source/images/tcp-ip-http/tcpip2.png","hash":"2ee62fbda5ca2b48213314749d83a1e7faa5d542","modified":1566870838599},{"_id":"source/images/tcp-ip-http/tcpip.png","hash":"1fcb25e39892dd9703c71f8a0e7b02f8e34173fc","modified":1566870838598},{"_id":"source/images/test-guide/index.jpg","hash":"51b8e4c581d1e2131460a7eee3b90e63b65f21a5","modified":1566870838600},{"_id":"source/images/tcp-ip-http/tcpip3.png","hash":"85e60cb21b8face00adbc91154dbed40c2437275","modified":1566870838599},{"_id":"source/images/test-guide/71873817.jpg","hash":"b8ac9f76496a51bd07f4b7d135f6e9f4b2a600c2","modified":1566870838600},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"ae22e700b7c63c60746321719a20d34022ad78d9","modified":1566898198985},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"245917ffaa296bc2d9a85444acf639077ca25944","modified":1566898198985},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"795b8ddb251da8e2327299d5f7dbf446fb9867c6","modified":1566898198985},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"59b2b45e151972bbe08582cde22f398e58832765","modified":1566898198985},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"5b688fb1bef2895b53b538519b002c3bc1e8b177","modified":1566898198992},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1566898198993},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1566898198993},{"_id":"themes/next/docs/ru/README.md","hash":"d173ce8e009787c74f2042e1e965d8e5f6be1e6d","modified":1566898198993},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a031c31ae66c3dd947e1663ddf23c11fdb6a118b","modified":1566898198994},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"55e21e78c50faa27248c9337bf49c153dad34843","modified":1566898198993},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"979b9b49ed2e3181fce9f2dc1c40b5fa8b0eeeed","modified":1566898198994},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"1c21127b1a5004e99169fe8bbf5493245f07e843","modified":1566898198993},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"a27aab06239754d193e21d742e82c67eece4d5b7","modified":1566898198994},{"_id":"themes/next/docs/zh-CN/README.md","hash":"888493e26cab8e3aed42242dcd6db27f81b62895","modified":1566898198995},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"85756eb675967f49fdb47befa961da2c8d5e8d02","modified":1566898198995},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"3f3e889b5739c386dfa962d7e85d595b0feb726d","modified":1566898198995},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"599705b5eec03b644f89a92a71705d61701468c9","modified":1566898198995},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"1800020e8221a32dc55f3e29cac5340fdeb2e4b5","modified":1566898198999},{"_id":"themes/next/layout/_macro/post.swig","hash":"ccfde44aed69b742098340ccf9db5dd926009f8b","modified":1566898198999},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"c73ab4e925c32eda3e1d5641a1317e6fcb9431e3","modified":1566898198999},{"_id":"themes/next/layout/_partials/comments.swig","hash":"33e7c276c58285fec3eae31d7eb3fe3faea8695f","modified":1566898199001},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4eeb3cab688d4f23b88fb839bbb3c785a9ec4358","modified":1567042367479},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"a687b909d56e3323f5ea3b550bb091793aa9b24c","modified":1566898199003},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"ada4cf714ff1a85985d2d7c3c24dc0bb023a6d0e","modified":1566898199003},{"_id":"themes/next/layout/_scripts/index.swig","hash":"be907bdfd81ab3cc5c56aa897be9664943e282cd","modified":1566898199005},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"33199b1e3fa8990078923a934cb876e0e4787dc1","modified":1566898199005},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"b819cc7752fd018b8971cfe61ee7569f49f9d56d","modified":1566898199005},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"eeb8507e7263ab08701b0cc70cbee54e31f1ac23","modified":1566898199006},{"_id":"themes/next/layout/_scripts/three.swig","hash":"f4e1b08bcfb7f8f9c659e4efed90f98571f44c25","modified":1566898199007},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"8c6d8df502193c9945cdae8daeb5629514174619","modified":1566898199007},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"bd9ba0bf60cc3008ee14339fa395ee6af188e879","modified":1566898199008},{"_id":"themes/next/layout/_third-party/index.swig","hash":"838dc2cc1f520c5f7b43e3f464188060ae862bd6","modified":1566898199010},{"_id":"themes/next/layout/_third-party/facebook-sdk.swig","hash":"340e76643f25fdb4b18a2f94c9169721a912b670","modified":1566898199010},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"70c3331b04ec204b96cf79751248740c9a42b815","modified":1566898199010},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"206644ff2c769226a58a9039eda9206302460626","modified":1566898199010},{"_id":"themes/next/layout/_third-party/vkontakte-api.swig","hash":"7c918db6e1af16d47789d3958d9ad208ea0e86b2","modified":1566898199011},{"_id":"themes/next/scripts/events/core.js","hash":"b075ef0d0bf28ca1b9ad7606f7eb89b33ab8ae97","modified":1566898199013},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"1a1abfb4a28fbcd9315666e268b0cc56f230a2a2","modified":1566898199015},{"_id":"themes/next/scripts/filters/excerpt.js","hash":"a66d503e52fd6ee2b17d3ac17920d62ca06ebffe","modified":1566898199015},{"_id":"themes/next/scripts/filters/exturl.js","hash":"4911d916f4ba635c9769af97ef885ab9efb5ad37","modified":1566898199015},{"_id":"themes/next/scripts/filters/lazyload.js","hash":"3b68841eebde1e4ac0d19c3e82d6e2b5e7401619","modified":1566898199016},{"_id":"themes/next/scripts/filters/minify.js","hash":"38e76847592de648fe6bdacad3cf7788bb504e7d","modified":1566898199016},{"_id":"themes/next/scripts/helpers/engine.js","hash":"e82d4f2263277f4c08d1f1e072090db0c52929bb","modified":1566898199016},{"_id":"themes/next/scripts/helpers/font.js","hash":"872934a2e31a45284487ab37c61403c8f6d10890","modified":1566898199016},{"_id":"themes/next/scripts/helpers/next-inject.js","hash":"bb61af8b505e0bbb6adf383a5fee04e6407aafbc","modified":1566898199016},{"_id":"themes/next/scripts/helpers/next-js.js","hash":"5a9667e830fd1842c345645fe21eac3ec7363d8c","modified":1566898199016},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1566898199017},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"8e1a32824d2245c72b5d3cc972c56843e4df01bc","modified":1566898199017},{"_id":"themes/next/scripts/tags/button.js","hash":"39156bf735c1d1ebd0d418c411f14ff4f0acdd75","modified":1566898199017},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"6fbc5764dddca114667f1487120a9ed32519857b","modified":1566898199017},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1566898199017},{"_id":"themes/next/scripts/tags/full-image.js","hash":"6f3ce3cf749a1893da212234cc2c835ee34b9969","modified":1566898199017},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8e1befa08c07f822f9487978dbd27db60fb700c7","modified":1566898199018},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"9c6363b36bea3f5821656b916d08fcc1ed1eee51","modified":1566898199018},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1566898199018},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1566898199018},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1566898199018},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1566898199018},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1566898199018},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1566898199018},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1566898199036},{"_id":"themes/next/source/css/main.styl","hash":"ee7c731c03d724827d9324d08be701c9d2f04c60","modified":1566898199035},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1566898199036},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1566898199037},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1566898199037},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1566898199037},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1566898199037},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1566898199038},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1566898199038},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1566898199038},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1566898199038},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1566898199038},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1566898199038},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1566898199039},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1566898199039},{"_id":"themes/next/source/js/algolia-search.js","hash":"f632ff7a404ac4fb04313bc554815406ebcb2a0b","modified":1566898199039},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1566898199039},{"_id":"themes/next/source/js/bookmark.js","hash":"1796d7e1bee3061ecb225aaeb372b09744b3b93a","modified":1566898199040},{"_id":"themes/next/source/js/local-search.js","hash":"523ec46c532bd49186d076424054fc10a3ddafd8","modified":1566898199040},{"_id":"themes/next/source/js/motion.js","hash":"6df12bc25f19140c2ea3be345fef2abc4e805813","modified":1566898199040},{"_id":"themes/next/source/js/next-boot.js","hash":"dcdd911120de231dee3fe9c3411e1690175feaf5","modified":1566898199040},{"_id":"themes/next/source/js/utils.js","hash":"4fa51062a768b95466609a6813a565734571f1bc","modified":1566898199041},{"_id":"source/images/canvas-engine-research/cocos-creator.png","hash":"31f28a214683c670df741a168c29d801bf13d1e4","modified":1566870838580},{"_id":"source/images/canvas-engine-research/Egret-Engine-2D.png","hash":"527508d692bac8303045b7b7407e26e066c2f62f","modified":1566870838579},{"_id":"source/images/composite-pattern/2018-09-02-am-11.50.24.png","hash":"fdab12336e995073707a585611f455f74c880614","modified":1566870838582},{"_id":"source/images/geohash/4.png","hash":"8e0713371c5e11da6289350257a1b1da098f9873","modified":1566870838588},{"_id":"source/images/geohash/10.png","hash":"f844bf5cb9655ae8c21f9c82909d1cc7e005a70a","modified":1566870838587},{"_id":"source/images/geohash/7.png","hash":"c19a72f8e480c4631e1c093c05c2fff6af67d4b8","modified":1566870838591},{"_id":"source/images/geohash/6.png","hash":"f33178b0714479fe9aeb5a831f8cb8555b0d61d3","modified":1566870838591},{"_id":"source/images/how-display-content-works/Screen-Shot-2018-03-27-at-10.27.27-am.png","hash":"7ffdc9392dbdcf17b02be2f95f45b8a63a96240c","modified":1566870838595},{"_id":"source/images/node-memory-leak/4ffd766c-a3aa-11e9-8f00-0a58ac13161b.png","hash":"16907dfec3bd8fe91bf309bdc9d5642ba8702f16","modified":1566870838597},{"_id":"source/images/redis-transaction/overview.png","hash":"fb62f7868536ce1bfffb534884aae0484b1f7930","modified":1562664888258},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566898199032},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566898199032},{"_id":"themes/next/source/lib/three/.gitignore","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567042367484},{"_id":"source/images/crashBall-by-css3/crash-ball.gif","hash":"316e6d6e890c3b285e882d8eb13dda6b1524922f","modified":1566870838583},{"_id":"source/images/redis-PubSub/overview.png","hash":"3b779c6c62ac583e89ae8fc96c92969756240d45","modified":1562665264412},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"d2aa948b74fa2863fccca50162669dadde4d09ea","modified":1566898198999},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"051fe68bdc953a0e70b82dcaeb0d4cbbbfd69eb6","modified":1566898198999},{"_id":"themes/next/layout/_partials/analytics/busuanzi-counter.swig","hash":"805b79fcfff59dbbc2b426deb03ed15c5be11dec","modified":1566898199000},{"_id":"themes/next/layout/_partials/analytics/index.swig","hash":"ec3c1cd6ace7e6a01b490ac323a4e1ec1fa65fd1","modified":1566898199000},{"_id":"themes/next/layout/_partials/analytics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1566898199000},{"_id":"themes/next/layout/_partials/analytics/firestore.swig","hash":"edeb02d4d56c11536eaed5a8b4705b717f357895","modified":1566898199000},{"_id":"themes/next/layout/_partials/analytics/lean-analytics.swig","hash":"035ed7f1670489ef8b9ef13d71ddf28f1fba6e2c","modified":1566898199000},{"_id":"themes/next/layout/_partials/analytics/tencent-analytics.swig","hash":"c7b55198361ffd96b921b37ca90f6adfccf0d391","modified":1566898199000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"9d69ca5d8436970c0339c4a0932acd3e054f0309","modified":1566898199001},{"_id":"themes/next/layout/_partials/analytics/tencent-mta.swig","hash":"a2bfea40acc9e18d1cd73edc52df57278b746e81","modified":1566898199000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"13dcdcf008387e5972fb98ef59f5dd3d9440d9e4","modified":1566898199001},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"f2d35f035e881c5ba304aeb2741f91a4b8b5b33c","modified":1566898199001},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"a991def5f061b955071b893cf57d65ceb5b344a0","modified":1566898199001},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"7f9fdad8af699958d419c9a9e0a5e722a40264c7","modified":1566898199002},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"542f00ab9ecfd4728c91687260b0f3d31ae62a31","modified":1566898199002},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"3260c630beeecc32ad5f54d741fff9c0d588fb83","modified":1566898199002},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"015c84817bac65f641e5da35583638a176363ab1","modified":1566898199003},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"d41897fa8ce9925f97ffe27cfa0f11dc84c2443d","modified":1566898199002},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"5804cc42bcd5ea6116e62303b96ce31c78f84751","modified":1566898199003},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2fa7fa909e4cd24c0f520b856f4e74c43af6314f","modified":1566898199003},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"8b98b31b1ba5a745743828cd916b97e81089c6e6","modified":1566898199003},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"6445fffd63c576bada069c9fa520bf0f6019890b","modified":1566898199004},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"f9017a2deb2f262912476e94822081bb10ee43af","modified":1566898199004},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"98453ac4a520b2600181fc0331f0067125d0ed4f","modified":1566898199004},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"98c235d3b9af4155f2e0c4cc84685523f4987619","modified":1567042367479},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f1107c28661370e10e1940bff856f22f14f08518","modified":1566898199004},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"55c4ed80ef05ba76771c586657fdd7e9c6a0913a","modified":1566898199005},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1566898199006},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1566898199006},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1566898199006},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"48da7e0ff79dcc4e94364fd5a4cec2e8b29e0e30","modified":1566898199007},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"32c8a447e629aea92bcde06ff9500a0016304964","modified":1566898199007},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1566898199006},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"146636b4cf5d007627d044bbda14738984824955","modified":1566898199007},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"8471561b228132f4863177ff5a6579f540a50bb4","modified":1566898199008},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1566898199007},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"e8aa0ba146b658ae3b73efc4ca63325886bbaa2d","modified":1566898199008},{"_id":"themes/next/layout/_third-party/chat/index.swig","hash":"f2d07d655dbd7b8381be36f56204706b897b8eab","modified":1566898199008},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1566898199008},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"a7a26afd3118e036621f802bad42c0cbcced9676","modified":1566898199009},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b20d3f1e8ae5d92b559060d000437c2384663e8f","modified":1566898199009},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"f5aec655aeee0f5b11e62230688cd6a383a3d9d5","modified":1566898199009},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"6c886d8aba8ac6e79a4a86576db24e7d5966b28e","modified":1566898199009},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"ef38217a457749e528cf00c487b99cb963ccfbea","modified":1566898199009},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"8151d33c6666ef8b0d7ac9405fe391aeba38938b","modified":1566898199009},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"cf4ed630beec3a7d2b7f74cc97897b596d061a51","modified":1566898199010},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"e00e4ed40ea95d15c4eb81349e86009b69c5ed9d","modified":1566898199010},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"6308f0b295f9255c100800f57660b777f6c9122c","modified":1566898199010},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"57f6da9f6f2cc48904ac2eaf266515528395e554","modified":1566898199011},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"db6842138f6172f16a8b767163305a4ef517afe6","modified":1566898199011},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1566898199011},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1566898199011},{"_id":"themes/next/layout/_third-party/tags/index.swig","hash":"78bfe0cff0c32e3a55815808a128cf305d27d3bc","modified":1566898199011},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"2aee256fd034da1b59139ba57e0f25d842818611","modified":1566898199011},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"4f9b27da4f70142e02dfbb48904cbec66620f70c","modified":1566898199011},{"_id":"themes/next/scripts/events/lib/config.js","hash":"4a60d43a4258599083b98016353e8ca2880844d6","modified":1566898199013},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1566898199013},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"8c7568782083b0d5375b2c8a4c56f82667c2fb2d","modified":1566898199013},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f453654631cebbd71642cc55913dbdd2139d61d","modified":1566898199014},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"31a6c8fbdfa16112b0b099727437b9df7641d421","modified":1566898199014},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"f6ca50927b8ed7764974099b11dd1b7a342e2fd3","modified":1566898199014},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"1062049b3990cbc0fc182cb7ab49c1504d4c7233","modified":1566898199014},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"353be438ad0659039fbb0e16e6e5f7c422737e32","modified":1566898199014},{"_id":"themes/next/scripts/filters/comment/facebook-comments-plugin.js","hash":"5ec24848a88d5394012134b345b72c471c894add","modified":1566898199015},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"ff0a8f6b74a426e7bc0a35ded903f3a25f3d18be","modified":1566898199015},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"e842c4d246f2b6b87738ba5731b198d8ebb001a9","modified":1566898199015},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6771e3d0da9458c94da49d4ab75d5529af971b38","modified":1566898199015},{"_id":"themes/next/scripts/filters/comment/vkontakte.js","hash":"94b89f35127e288e850cb0654eb9a9662b25c388","modified":1566898199015},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"b58ed9dabc5be0090647d9a0afc43359e1e0e14c","modified":1566898199031},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1619130f81e091bb9ac43f93814f594dd1739255","modified":1566898199032},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"8206e88319642a56019f3ada444d475778d195c9","modified":1566898199032},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a20af666490c0221634daaa53749fc33162e2355","modified":1566898199034},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"701c69c4a71973fb04aef326c6b3ff0a006a7d28","modified":1566898199035},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"1255cb6bd740c433fcbde2ca5435a5f6eff77a7d","modified":1566898199035},{"_id":"themes/next/source/css/_variables/base.styl","hash":"009483da1bb7c9b6c48488ccd0f358fc8518ba34","modified":1566898199035},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"1934ee185bc3153c7eacabf232dcaa34d80833e9","modified":1566898199035},{"_id":"themes/next/source/js/schemes/muse.js","hash":"7977dfb3f1fae8c58bae633c0772cef9511b6efd","modified":1566898199040},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"573ea95a7fd4be631f0839aebd60749421b8737f","modified":1566898199040},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1567042367480},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"6df74359266a419a2afed1b5573faf17d3cb9912","modified":1567042367480},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1566898199041},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1566898199041},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1566898199041},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"6b4437a9cd8aa04329cc6220a595acfe1fb9b598","modified":1567042367480},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1567042367480},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1566898199042},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1566898199041},{"_id":"themes/next/source/lib/pace/README.md","hash":"a7f27b09114bc7b89ced92b85cc7bc9dd45ca26a","modified":1567042367481},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1567042367481},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1567042367481},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1567042367481},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1567042367481},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1567042367482},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1567042367482},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1567042367482},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1567042367482},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1567042367482},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1567042367482},{"_id":"themes/next/source/lib/pace/pace-theme-flat-top.min.css","hash":"544f038c983e2be5f7fc04ce6615f7b70e4554fe","modified":1567042367483},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1567042367482},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1567042367483},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1567042367483},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1567042367484},{"_id":"themes/next/source/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1567042367485},{"_id":"themes/next/source/lib/three/README.md","hash":"d85bb90afd948101f8e8f4a45cb85e6c65ca8627","modified":1567042367485},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1567042367483},{"_id":"themes/next/source/lib/three/gulpfile.js","hash":"8667c49d81292b55e4ec8c0ec9f8eb42f4ababab","modified":1567042367486},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"b2e62e969b2f6322c5c6cbe657cd27cecda8eb6a","modified":1567042367485},{"_id":"themes/next/source/lib/three/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1567042367487},{"_id":"themes/next/source/lib/three/package.json","hash":"eab1fdcad97bba965dfd5024de8c93d086299f56","modified":1567042367486},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"fcbf7d8d7f22f0f90df11c587c10cc2a021087d7","modified":1567042367487},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"294caca93f6099ea1a5ee1370095484e84ade8f8","modified":1567042367485},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1566898199050},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1566898199049},{"_id":"source/images/redis-datapersistence/overview.png","hash":"ece18339f0e054414e9fd1ef51616eb69dd1b1cc","modified":1562656253325},{"_id":"source/images/redis-io/overview.png","hash":"d4c74634a471c63e798e327138bd3403eed2c97d","modified":1562653322761},{"_id":"source/images/redis-master-slave/overview.png","hash":"7856bf49b6eb5eaed95e996b36e79a6f65b3eea3","modified":1562894937617},{"_id":"themes/next/source/lib/jquery/index.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1566898199049},{"_id":"themes/next/source/lib/pace/pace-theme-material.min.css","hash":"131747a1e6982312ae3777998a99763b684d3290","modified":1567042367483},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"ca4829bad30a50c87c077d817d9cf09a590e8e3c","modified":1566898199019},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"aab122a95c396ef43ee5a86a92180f5c8644129d","modified":1566898199019},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"5772ee6cdc50a9e1a4425d79114d46065babe217","modified":1566898199019},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"72e2e0adca91cb3a371b5e28d67abb7cab82bb4b","modified":1566898199019},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"202c01a3dc459e2f5bce6a7b5e15a460c8485b77","modified":1566898199019},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"070f4ca0aeb35130323801f24b58e283282d23d8","modified":1566898199022},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"2c79406719469a5db876f0ea03a7b834cec927d5","modified":1566898199026},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"ede406ddaf1fb1c930e6923dc193af3c0f5ef03a","modified":1566898199027},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"ef19df19d475386fb060dd94670d13f8e924c2c2","modified":1566898199027},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"8b74feba984c847b1e8ffa0baeef74497068507f","modified":1566898199030},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"26e5d16a2f720ca0947e5ec7e6cfd88b5d0a61e0","modified":1566898199031},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0d60220323e6e78845af0cf9cdcebf7e5dd009ec","modified":1566898199031},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"0cdd236cce4d1149effd59965be46c98718eefe9","modified":1566898199031},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"3881c910ff43d983b6550d216fe63bc5bdc7bfaa","modified":1566898199031},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"17f3134d53d61a3c6ba7aabe77f1adf8697994fa","modified":1566898199031},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"392ffe4826761e5e8fc0b5ecd544c312bccb69d9","modified":1566898199032},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bdffafeb55a1f55bc7ef93c1877203ec6b1a299b","modified":1566898199032},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"61c096e7b8fa43720fad02573ff2db8b9f7ab965","modified":1566898199031},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"369c6cc457931bd6a06edf82e81ed1a64d14d236","modified":1566898199032},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"3babf62eee4d8eeba545fc4b09cb80cc8ddc0d64","modified":1566898199033},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"c3d2430baa32195ed87c0a68de552b2e58ff9892","modified":1566898199032},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"e76a696903ede4879a4571b92401bb435e2a3d29","modified":1566898199033},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"6dc5149c967765c91edf02f04098dcd010d2a4dc","modified":1566898199033},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"f4210e679c8d7426f26970e03b1b8073644903f5","modified":1566898199033},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"dc4ab584198a1b43a09cdbad7cfecae185ab7d6f","modified":1566898199033},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"92e92055eedb4efde7cbad488fb1ea5c64a02692","modified":1566898199033},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"55a1e7deda42cb3318d1e19b904c9c91891659f3","modified":1566898199034},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"9a7d7502ce394ddeba1773f90bbe19016b0cf0f6","modified":1566898199033},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"4dc216cb9f1c12bf7720012fd24e126ef6a4eca7","modified":1566898199033},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"18d3c825d9fd4266e1973ef330ddf5c0cce987e8","modified":1566898199034},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"3b1cc9c5c17ab917134d2222aafb1cb8a25f238b","modified":1566898199034},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c690e433b9ecb0c37b1dfc287c00beb0bab69400","modified":1566898199034},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"bb9eccf60ad2385af141f5d8aac7ba24a9047a86","modified":1566898199034},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"e71fcda9d45aa34075451c6d8458249f2be889ae","modified":1566898199034},{"_id":"themes/next/source/lib/canvas-nest/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1567042367480},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1566898199042},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1566898199042},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1566898199043},{"_id":"themes/next/source/lib/pace/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1567042367480},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","hash":"71141daa39bbcedcf14ae95c05023a57828a5a43","modified":1567042367486},{"_id":"themes/next/source/lib/three/lib/Projector.js","hash":"69725cd0af6868c5aa059343cc6e18e0c10b2f2e","modified":1567042367486},{"_id":"themes/next/source/lib/three/src/three-waves.js","hash":"ac382962d408f16acf07b925b94bb15495b5207c","modified":1567042367487},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","hash":"10795d7f1e5393b2b5e1529b017ee4e0ffe82ac9","modified":1567042367487},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","hash":"8381c792b161001a1b5cf39613c6d48e2588b3ce","modified":1567042367487},{"_id":"source/images/canvas-engine-research/cocos-ide-img.png","hash":"d5d54c61b972d7c420f37020966b1461c5bba9d2","modified":1566870838581},{"_id":"source/images/geohash/5.png","hash":"79a3baa1ae1d6651c95a14938ec6e17607e8387e","modified":1566870838590},{"_id":"source/images/growth-hacker/growthhacker.png","hash":"cc104a23134cf860c3d673ec7b31386100fd803f","modified":1565061437557},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1566898199047},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1566898199046},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"89e82c1583ebcc1c4648e7f5dbf1e1be6710d197","modified":1566898199019},{"_id":"themes/next/source/css/_common/components/header/bookmark.styl","hash":"f7977cfacaca9db6fab4d154486ad57ec4b0fde9","modified":1566898199020},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1566898199020},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"52324ad6efc43afb2eacacebab36bef92eb8d0d1","modified":1566898199020},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"fa32e72b66071cf9917bfaaf283b8d1cb31edc6c","modified":1566898199020},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"09e8b46568d84b12c41b3151f2ab00cd342f3ac5","modified":1566898199020},{"_id":"themes/next/source/css/_common/components/highlight/copy-code.styl","hash":"c123994648e5d571b28cbb4b016faf4a2525c436","modified":1566898199021},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1e02b737b8a084fc30dbbaa08517e6995dbd8c72","modified":1566898199020},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"c09e7437b862025ebf5402dbba4bf5c4ba3883ab","modified":1566898199020},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1566898199021},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1566898199021},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"0fff836ab890ba14cd5ac0e1f93bfe755b7e2eab","modified":1566898199021},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"33125c539f19ea932d3576fd99dbebf6caccc617","modified":1566898199021},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1566898199021},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1566898199022},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"a22c639cdf1073c9d060af62233125991ddf4dd5","modified":1566898199022},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1566898199023},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"757db8087e72b7affa021083a68426f5f62ceffe","modified":1566898199022},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"da524632dc1a5848b77dd22bf1bfab8b45cee248","modified":1566898199023},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a5ef170128ab8bc9c0336d6d8d082a97f677563e","modified":1566898199024},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"9cf76f80cfdb984ff65a78ffc7b41d7a997df630","modified":1566898199023},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"e8b5b1027ec40d6e58b147aa32d61929684a5a44","modified":1566898199024},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"08bf0856710d306134c7929a4a79407c18a8e4fb","modified":1566898199024},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"cb45887618c4e7e630d7a04b73fb1101af2d48c2","modified":1566898199026},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"bb1cdbe39d9948474f80d0915ac9cf9cf63fbe7f","modified":1566898199024},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1566898199026},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"9e872745322ae0f1cc6ad1675ee0db18da2bd9c8","modified":1566898199026},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"ebf03782c04d492fb3b0160832cdc103db508e6c","modified":1566898199026},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"c2c4800408fde729290ea6c47fe62e46582fe512","modified":1566898199026},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"225ee39193a9a9211c0f355b85db126fb1b5c986","modified":1566898199026},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"c6eabc2676fd7d5eded568cebb8a529ac4e9227a","modified":1566898199027},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"00b2055f170e54267321d27118e0a7f07d10890b","modified":1566898199027},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"49d3729a0f93fc5b9f899b5c45eef569f4d84cee","modified":1566898199027},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"aa1c08abde2a4cb01906eb5313d5b3b3ee586bfe","modified":1566898199028},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"b0b7f04347f2bf8d58752c6cdcd11df40ec73575","modified":1566898199028},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"7643e053bd0cc24d8832434d2d2667f1d3c9d4db","modified":1566898199028},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"f3d00c8b1dfff26ed4075e04de17ddaf190d9bfb","modified":1566898199028},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"e36e186e4fe506bfdb3b7eb62f058ee28d73adc2","modified":1566898199029},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"92fbaa079a46242d2f654ac62b9621057ebeda28","modified":1566898199028},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"919d996ffc05c0ffd4bd308c3bea6980ddd123a5","modified":1566898199029},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"581faf00b971212c8d8e20059cb4dee8d9d24296","modified":1566898199029},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1566898199029},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2d4af920d3476a00b0bf3ef8d6ec30388f3014da","modified":1566898199029},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"7a335fd51a488d70ba26a4b905fc28c0ec10452c","modified":1566898199029},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1566898199030},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1566898199030},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"5f1c6d1d7ad071c5f947aaaa7b4a458512f17111","modified":1566898199030},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"712800d40ed5a7247f760acda41aceb081e1cfa0","modified":1566898199030},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"5b25021264f917b353f820d88be09b815972f910","modified":1566898199030},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"229a254f9079f8c840c955198b54db554d1e56c5","modified":1566898199027},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bfbb2b8dfceb79c5adcc31338f9cc8efdd3c1bc6","modified":1566898199027},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"c9337e837f10c5f40c27a0c0a012f39dfadc7572","modified":1566898199029},{"_id":"source/images/geohash/1.png","hash":"f20cf954c06a1c6b85f67404f0fb0ad9e3a91f26","modified":1566870838586},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1566898199045},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"7b3a8ba276ef80d4806cefc46e73d9e6c404c85a","modified":1566898199023},{"_id":"source/images/geohash/8.png","hash":"4c25893a18d101addd05bb35f31bf94cf30fe07f","modified":1566870838594},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1567042367490},{"_id":"source/images/gif/flash.gif","hash":"6430a3b81ddc3046576bb7be73a0f799d867cb62","modified":1566959578367},{"_id":"source/images/gif/sea.gif","hash":"7fa2266b8858bc7ec5cf896a9727898a807407f0","modified":1566959578389},{"_id":"source/images/test-guide/test_run.gif","hash":"076e04fff8438c12152bee390442bbde230089bf","modified":1566870838616},{"_id":"source/images/vuejs2.x-xmind/c533fcd2-f78c-11e8-aa9e-525400ac2e73.png","hash":"55130578cc24cb4bfd6b87523f183c2c0ca46ae5","modified":1566870838644}],"Category":[{"name":"翻译","_id":"cjzwat4yn0028uaidpbgrxymu"}],"Data":[],"Page":[{"title":"about me","layout":"about","comments":0,"_content":"\n#### email\n\n1370204201@qq.com","source":"about/index.md","raw":"---\ntitle: about me\nlayout: about\ncomments: false\n---\n\n#### email\n\n1370204201@qq.com","date":"2019-08-29T01:32:47.475Z","updated":"2019-08-29T01:32:47.475Z","path":"about/index.html","_id":"cjzwat4ul0001uaidxrtklkph","content":"<h4 id=\"email\"><a href=\"#email\" class=\"headerlink\" title=\"email\"></a>email</h4><p><a href=\"mailto:1370204201@qq.com\" target=\"_blank\" rel=\"noopener\">1370204201@qq.com</a></p>\n","site":{"data":{}},"length":22,"excerpt":"","more":"<h4 id=\"email\"><a href=\"#email\" class=\"headerlink\" title=\"email\"></a>email</h4><p><a href=\"mailto:1370204201@qq.com\" target=\"_blank\" rel=\"noopener\">1370204201@qq.com</a></p>\n"},{"date":"2019-08-28T12:05:00.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ndate: 2019-08-28 20:05:00\ntype: \"categories\"\ncomments: false\n---","updated":"2019-08-29T01:32:47.475Z","path":"categories/index.html","title":"","layout":"page","_id":"cjzwat4uo0003uaidxzzbf5ct","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"date":"2019-08-28T12:03:53.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ndate: 2019-08-28 20:03:53\ntype: \"tags\"\ncomments: false\n---","updated":"2019-08-29T01:32:47.476Z","path":"tags/index.html","title":"","layout":"page","_id":"cjzwat4ur0006uaidq5s07z0p","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"几款html 5 canvas游戏引擎的调研","date":"2018-05-15T11:26:58.000Z","_content":"\n为满足对用户增长的需求，游戏类活动页开发逐渐提上日程，而我们对这方面积累不多。\n<escape><!-- more --></escape>\n\n## 问题分析\n\n### 引入游戏引擎原因\n\n原生canvas只提供了画布实现，在游戏开发角度上，对开发者而言，仍有许多工作要做：\n\n- 场景构建（画面中不动的东西）\n- 物体构建（画面中动的东西）\n- 动画实现（让画面中的东西动起来）\n- 物理算法（模拟现实效果）\n- 游戏业务逻辑\n\n其中，除游戏业务逻辑外，其余部分皆可重复使用。\n\n所以，可以认为，引入游戏引擎有一定的必要性。\n\n### 面向的业务场景与其带来的要求\n\n我们的目的是用户增长，具体手段是营销活动页。\n\n所以，游戏载体是营销活动页，则游戏的业务与体积都必须轻量、小型，便于用户接受、传播。\n\n另外，微信小游戏在传播方面有其天然的巨大优势，在这方面也要有一定的考虑。\n\n## 需求提取\n\n对于游戏引擎的调研，需要从以下角度调研：\n\n- 文档可读性\n- 开发出来的产品的性能、体积\n- 其带来的工具链或解决方案是否契合我们的业务场景 -- 轻量、小型的营销活动页、微信小游戏\n\n## 目标引擎\n\n### hilo\n\nHilo作为一个跨终端的互动小游戏解决方案，同时有称综合解决方案。从它的演变来看，Hilo属于阿里前端在实践总总结出来的一套工具库。\n\n### Egret\n\nEgret不仅仅提供了一个基于HTML5技术的游戏引擎，更是提供了原生打包工具和众多周边产品，使其成为“解决方案”\n\n### Cocos\n\n老牌又流行的解决方案\n\n## cocos creator\n\n![](/images/canvas-engine-research/cocos-creator.png)\n\n## Egret Engine 2D\n\n![](/images/canvas-engine-research/Egret-Engine-2D.png)\n\n## hilo\n\n![](/images/canvas-engine-research/hilo.png)\n\n## 比较\n\n满分5星\n\n比较维度：\n- 文档\n- 原型构建(开发速度)\n- debug\n- 与现有开发流程、构建流程、业务体系结合\n- 后续运营维护(迭代、事件上报、日志上报)\n\n### cocos creator\n- 文档\n    1. 较完善\n    1. 有简单的实例教程\n    1. cocos js的文档老旧，与当前版本不符\n    1. 结论：3星\n- 原型构建(开发速度)\n    1. 很大一部分是UI操作\n    1. 快\n    1. 结论：5星\n- debug\n    1. 报错信息完整\n    1. 但要看懂报错信息的话，必须对cocosjs有一定了解\n    1. 结论：1星\n- 与现有开发流程、构建流程、业务体系结合\n    1. 当前团队模块化方案为commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用\n    1. cocos creator构建封闭程度较高，与现有业务结合有一定的配置工作\n    1. 结论：1星\n- 后续运营维护(迭代、事件上报、日志上报)\n    1. 当前的事件上报、日志上报皆有commonjs规范的组件，不能和creator无缝结合\n    1. creator的开发为另一套流程体系，和现有体系需重新磨合，迭代有一定的磨合工作\n    1. 结论：1星\n\n### Egret Engine 2D\n- 文档\n    1. 较完善\n    1. 没有简单的实例教程，上手相对麻烦\n    1. 结论：2星\n- 原型构建(开发速度)\n    1. 和当前前端开发形式一致\n    1. 结论：3星\n- debug\n    1. 报错信息完整\n    1. 结论：3星\n- 与现有开发流程、构建流程、业务体系结合\n    1. 当前团队模块化方案为commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用\n    1. Egret Engine 2D构建封闭程度较高，与现有业务结合有一定的配置工作\n    1. 结论：1星\n- 后续运营维护(迭代、事件上报、日志上报)\n    1. 当前的事件上报、日志上报皆有commonjs规范的组件，不能和Egret Engine 2D无缝结合\n    1. Egret Engine 2D的开发为另一套流程体系，和现有体系需重新磨合，迭代有一定的磨合工作\n    1. Egret Engine 2D基于typescript，利于迭代维护\n    1. 结论：2星\n\n### hilo\n- 文档\n    1. 较完善\n    1. 有简单的实例教程\n    1. 结论：5星\n- 原型构建(开发速度)\n    1. 和当前前端开发形式一致\n    1. 结论：3星\n- debug\n    1. 报错信息完整\n    1. 结论：3星\n- 与现有开发流程、构建流程、业务体系结合\n    1. 当前团队模块化方案为commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用\n    1. hilo可使用commonjs模块方案加载，可用gulp + webpack构建，与后端结合也十分方便\n    1. hilo是针对运营活动类小游戏而产生的解决方案，和我们当前背景一致\n    1. 结论：5星\n- 后续运营维护(迭代、事件上报、日志上报)\n    1. 当前的事件上报、日志上报皆有commonjs规范的组件，可以和hilo无缝结合\n    1. hilo可无缝融入当前开发体系\n    1. 结论：5星\n","source":"_posts/canvas-engine-research.md","raw":"---\ntitle: 几款html 5 canvas游戏引擎的调研\ndate: 2018-05-15 19:26:58\ntags: [canvas]\n---\n\n为满足对用户增长的需求，游戏类活动页开发逐渐提上日程，而我们对这方面积累不多。\n<escape><!-- more --></escape>\n\n## 问题分析\n\n### 引入游戏引擎原因\n\n原生canvas只提供了画布实现，在游戏开发角度上，对开发者而言，仍有许多工作要做：\n\n- 场景构建（画面中不动的东西）\n- 物体构建（画面中动的东西）\n- 动画实现（让画面中的东西动起来）\n- 物理算法（模拟现实效果）\n- 游戏业务逻辑\n\n其中，除游戏业务逻辑外，其余部分皆可重复使用。\n\n所以，可以认为，引入游戏引擎有一定的必要性。\n\n### 面向的业务场景与其带来的要求\n\n我们的目的是用户增长，具体手段是营销活动页。\n\n所以，游戏载体是营销活动页，则游戏的业务与体积都必须轻量、小型，便于用户接受、传播。\n\n另外，微信小游戏在传播方面有其天然的巨大优势，在这方面也要有一定的考虑。\n\n## 需求提取\n\n对于游戏引擎的调研，需要从以下角度调研：\n\n- 文档可读性\n- 开发出来的产品的性能、体积\n- 其带来的工具链或解决方案是否契合我们的业务场景 -- 轻量、小型的营销活动页、微信小游戏\n\n## 目标引擎\n\n### hilo\n\nHilo作为一个跨终端的互动小游戏解决方案，同时有称综合解决方案。从它的演变来看，Hilo属于阿里前端在实践总总结出来的一套工具库。\n\n### Egret\n\nEgret不仅仅提供了一个基于HTML5技术的游戏引擎，更是提供了原生打包工具和众多周边产品，使其成为“解决方案”\n\n### Cocos\n\n老牌又流行的解决方案\n\n## cocos creator\n\n![](/images/canvas-engine-research/cocos-creator.png)\n\n## Egret Engine 2D\n\n![](/images/canvas-engine-research/Egret-Engine-2D.png)\n\n## hilo\n\n![](/images/canvas-engine-research/hilo.png)\n\n## 比较\n\n满分5星\n\n比较维度：\n- 文档\n- 原型构建(开发速度)\n- debug\n- 与现有开发流程、构建流程、业务体系结合\n- 后续运营维护(迭代、事件上报、日志上报)\n\n### cocos creator\n- 文档\n    1. 较完善\n    1. 有简单的实例教程\n    1. cocos js的文档老旧，与当前版本不符\n    1. 结论：3星\n- 原型构建(开发速度)\n    1. 很大一部分是UI操作\n    1. 快\n    1. 结论：5星\n- debug\n    1. 报错信息完整\n    1. 但要看懂报错信息的话，必须对cocosjs有一定了解\n    1. 结论：1星\n- 与现有开发流程、构建流程、业务体系结合\n    1. 当前团队模块化方案为commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用\n    1. cocos creator构建封闭程度较高，与现有业务结合有一定的配置工作\n    1. 结论：1星\n- 后续运营维护(迭代、事件上报、日志上报)\n    1. 当前的事件上报、日志上报皆有commonjs规范的组件，不能和creator无缝结合\n    1. creator的开发为另一套流程体系，和现有体系需重新磨合，迭代有一定的磨合工作\n    1. 结论：1星\n\n### Egret Engine 2D\n- 文档\n    1. 较完善\n    1. 没有简单的实例教程，上手相对麻烦\n    1. 结论：2星\n- 原型构建(开发速度)\n    1. 和当前前端开发形式一致\n    1. 结论：3星\n- debug\n    1. 报错信息完整\n    1. 结论：3星\n- 与现有开发流程、构建流程、业务体系结合\n    1. 当前团队模块化方案为commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用\n    1. Egret Engine 2D构建封闭程度较高，与现有业务结合有一定的配置工作\n    1. 结论：1星\n- 后续运营维护(迭代、事件上报、日志上报)\n    1. 当前的事件上报、日志上报皆有commonjs规范的组件，不能和Egret Engine 2D无缝结合\n    1. Egret Engine 2D的开发为另一套流程体系，和现有体系需重新磨合，迭代有一定的磨合工作\n    1. Egret Engine 2D基于typescript，利于迭代维护\n    1. 结论：2星\n\n### hilo\n- 文档\n    1. 较完善\n    1. 有简单的实例教程\n    1. 结论：5星\n- 原型构建(开发速度)\n    1. 和当前前端开发形式一致\n    1. 结论：3星\n- debug\n    1. 报错信息完整\n    1. 结论：3星\n- 与现有开发流程、构建流程、业务体系结合\n    1. 当前团队模块化方案为commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用\n    1. hilo可使用commonjs模块方案加载，可用gulp + webpack构建，与后端结合也十分方便\n    1. hilo是针对运营活动类小游戏而产生的解决方案，和我们当前背景一致\n    1. 结论：5星\n- 后续运营维护(迭代、事件上报、日志上报)\n    1. 当前的事件上报、日志上报皆有commonjs规范的组件，可以和hilo无缝结合\n    1. hilo可无缝融入当前开发体系\n    1. 结论：5星\n","slug":"canvas-engine-research","published":1,"updated":"2019-08-29T01:32:47.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4uh0000uaid3fyljemr","content":"<p>为满足对用户增长的需求，游戏类活动页开发逐渐提上日程，而我们对这方面积累不多。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><h3 id=\"引入游戏引擎原因\"><a href=\"#引入游戏引擎原因\" class=\"headerlink\" title=\"引入游戏引擎原因\"></a>引入游戏引擎原因</h3><p>原生canvas只提供了画布实现，在游戏开发角度上，对开发者而言，仍有许多工作要做：</p>\n<ul>\n<li>场景构建（画面中不动的东西）</li>\n<li>物体构建（画面中动的东西）</li>\n<li>动画实现（让画面中的东西动起来）</li>\n<li>物理算法（模拟现实效果）</li>\n<li>游戏业务逻辑</li>\n</ul>\n<p>其中，除游戏业务逻辑外，其余部分皆可重复使用。</p>\n<p>所以，可以认为，引入游戏引擎有一定的必要性。</p>\n<h3 id=\"面向的业务场景与其带来的要求\"><a href=\"#面向的业务场景与其带来的要求\" class=\"headerlink\" title=\"面向的业务场景与其带来的要求\"></a>面向的业务场景与其带来的要求</h3><p>我们的目的是用户增长，具体手段是营销活动页。</p>\n<p>所以，游戏载体是营销活动页，则游戏的业务与体积都必须轻量、小型，便于用户接受、传播。</p>\n<p>另外，微信小游戏在传播方面有其天然的巨大优势，在这方面也要有一定的考虑。</p>\n<h2 id=\"需求提取\"><a href=\"#需求提取\" class=\"headerlink\" title=\"需求提取\"></a>需求提取</h2><p>对于游戏引擎的调研，需要从以下角度调研：</p>\n<ul>\n<li>文档可读性</li>\n<li>开发出来的产品的性能、体积</li>\n<li>其带来的工具链或解决方案是否契合我们的业务场景 – 轻量、小型的营销活动页、微信小游戏</li>\n</ul>\n<h2 id=\"目标引擎\"><a href=\"#目标引擎\" class=\"headerlink\" title=\"目标引擎\"></a>目标引擎</h2><h3 id=\"hilo\"><a href=\"#hilo\" class=\"headerlink\" title=\"hilo\"></a>hilo</h3><p>Hilo作为一个跨终端的互动小游戏解决方案，同时有称综合解决方案。从它的演变来看，Hilo属于阿里前端在实践总总结出来的一套工具库。</p>\n<h3 id=\"Egret\"><a href=\"#Egret\" class=\"headerlink\" title=\"Egret\"></a>Egret</h3><p>Egret不仅仅提供了一个基于HTML5技术的游戏引擎，更是提供了原生打包工具和众多周边产品，使其成为“解决方案”</p>\n<h3 id=\"Cocos\"><a href=\"#Cocos\" class=\"headerlink\" title=\"Cocos\"></a>Cocos</h3><p>老牌又流行的解决方案</p>\n<h2 id=\"cocos-creator\"><a href=\"#cocos-creator\" class=\"headerlink\" title=\"cocos creator\"></a>cocos creator</h2><p><img src=\"/images/canvas-engine-research/cocos-creator.png\" alt></p>\n<h2 id=\"Egret-Engine-2D\"><a href=\"#Egret-Engine-2D\" class=\"headerlink\" title=\"Egret Engine 2D\"></a>Egret Engine 2D</h2><p><img src=\"/images/canvas-engine-research/Egret-Engine-2D.png\" alt></p>\n<h2 id=\"hilo-1\"><a href=\"#hilo-1\" class=\"headerlink\" title=\"hilo\"></a>hilo</h2><p><img src=\"/images/canvas-engine-research/hilo.png\" alt></p>\n<h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><p>满分5星</p>\n<p>比较维度：</p>\n<ul>\n<li>文档</li>\n<li>原型构建(开发速度)</li>\n<li>debug</li>\n<li>与现有开发流程、构建流程、业务体系结合</li>\n<li>后续运营维护(迭代、事件上报、日志上报)</li>\n</ul>\n<h3 id=\"cocos-creator-1\"><a href=\"#cocos-creator-1\" class=\"headerlink\" title=\"cocos creator\"></a>cocos creator</h3><ul>\n<li>文档<ol>\n<li>较完善</li>\n<li>有简单的实例教程</li>\n<li>cocos js的文档老旧，与当前版本不符</li>\n<li>结论：3星</li>\n</ol>\n</li>\n<li>原型构建(开发速度)<ol>\n<li>很大一部分是UI操作</li>\n<li>快</li>\n<li>结论：5星</li>\n</ol>\n</li>\n<li>debug<ol>\n<li>报错信息完整</li>\n<li>但要看懂报错信息的话，必须对cocosjs有一定了解</li>\n<li>结论：1星</li>\n</ol>\n</li>\n<li>与现有开发流程、构建流程、业务体系结合<ol>\n<li>当前团队模块化方案为commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用</li>\n<li>cocos creator构建封闭程度较高，与现有业务结合有一定的配置工作</li>\n<li>结论：1星</li>\n</ol>\n</li>\n<li>后续运营维护(迭代、事件上报、日志上报)<ol>\n<li>当前的事件上报、日志上报皆有commonjs规范的组件，不能和creator无缝结合</li>\n<li>creator的开发为另一套流程体系，和现有体系需重新磨合，迭代有一定的磨合工作</li>\n<li>结论：1星</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Egret-Engine-2D-1\"><a href=\"#Egret-Engine-2D-1\" class=\"headerlink\" title=\"Egret Engine 2D\"></a>Egret Engine 2D</h3><ul>\n<li>文档<ol>\n<li>较完善</li>\n<li>没有简单的实例教程，上手相对麻烦</li>\n<li>结论：2星</li>\n</ol>\n</li>\n<li>原型构建(开发速度)<ol>\n<li>和当前前端开发形式一致</li>\n<li>结论：3星</li>\n</ol>\n</li>\n<li>debug<ol>\n<li>报错信息完整</li>\n<li>结论：3星</li>\n</ol>\n</li>\n<li>与现有开发流程、构建流程、业务体系结合<ol>\n<li>当前团队模块化方案为commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用</li>\n<li>Egret Engine 2D构建封闭程度较高，与现有业务结合有一定的配置工作</li>\n<li>结论：1星</li>\n</ol>\n</li>\n<li>后续运营维护(迭代、事件上报、日志上报)<ol>\n<li>当前的事件上报、日志上报皆有commonjs规范的组件，不能和Egret Engine 2D无缝结合</li>\n<li>Egret Engine 2D的开发为另一套流程体系，和现有体系需重新磨合，迭代有一定的磨合工作</li>\n<li>Egret Engine 2D基于typescript，利于迭代维护</li>\n<li>结论：2星</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"hilo-2\"><a href=\"#hilo-2\" class=\"headerlink\" title=\"hilo\"></a>hilo</h3><ul>\n<li>文档<ol>\n<li>较完善</li>\n<li>有简单的实例教程</li>\n<li>结论：5星</li>\n</ol>\n</li>\n<li>原型构建(开发速度)<ol>\n<li>和当前前端开发形式一致</li>\n<li>结论：3星</li>\n</ol>\n</li>\n<li>debug<ol>\n<li>报错信息完整</li>\n<li>结论：3星</li>\n</ol>\n</li>\n<li>与现有开发流程、构建流程、业务体系结合<ol>\n<li>当前团队模块化方案为commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用</li>\n<li>hilo可使用commonjs模块方案加载，可用gulp + webpack构建，与后端结合也十分方便</li>\n<li>hilo是针对运营活动类小游戏而产生的解决方案，和我们当前背景一致</li>\n<li>结论：5星</li>\n</ol>\n</li>\n<li>后续运营维护(迭代、事件上报、日志上报)<ol>\n<li>当前的事件上报、日志上报皆有commonjs规范的组件，可以和hilo无缝结合</li>\n<li>hilo可无缝融入当前开发体系</li>\n<li>结论：5星</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"length":1670,"excerpt":"<p>为满足对用户增长的需求，游戏类活动页开发逐渐提上日程，而我们对这方面积累不多。</p>","more":"<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><h3 id=\"引入游戏引擎原因\"><a href=\"#引入游戏引擎原因\" class=\"headerlink\" title=\"引入游戏引擎原因\"></a>引入游戏引擎原因</h3><p>原生canvas只提供了画布实现，在游戏开发角度上，对开发者而言，仍有许多工作要做：</p>\n<ul>\n<li>场景构建（画面中不动的东西）</li>\n<li>物体构建（画面中动的东西）</li>\n<li>动画实现（让画面中的东西动起来）</li>\n<li>物理算法（模拟现实效果）</li>\n<li>游戏业务逻辑</li>\n</ul>\n<p>其中，除游戏业务逻辑外，其余部分皆可重复使用。</p>\n<p>所以，可以认为，引入游戏引擎有一定的必要性。</p>\n<h3 id=\"面向的业务场景与其带来的要求\"><a href=\"#面向的业务场景与其带来的要求\" class=\"headerlink\" title=\"面向的业务场景与其带来的要求\"></a>面向的业务场景与其带来的要求</h3><p>我们的目的是用户增长，具体手段是营销活动页。</p>\n<p>所以，游戏载体是营销活动页，则游戏的业务与体积都必须轻量、小型，便于用户接受、传播。</p>\n<p>另外，微信小游戏在传播方面有其天然的巨大优势，在这方面也要有一定的考虑。</p>\n<h2 id=\"需求提取\"><a href=\"#需求提取\" class=\"headerlink\" title=\"需求提取\"></a>需求提取</h2><p>对于游戏引擎的调研，需要从以下角度调研：</p>\n<ul>\n<li>文档可读性</li>\n<li>开发出来的产品的性能、体积</li>\n<li>其带来的工具链或解决方案是否契合我们的业务场景 – 轻量、小型的营销活动页、微信小游戏</li>\n</ul>\n<h2 id=\"目标引擎\"><a href=\"#目标引擎\" class=\"headerlink\" title=\"目标引擎\"></a>目标引擎</h2><h3 id=\"hilo\"><a href=\"#hilo\" class=\"headerlink\" title=\"hilo\"></a>hilo</h3><p>Hilo作为一个跨终端的互动小游戏解决方案，同时有称综合解决方案。从它的演变来看，Hilo属于阿里前端在实践总总结出来的一套工具库。</p>\n<h3 id=\"Egret\"><a href=\"#Egret\" class=\"headerlink\" title=\"Egret\"></a>Egret</h3><p>Egret不仅仅提供了一个基于HTML5技术的游戏引擎，更是提供了原生打包工具和众多周边产品，使其成为“解决方案”</p>\n<h3 id=\"Cocos\"><a href=\"#Cocos\" class=\"headerlink\" title=\"Cocos\"></a>Cocos</h3><p>老牌又流行的解决方案</p>\n<h2 id=\"cocos-creator\"><a href=\"#cocos-creator\" class=\"headerlink\" title=\"cocos creator\"></a>cocos creator</h2><p><img src=\"/images/canvas-engine-research/cocos-creator.png\" alt></p>\n<h2 id=\"Egret-Engine-2D\"><a href=\"#Egret-Engine-2D\" class=\"headerlink\" title=\"Egret Engine 2D\"></a>Egret Engine 2D</h2><p><img src=\"/images/canvas-engine-research/Egret-Engine-2D.png\" alt></p>\n<h2 id=\"hilo-1\"><a href=\"#hilo-1\" class=\"headerlink\" title=\"hilo\"></a>hilo</h2><p><img src=\"/images/canvas-engine-research/hilo.png\" alt></p>\n<h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><p>满分5星</p>\n<p>比较维度：</p>\n<ul>\n<li>文档</li>\n<li>原型构建(开发速度)</li>\n<li>debug</li>\n<li>与现有开发流程、构建流程、业务体系结合</li>\n<li>后续运营维护(迭代、事件上报、日志上报)</li>\n</ul>\n<h3 id=\"cocos-creator-1\"><a href=\"#cocos-creator-1\" class=\"headerlink\" title=\"cocos creator\"></a>cocos creator</h3><ul>\n<li>文档<ol>\n<li>较完善</li>\n<li>有简单的实例教程</li>\n<li>cocos js的文档老旧，与当前版本不符</li>\n<li>结论：3星</li>\n</ol>\n</li>\n<li>原型构建(开发速度)<ol>\n<li>很大一部分是UI操作</li>\n<li>快</li>\n<li>结论：5星</li>\n</ol>\n</li>\n<li>debug<ol>\n<li>报错信息完整</li>\n<li>但要看懂报错信息的话，必须对cocosjs有一定了解</li>\n<li>结论：1星</li>\n</ol>\n</li>\n<li>与现有开发流程、构建流程、业务体系结合<ol>\n<li>当前团队模块化方案为commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用</li>\n<li>cocos creator构建封闭程度较高，与现有业务结合有一定的配置工作</li>\n<li>结论：1星</li>\n</ol>\n</li>\n<li>后续运营维护(迭代、事件上报、日志上报)<ol>\n<li>当前的事件上报、日志上报皆有commonjs规范的组件，不能和creator无缝结合</li>\n<li>creator的开发为另一套流程体系，和现有体系需重新磨合，迭代有一定的磨合工作</li>\n<li>结论：1星</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Egret-Engine-2D-1\"><a href=\"#Egret-Engine-2D-1\" class=\"headerlink\" title=\"Egret Engine 2D\"></a>Egret Engine 2D</h3><ul>\n<li>文档<ol>\n<li>较完善</li>\n<li>没有简单的实例教程，上手相对麻烦</li>\n<li>结论：2星</li>\n</ol>\n</li>\n<li>原型构建(开发速度)<ol>\n<li>和当前前端开发形式一致</li>\n<li>结论：3星</li>\n</ol>\n</li>\n<li>debug<ol>\n<li>报错信息完整</li>\n<li>结论：3星</li>\n</ol>\n</li>\n<li>与现有开发流程、构建流程、业务体系结合<ol>\n<li>当前团队模块化方案为commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用</li>\n<li>Egret Engine 2D构建封闭程度较高，与现有业务结合有一定的配置工作</li>\n<li>结论：1星</li>\n</ol>\n</li>\n<li>后续运营维护(迭代、事件上报、日志上报)<ol>\n<li>当前的事件上报、日志上报皆有commonjs规范的组件，不能和Egret Engine 2D无缝结合</li>\n<li>Egret Engine 2D的开发为另一套流程体系，和现有体系需重新磨合，迭代有一定的磨合工作</li>\n<li>Egret Engine 2D基于typescript，利于迭代维护</li>\n<li>结论：2星</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"hilo-2\"><a href=\"#hilo-2\" class=\"headerlink\" title=\"hilo\"></a>hilo</h3><ul>\n<li>文档<ol>\n<li>较完善</li>\n<li>有简单的实例教程</li>\n<li>结论：5星</li>\n</ol>\n</li>\n<li>原型构建(开发速度)<ol>\n<li>和当前前端开发形式一致</li>\n<li>结论：3星</li>\n</ol>\n</li>\n<li>debug<ol>\n<li>报错信息完整</li>\n<li>结论：3星</li>\n</ol>\n</li>\n<li>与现有开发流程、构建流程、业务体系结合<ol>\n<li>当前团队模块化方案为commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用</li>\n<li>hilo可使用commonjs模块方案加载，可用gulp + webpack构建，与后端结合也十分方便</li>\n<li>hilo是针对运营活动类小游戏而产生的解决方案，和我们当前背景一致</li>\n<li>结论：5星</li>\n</ol>\n</li>\n<li>后续运营维护(迭代、事件上报、日志上报)<ol>\n<li>当前的事件上报、日志上报皆有commonjs规范的组件，可以和hilo无缝结合</li>\n<li>hilo可无缝融入当前开发体系</li>\n<li>结论：5星</li>\n</ol>\n</li>\n</ul>"},{"title":"命令模式的构建与使用","date":"2018-09-03T12:06:58.000Z","_content":"\n设计模式的精髓，就是解耦；而命令模式的所作的事情，就是对请求的发出者和请求的接收者进行解耦。\n<escape><!-- more --></escape>\n\n## 命令模式使用场景\n\n有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么，此时希望用一种松耦合的方式来设计软件，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。\n\n## 一个命令模式的简单例子\n\n首先是几个按钮的绘制：\n```javascript\n<body>\n<button id=\"button1\">点击按钮 1</button>\n<button id=\"button2\">点击按钮 2</button>\n<button id=\"button3\">点击按钮 3</button>\n</body>\n\n<script>\nvar button1 = document.getElementById( 'button1' ), \nvar button2 = document.getElementById( 'button2' ), \nvar button3 = document.getElementById( 'button3' );\n</script>\n```\n\n然后定义一个setCommand函数，setCommand函数负责往按钮上面安装命令：\n\n```javascript\nvar setCommand = function(button, command){\n    button.onclick = function(){\n        command.execute();\n    };\n};\n```\n\n定义两个功能对象：\n\n```javascript\nvar MenuBar = {\n    refresh: function () {\n        console.log('refresh menu');\n    }\n};\nvar SubMenu = {\n    add: function () {\n        console.log('add menu');\n    },\n    del: function () {\n        console.log('del menu');\n    }\n};\n```\n\n定义几个命令对象：\n\n```javascript\nfunction RefreshCommand(receiver){\n    this.receiver = receiver;\n}\nRefreshCommand.prototype.execute = function(){\n    this.receiver.refresh();\n};\n\nfunction AddCommand(receiver){\n    this.receiver = receiver;\n}\nRefreshCommand.prototype.execute = function(){\n    this.receiver.add();\n};\n\nfunction DelCommand(receiver){\n    this.receiver = receiver;\n}\nRefreshCommand.prototype.execute = function(){\n    this.receiver.del();\n};\n```\n\n最后，通过命令对象，把命令接收者（功能对象）和命令请求者（按钮）联系起来：\n\n```javascript\nvar refreshMenuBarCommand = new RefreshMenuBarCommand( MenuBar ); \nvar addSubMenuCommand = new AddSubMenuCommand( SubMenu );\nvar delSubMenuCommand = new DelSubMenuCommand( SubMenu );\nsetCommand( button1, refreshMenuBarCommand ); \nsetCommand( button2, addSubMenuCommand ); \nsetCommand( button3, delSubMenuCommand );\n```\n\n## javascript中的命令模式\n\n```javascript\nvar bindClick = function (button, func) {\n    button.onclick = func;\n};\n\nvar MenuBar = {\n    refresh: function () {\n        console.log('refresh menu');\n    }\n};\nvar SubMenu = {\n    add: function () {\n        console.log('add menu');\n    },\n    del: function () {\n        console.log('del menu');\n    }\n};\nbindClick(button1, MenuBar.refresh);\nbindClick(button2, SubMenu.add);\nbindClick(button3, SubMenu.del);\n```\n\n可以看到，上面这段代码中，并没有command和receiver两个概念。\n\n原因就是，相对于简单例子中的传统命令模式实现，javascript版命令模式实现利用了高阶函数特性(函数可作为参数被传递，函数可作为返回值被输出)。\n\n## 撤销命令\n\n首先是一种最简单的撤销：针对上一步的操作，再做一次'反向操作'。下面是一些简单例子的罗列：\n\n1. 移动了一个dom元素，则作undo操作时，就把dom元素移回原来的位置（做移动操作时，需要记录下移动前的位置）\n1. 输入了一段文本，则作undo操作时，就把输入的文本删去（做输入操作时，需要记录下当前输入的文本）\n\n下面是一个例子：\n\n```html\n<body>\n    <div id=\"ball\" style=\"position:absolute;background:#000;width:50px;height:50px\"></div> \n    输入小球移动后的位置:<input id=\"pos\"/>\n    <button id=\"moveBtn\">开始移动</button>\n    <button id=\"cancelBtn\">cancel</cancel> <!--增加取消按钮-->\n</body>\n```\n\n```javascript\nvar ball = document.getElementById('ball');\nvar pos = document.getElementById('pos');\nvar moveBtn = document.getElementById('moveBtn');\nvar MoveCommand = function (receiver, pos) {\nthis.receiver = receiver;\n    this.pos = pos;\n};\nMoveCommand.prototype.execute = function () {\n    this.receiver.start('left', this.pos, 1000, 'strongEaseOut');\n};\nvar moveCommand;\nmoveBtn.onclick = function () {\n    var animate = new Animate(ball);\n    moveCommand = new MoveCommand(animate, pos.value); \n    moveCommand.execute();\n};\n```\n\n添加一个undo按钮：\n\n```html\n<button id=\"cancelBtn\">cancel</cancel> <!--增加取消按钮-->\n```\n\n添加undo操作：\n\n```javascript\nMoveCommand.prototype.undo = function(){\n    this.receiver.start( 'left', this.oldPos, 1000, 'strongEaseOut' ); // 回到小球移动前记录的位置\n};\n```\n\n移动操作(execute方法)也需要改写：\n\n```javascript\nMoveCommand.prototype.execute = function () {\n    this.receiver.start('left', this.pos, 1000, 'strongEaseOut');\n    this.oldPos = this.receiver.dom.getBoundingClientRect()[this.receiver.propertyName]; 11 // 记录小球开始移动前的位置\n};\n```\n\n关联undo按钮和undo操作：\n\n```javascript\nvar cancelBtn = document.getElementById( 'cancelBtn' );\ncancelBtn.onclick = function(){ \n    moveCommand.undo();\n};\n```\n\n## 撤销和重做\n\n针对撤销功能的实现，上面的是对上一步操作做反向操作，但其实我们也可以换一种思路：把整个环境初始化，然后把做过的操作重新执行一遍，执行到准备撤销的前一步操作为止。\n\n下面是一个利用重做功能去完成撤销功能的例子：\n\n```html\n<html>\n\n<body>\n    <button id=\"replay\">播放录像</button>\n    <button id=\"undo\">撤销上一步</button>\n</body>\n<script>\n    var Ryu = {\n        attack: function () {\n            console.log('攻击');\n        },\n        defense: function () {\n            console.log('防御');\n        },\n        jump: function () {\n            console.log('跳跃');\n        },\n        crouch: function () {\n            console.log('蹲下');\n        }\n    };\n\n    var makeCommand = function (receiver, state) {  // 创建命令\n        if (!state) {\n            return false;\n        }\n        return function () {\n            receiver[state]();\n        }\n    };\n\n    var commands = {\n        \"119\": \"jump\",//w\n        \"115\": \"crouch\",//s\n        \"97\": \"defense\",//a\n        \"100\": \"attack\"//d\n    };\n\n    var commandStack = [];  // 保存命令的堆栈\n\n    document.onkeypress = function (ev) {\n        var keyCode = ev.keyCode;\n        var command = makeCommand(Ryu, commands[keyCode]);\n        if (command) {\n            command();\n            commandStack.push(command);\n        }\n    }\n\n    document.getElementById('replay').onclick = function () { // 点击播放录像\n        var command;\n        while (command = commandStack.shift()) {\n            command();\n        }\n    };\n\n    document.getElementById('undo').onclick = function () {\n        var command;\n        commandStack.pop();//删掉最后一步\n        while (command = commandStack.shift()) {\n            command();\n        }\n    };\n</script>\n\n</html>\n```","source":"_posts/command-pattern.md","raw":"---\ntitle: 命令模式的构建与使用\ndate: 2018-09-03 20:06:58\ntags: [设计模式]\n---\n\n设计模式的精髓，就是解耦；而命令模式的所作的事情，就是对请求的发出者和请求的接收者进行解耦。\n<escape><!-- more --></escape>\n\n## 命令模式使用场景\n\n有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么，此时希望用一种松耦合的方式来设计软件，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。\n\n## 一个命令模式的简单例子\n\n首先是几个按钮的绘制：\n```javascript\n<body>\n<button id=\"button1\">点击按钮 1</button>\n<button id=\"button2\">点击按钮 2</button>\n<button id=\"button3\">点击按钮 3</button>\n</body>\n\n<script>\nvar button1 = document.getElementById( 'button1' ), \nvar button2 = document.getElementById( 'button2' ), \nvar button3 = document.getElementById( 'button3' );\n</script>\n```\n\n然后定义一个setCommand函数，setCommand函数负责往按钮上面安装命令：\n\n```javascript\nvar setCommand = function(button, command){\n    button.onclick = function(){\n        command.execute();\n    };\n};\n```\n\n定义两个功能对象：\n\n```javascript\nvar MenuBar = {\n    refresh: function () {\n        console.log('refresh menu');\n    }\n};\nvar SubMenu = {\n    add: function () {\n        console.log('add menu');\n    },\n    del: function () {\n        console.log('del menu');\n    }\n};\n```\n\n定义几个命令对象：\n\n```javascript\nfunction RefreshCommand(receiver){\n    this.receiver = receiver;\n}\nRefreshCommand.prototype.execute = function(){\n    this.receiver.refresh();\n};\n\nfunction AddCommand(receiver){\n    this.receiver = receiver;\n}\nRefreshCommand.prototype.execute = function(){\n    this.receiver.add();\n};\n\nfunction DelCommand(receiver){\n    this.receiver = receiver;\n}\nRefreshCommand.prototype.execute = function(){\n    this.receiver.del();\n};\n```\n\n最后，通过命令对象，把命令接收者（功能对象）和命令请求者（按钮）联系起来：\n\n```javascript\nvar refreshMenuBarCommand = new RefreshMenuBarCommand( MenuBar ); \nvar addSubMenuCommand = new AddSubMenuCommand( SubMenu );\nvar delSubMenuCommand = new DelSubMenuCommand( SubMenu );\nsetCommand( button1, refreshMenuBarCommand ); \nsetCommand( button2, addSubMenuCommand ); \nsetCommand( button3, delSubMenuCommand );\n```\n\n## javascript中的命令模式\n\n```javascript\nvar bindClick = function (button, func) {\n    button.onclick = func;\n};\n\nvar MenuBar = {\n    refresh: function () {\n        console.log('refresh menu');\n    }\n};\nvar SubMenu = {\n    add: function () {\n        console.log('add menu');\n    },\n    del: function () {\n        console.log('del menu');\n    }\n};\nbindClick(button1, MenuBar.refresh);\nbindClick(button2, SubMenu.add);\nbindClick(button3, SubMenu.del);\n```\n\n可以看到，上面这段代码中，并没有command和receiver两个概念。\n\n原因就是，相对于简单例子中的传统命令模式实现，javascript版命令模式实现利用了高阶函数特性(函数可作为参数被传递，函数可作为返回值被输出)。\n\n## 撤销命令\n\n首先是一种最简单的撤销：针对上一步的操作，再做一次'反向操作'。下面是一些简单例子的罗列：\n\n1. 移动了一个dom元素，则作undo操作时，就把dom元素移回原来的位置（做移动操作时，需要记录下移动前的位置）\n1. 输入了一段文本，则作undo操作时，就把输入的文本删去（做输入操作时，需要记录下当前输入的文本）\n\n下面是一个例子：\n\n```html\n<body>\n    <div id=\"ball\" style=\"position:absolute;background:#000;width:50px;height:50px\"></div> \n    输入小球移动后的位置:<input id=\"pos\"/>\n    <button id=\"moveBtn\">开始移动</button>\n    <button id=\"cancelBtn\">cancel</cancel> <!--增加取消按钮-->\n</body>\n```\n\n```javascript\nvar ball = document.getElementById('ball');\nvar pos = document.getElementById('pos');\nvar moveBtn = document.getElementById('moveBtn');\nvar MoveCommand = function (receiver, pos) {\nthis.receiver = receiver;\n    this.pos = pos;\n};\nMoveCommand.prototype.execute = function () {\n    this.receiver.start('left', this.pos, 1000, 'strongEaseOut');\n};\nvar moveCommand;\nmoveBtn.onclick = function () {\n    var animate = new Animate(ball);\n    moveCommand = new MoveCommand(animate, pos.value); \n    moveCommand.execute();\n};\n```\n\n添加一个undo按钮：\n\n```html\n<button id=\"cancelBtn\">cancel</cancel> <!--增加取消按钮-->\n```\n\n添加undo操作：\n\n```javascript\nMoveCommand.prototype.undo = function(){\n    this.receiver.start( 'left', this.oldPos, 1000, 'strongEaseOut' ); // 回到小球移动前记录的位置\n};\n```\n\n移动操作(execute方法)也需要改写：\n\n```javascript\nMoveCommand.prototype.execute = function () {\n    this.receiver.start('left', this.pos, 1000, 'strongEaseOut');\n    this.oldPos = this.receiver.dom.getBoundingClientRect()[this.receiver.propertyName]; 11 // 记录小球开始移动前的位置\n};\n```\n\n关联undo按钮和undo操作：\n\n```javascript\nvar cancelBtn = document.getElementById( 'cancelBtn' );\ncancelBtn.onclick = function(){ \n    moveCommand.undo();\n};\n```\n\n## 撤销和重做\n\n针对撤销功能的实现，上面的是对上一步操作做反向操作，但其实我们也可以换一种思路：把整个环境初始化，然后把做过的操作重新执行一遍，执行到准备撤销的前一步操作为止。\n\n下面是一个利用重做功能去完成撤销功能的例子：\n\n```html\n<html>\n\n<body>\n    <button id=\"replay\">播放录像</button>\n    <button id=\"undo\">撤销上一步</button>\n</body>\n<script>\n    var Ryu = {\n        attack: function () {\n            console.log('攻击');\n        },\n        defense: function () {\n            console.log('防御');\n        },\n        jump: function () {\n            console.log('跳跃');\n        },\n        crouch: function () {\n            console.log('蹲下');\n        }\n    };\n\n    var makeCommand = function (receiver, state) {  // 创建命令\n        if (!state) {\n            return false;\n        }\n        return function () {\n            receiver[state]();\n        }\n    };\n\n    var commands = {\n        \"119\": \"jump\",//w\n        \"115\": \"crouch\",//s\n        \"97\": \"defense\",//a\n        \"100\": \"attack\"//d\n    };\n\n    var commandStack = [];  // 保存命令的堆栈\n\n    document.onkeypress = function (ev) {\n        var keyCode = ev.keyCode;\n        var command = makeCommand(Ryu, commands[keyCode]);\n        if (command) {\n            command();\n            commandStack.push(command);\n        }\n    }\n\n    document.getElementById('replay').onclick = function () { // 点击播放录像\n        var command;\n        while (command = commandStack.shift()) {\n            command();\n        }\n    };\n\n    document.getElementById('undo').onclick = function () {\n        var command;\n        commandStack.pop();//删掉最后一步\n        while (command = commandStack.shift()) {\n            command();\n        }\n    };\n</script>\n\n</html>\n```","slug":"command-pattern","published":1,"updated":"2019-08-29T01:32:47.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4um0002uaid5jf2c7mm","content":"<p>设计模式的精髓，就是解耦；而命令模式的所作的事情，就是对请求的发出者和请求的接收者进行解耦。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"命令模式使用场景\"><a href=\"#命令模式使用场景\" class=\"headerlink\" title=\"命令模式使用场景\"></a>命令模式使用场景</h2><p>有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么，此时希望用一种松耦合的方式来设计软件，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。</p>\n<h2 id=\"一个命令模式的简单例子\"><a href=\"#一个命令模式的简单例子\" class=\"headerlink\" title=\"一个命令模式的简单例子\"></a>一个命令模式的简单例子</h2><p>首先是几个按钮的绘制：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;button id=<span class=\"string\">\"button1\"</span>&gt;点击按钮 <span class=\"number\">1</span>&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button id=\"button2\"&gt;点击按钮 2&lt;/</span>button&gt;</span><br><span class=\"line\">&lt;button id=<span class=\"string\">\"button3\"</span>&gt;点击按钮 <span class=\"number\">3</span>&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> button1 = <span class=\"built_in\">document</span>.getElementById( <span class=\"string\">'button1'</span> ), </span><br><span class=\"line\"><span class=\"keyword\">var</span> button2 = <span class=\"built_in\">document</span>.getElementById( <span class=\"string\">'button2'</span> ), </span><br><span class=\"line\"><span class=\"keyword\">var</span> button3 = <span class=\"built_in\">document</span>.getElementById( <span class=\"string\">'button3'</span> );</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后定义一个setCommand函数，setCommand函数负责往按钮上面安装命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> setCommand = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">button, command</span>)</span>&#123;</span><br><span class=\"line\">    button.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        command.execute();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>定义两个功能对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MenuBar = &#123;</span><br><span class=\"line\">    refresh: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'refresh menu'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> SubMenu = &#123;</span><br><span class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'add menu'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    del: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'del menu'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>定义几个命令对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RefreshCommand</span>(<span class=\"params\">receiver</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver = receiver;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">RefreshCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver.refresh();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AddCommand</span>(<span class=\"params\">receiver</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver = receiver;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">RefreshCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver.add();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DelCommand</span>(<span class=\"params\">receiver</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver = receiver;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">RefreshCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver.del();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>最后，通过命令对象，把命令接收者（功能对象）和命令请求者（按钮）联系起来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> refreshMenuBarCommand = <span class=\"keyword\">new</span> RefreshMenuBarCommand( MenuBar ); </span><br><span class=\"line\"><span class=\"keyword\">var</span> addSubMenuCommand = <span class=\"keyword\">new</span> AddSubMenuCommand( SubMenu );</span><br><span class=\"line\"><span class=\"keyword\">var</span> delSubMenuCommand = <span class=\"keyword\">new</span> DelSubMenuCommand( SubMenu );</span><br><span class=\"line\">setCommand( button1, refreshMenuBarCommand ); </span><br><span class=\"line\">setCommand( button2, addSubMenuCommand ); </span><br><span class=\"line\">setCommand( button3, delSubMenuCommand );</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"javascript中的命令模式\"><a href=\"#javascript中的命令模式\" class=\"headerlink\" title=\"javascript中的命令模式\"></a>javascript中的命令模式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bindClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">button, func</span>) </span>&#123;</span><br><span class=\"line\">    button.onclick = func;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> MenuBar = &#123;</span><br><span class=\"line\">    refresh: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'refresh menu'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> SubMenu = &#123;</span><br><span class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'add menu'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    del: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'del menu'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bindClick(button1, MenuBar.refresh);</span><br><span class=\"line\">bindClick(button2, SubMenu.add);</span><br><span class=\"line\">bindClick(button3, SubMenu.del);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，上面这段代码中，并没有command和receiver两个概念。</p>\n<p>原因就是，相对于简单例子中的传统命令模式实现，javascript版命令模式实现利用了高阶函数特性(函数可作为参数被传递，函数可作为返回值被输出)。</p>\n<h2 id=\"撤销命令\"><a href=\"#撤销命令\" class=\"headerlink\" title=\"撤销命令\"></a>撤销命令</h2><p>首先是一种最简单的撤销：针对上一步的操作，再做一次’反向操作’。下面是一些简单例子的罗列：</p>\n<ol>\n<li>移动了一个dom元素，则作undo操作时，就把dom元素移回原来的位置（做移动操作时，需要记录下移动前的位置）</li>\n<li>输入了一段文本，则作undo操作时，就把输入的文本删去（做输入操作时，需要记录下当前输入的文本）</li>\n</ol>\n<p>下面是一个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ball\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:absolute;background:#000;width:50px;height:50px\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">    输入小球移动后的位置:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pos\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"moveBtn\"</span>&gt;</span>开始移动<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cancelBtn\"</span>&gt;</span>cancel<span class=\"tag\">&lt;/<span class=\"name\">cancel</span>&gt;</span> <span class=\"comment\">&lt;!--增加取消按钮--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ball = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'ball'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> pos = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'pos'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> moveBtn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'moveBtn'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> MoveCommand = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">receiver, pos</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.receiver = receiver;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = pos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MoveCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver.start(<span class=\"string\">'left'</span>, <span class=\"keyword\">this</span>.pos, <span class=\"number\">1000</span>, <span class=\"string\">'strongEaseOut'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> moveCommand;</span><br><span class=\"line\">moveBtn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> animate = <span class=\"keyword\">new</span> Animate(ball);</span><br><span class=\"line\">    moveCommand = <span class=\"keyword\">new</span> MoveCommand(animate, pos.value); </span><br><span class=\"line\">    moveCommand.execute();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>添加一个undo按钮：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cancelBtn\"</span>&gt;</span>cancel<span class=\"tag\">&lt;/<span class=\"name\">cancel</span>&gt;</span> <span class=\"comment\">&lt;!--增加取消按钮--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>添加undo操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MoveCommand.prototype.undo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver.start( <span class=\"string\">'left'</span>, <span class=\"keyword\">this</span>.oldPos, <span class=\"number\">1000</span>, <span class=\"string\">'strongEaseOut'</span> ); <span class=\"comment\">// 回到小球移动前记录的位置</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>移动操作(execute方法)也需要改写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MoveCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver.start(<span class=\"string\">'left'</span>, <span class=\"keyword\">this</span>.pos, <span class=\"number\">1000</span>, <span class=\"string\">'strongEaseOut'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.oldPos = <span class=\"keyword\">this</span>.receiver.dom.getBoundingClientRect()[<span class=\"keyword\">this</span>.receiver.propertyName]; <span class=\"number\">11</span> <span class=\"comment\">// 记录小球开始移动前的位置</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>关联undo按钮和undo操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cancelBtn = <span class=\"built_in\">document</span>.getElementById( <span class=\"string\">'cancelBtn'</span> );</span><br><span class=\"line\">cancelBtn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    moveCommand.undo();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销和重做\"><a href=\"#撤销和重做\" class=\"headerlink\" title=\"撤销和重做\"></a>撤销和重做</h2><p>针对撤销功能的实现，上面的是对上一步操作做反向操作，但其实我们也可以换一种思路：把整个环境初始化，然后把做过的操作重新执行一遍，执行到准备撤销的前一步操作为止。</p>\n<p>下面是一个利用重做功能去完成撤销功能的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"replay\"</span>&gt;</span>播放录像<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"undo\"</span>&gt;</span>撤销上一步<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> Ryu = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        attack: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'攻击'</span>);</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"><span class=\"javascript\">        defense: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'防御'</span>);</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"><span class=\"javascript\">        jump: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'跳跃'</span>);</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"><span class=\"javascript\">        crouch: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'蹲下'</span>);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> makeCommand = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">receiver, state</span>) </span>&#123;  <span class=\"comment\">// 创建命令</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (!state) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">            receiver[state]();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> commands = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"119\"</span>: <span class=\"string\">\"jump\"</span>,<span class=\"comment\">//w</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"115\"</span>: <span class=\"string\">\"crouch\"</span>,<span class=\"comment\">//s</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"97\"</span>: <span class=\"string\">\"defense\"</span>,<span class=\"comment\">//a</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"100\"</span>: <span class=\"string\">\"attack\"</span><span class=\"comment\">//d</span></span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> commandStack = [];  <span class=\"comment\">// 保存命令的堆栈</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.onkeypress = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> keyCode = ev.keyCode;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> command = makeCommand(Ryu, commands[keyCode]);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (command) &#123;</span></span><br><span class=\"line\">            command();</span><br><span class=\"line\">            commandStack.push(command);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'replay'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 点击播放录像</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> command;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">while</span> (command = commandStack.shift()) &#123;</span></span><br><span class=\"line\">            command();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'undo'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> command;</span></span><br><span class=\"line\"><span class=\"javascript\">        commandStack.pop();<span class=\"comment\">//删掉最后一步</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">while</span> (command = commandStack.shift()) &#123;</span></span><br><span class=\"line\">            command();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":5917,"excerpt":"<p>设计模式的精髓，就是解耦；而命令模式的所作的事情，就是对请求的发出者和请求的接收者进行解耦。</p>","more":"<h2 id=\"命令模式使用场景\"><a href=\"#命令模式使用场景\" class=\"headerlink\" title=\"命令模式使用场景\"></a>命令模式使用场景</h2><p>有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么，此时希望用一种松耦合的方式来设计软件，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。</p>\n<h2 id=\"一个命令模式的简单例子\"><a href=\"#一个命令模式的简单例子\" class=\"headerlink\" title=\"一个命令模式的简单例子\"></a>一个命令模式的简单例子</h2><p>首先是几个按钮的绘制：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;button id=<span class=\"string\">\"button1\"</span>&gt;点击按钮 <span class=\"number\">1</span>&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button id=\"button2\"&gt;点击按钮 2&lt;/</span>button&gt;</span><br><span class=\"line\">&lt;button id=<span class=\"string\">\"button3\"</span>&gt;点击按钮 <span class=\"number\">3</span>&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> button1 = <span class=\"built_in\">document</span>.getElementById( <span class=\"string\">'button1'</span> ), </span><br><span class=\"line\"><span class=\"keyword\">var</span> button2 = <span class=\"built_in\">document</span>.getElementById( <span class=\"string\">'button2'</span> ), </span><br><span class=\"line\"><span class=\"keyword\">var</span> button3 = <span class=\"built_in\">document</span>.getElementById( <span class=\"string\">'button3'</span> );</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后定义一个setCommand函数，setCommand函数负责往按钮上面安装命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> setCommand = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">button, command</span>)</span>&#123;</span><br><span class=\"line\">    button.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        command.execute();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>定义两个功能对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MenuBar = &#123;</span><br><span class=\"line\">    refresh: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'refresh menu'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> SubMenu = &#123;</span><br><span class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'add menu'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    del: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'del menu'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>定义几个命令对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RefreshCommand</span>(<span class=\"params\">receiver</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver = receiver;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">RefreshCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver.refresh();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AddCommand</span>(<span class=\"params\">receiver</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver = receiver;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">RefreshCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver.add();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DelCommand</span>(<span class=\"params\">receiver</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver = receiver;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">RefreshCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver.del();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>最后，通过命令对象，把命令接收者（功能对象）和命令请求者（按钮）联系起来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> refreshMenuBarCommand = <span class=\"keyword\">new</span> RefreshMenuBarCommand( MenuBar ); </span><br><span class=\"line\"><span class=\"keyword\">var</span> addSubMenuCommand = <span class=\"keyword\">new</span> AddSubMenuCommand( SubMenu );</span><br><span class=\"line\"><span class=\"keyword\">var</span> delSubMenuCommand = <span class=\"keyword\">new</span> DelSubMenuCommand( SubMenu );</span><br><span class=\"line\">setCommand( button1, refreshMenuBarCommand ); </span><br><span class=\"line\">setCommand( button2, addSubMenuCommand ); </span><br><span class=\"line\">setCommand( button3, delSubMenuCommand );</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"javascript中的命令模式\"><a href=\"#javascript中的命令模式\" class=\"headerlink\" title=\"javascript中的命令模式\"></a>javascript中的命令模式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bindClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">button, func</span>) </span>&#123;</span><br><span class=\"line\">    button.onclick = func;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> MenuBar = &#123;</span><br><span class=\"line\">    refresh: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'refresh menu'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> SubMenu = &#123;</span><br><span class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'add menu'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    del: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'del menu'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bindClick(button1, MenuBar.refresh);</span><br><span class=\"line\">bindClick(button2, SubMenu.add);</span><br><span class=\"line\">bindClick(button3, SubMenu.del);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，上面这段代码中，并没有command和receiver两个概念。</p>\n<p>原因就是，相对于简单例子中的传统命令模式实现，javascript版命令模式实现利用了高阶函数特性(函数可作为参数被传递，函数可作为返回值被输出)。</p>\n<h2 id=\"撤销命令\"><a href=\"#撤销命令\" class=\"headerlink\" title=\"撤销命令\"></a>撤销命令</h2><p>首先是一种最简单的撤销：针对上一步的操作，再做一次’反向操作’。下面是一些简单例子的罗列：</p>\n<ol>\n<li>移动了一个dom元素，则作undo操作时，就把dom元素移回原来的位置（做移动操作时，需要记录下移动前的位置）</li>\n<li>输入了一段文本，则作undo操作时，就把输入的文本删去（做输入操作时，需要记录下当前输入的文本）</li>\n</ol>\n<p>下面是一个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ball\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:absolute;background:#000;width:50px;height:50px\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">    输入小球移动后的位置:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pos\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"moveBtn\"</span>&gt;</span>开始移动<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cancelBtn\"</span>&gt;</span>cancel<span class=\"tag\">&lt;/<span class=\"name\">cancel</span>&gt;</span> <span class=\"comment\">&lt;!--增加取消按钮--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ball = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'ball'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> pos = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'pos'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> moveBtn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'moveBtn'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> MoveCommand = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">receiver, pos</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.receiver = receiver;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = pos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MoveCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver.start(<span class=\"string\">'left'</span>, <span class=\"keyword\">this</span>.pos, <span class=\"number\">1000</span>, <span class=\"string\">'strongEaseOut'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> moveCommand;</span><br><span class=\"line\">moveBtn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> animate = <span class=\"keyword\">new</span> Animate(ball);</span><br><span class=\"line\">    moveCommand = <span class=\"keyword\">new</span> MoveCommand(animate, pos.value); </span><br><span class=\"line\">    moveCommand.execute();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>添加一个undo按钮：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cancelBtn\"</span>&gt;</span>cancel<span class=\"tag\">&lt;/<span class=\"name\">cancel</span>&gt;</span> <span class=\"comment\">&lt;!--增加取消按钮--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>添加undo操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MoveCommand.prototype.undo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver.start( <span class=\"string\">'left'</span>, <span class=\"keyword\">this</span>.oldPos, <span class=\"number\">1000</span>, <span class=\"string\">'strongEaseOut'</span> ); <span class=\"comment\">// 回到小球移动前记录的位置</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>移动操作(execute方法)也需要改写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MoveCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.receiver.start(<span class=\"string\">'left'</span>, <span class=\"keyword\">this</span>.pos, <span class=\"number\">1000</span>, <span class=\"string\">'strongEaseOut'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.oldPos = <span class=\"keyword\">this</span>.receiver.dom.getBoundingClientRect()[<span class=\"keyword\">this</span>.receiver.propertyName]; <span class=\"number\">11</span> <span class=\"comment\">// 记录小球开始移动前的位置</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>关联undo按钮和undo操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cancelBtn = <span class=\"built_in\">document</span>.getElementById( <span class=\"string\">'cancelBtn'</span> );</span><br><span class=\"line\">cancelBtn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    moveCommand.undo();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销和重做\"><a href=\"#撤销和重做\" class=\"headerlink\" title=\"撤销和重做\"></a>撤销和重做</h2><p>针对撤销功能的实现，上面的是对上一步操作做反向操作，但其实我们也可以换一种思路：把整个环境初始化，然后把做过的操作重新执行一遍，执行到准备撤销的前一步操作为止。</p>\n<p>下面是一个利用重做功能去完成撤销功能的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"replay\"</span>&gt;</span>播放录像<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"undo\"</span>&gt;</span>撤销上一步<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> Ryu = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        attack: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'攻击'</span>);</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"><span class=\"javascript\">        defense: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'防御'</span>);</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"><span class=\"javascript\">        jump: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'跳跃'</span>);</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"><span class=\"javascript\">        crouch: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'蹲下'</span>);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> makeCommand = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">receiver, state</span>) </span>&#123;  <span class=\"comment\">// 创建命令</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (!state) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">            receiver[state]();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> commands = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"119\"</span>: <span class=\"string\">\"jump\"</span>,<span class=\"comment\">//w</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"115\"</span>: <span class=\"string\">\"crouch\"</span>,<span class=\"comment\">//s</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"97\"</span>: <span class=\"string\">\"defense\"</span>,<span class=\"comment\">//a</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"100\"</span>: <span class=\"string\">\"attack\"</span><span class=\"comment\">//d</span></span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> commandStack = [];  <span class=\"comment\">// 保存命令的堆栈</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.onkeypress = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> keyCode = ev.keyCode;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> command = makeCommand(Ryu, commands[keyCode]);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (command) &#123;</span></span><br><span class=\"line\">            command();</span><br><span class=\"line\">            commandStack.push(command);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'replay'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 点击播放录像</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> command;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">while</span> (command = commandStack.shift()) &#123;</span></span><br><span class=\"line\">            command();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'undo'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> command;</span></span><br><span class=\"line\"><span class=\"javascript\">        commandStack.pop();<span class=\"comment\">//删掉最后一步</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">while</span> (command = commandStack.shift()) &#123;</span></span><br><span class=\"line\">            command();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"活动页可配置化的一点探索 -- 组合模式的构建与使用","date":"2018-09-03T12:07:58.000Z","_content":"\n就2018年而言，小组的工作重点，在于承接公司因「用户增长」战略而产生的大量需求。\n\n经过这半年的满负荷和之前几年的半负荷「活动页」项目运载，不论是产品侧还是开发侧，都可以明显察觉到 -- 大部分的活动推广页，其实都有着相似的流程、逻辑，当中有很多明显可复用的模块在等待被抽象提取。\n\n<escape><!-- more --></escape>\n\n对于这些可复用的模块，目前可抽取出这么一些：\n\n1. 分享模块\n    1. 分享活动页本身\n    1. 分享出特殊分享页（被分享人和分享人可通过此分享页建立关系）\n1. 上报模块\n    1. 产品侧使用\n        1. 用户事件上报：主要是点击事件上报，上报至BI组负责维护的罗盘系统\n        1. 页面pvuv上报：同样上报至罗盘系统\n        1. 香港地区活动的google sem上报\n    1. 开发侧使用\n        1. 错误事件上报：上报至monitor系统进行打点累计、监控，超过告警值则发出警告短信\n        1. 普通事件上报：同样上报至monitor系统进行打点累计、监控，开发人员对页面各种事件触发量有个整体了解\n        1. 错误日志上报：错误事件发生时，会有错误日志同时上报至uls系统，开发人员可进行事件回溯\n        1. 普通日志上报：同样是用于帮助开发人员进行事件回溯\n1. 送奖励型业务模块，包括\n    1. 注册送奖励、开户送奖励（大部分的开户送奖励都隐藏在「注册送奖励」后，但用户注册后会被告知「实际奖励得开户后才能领到」）\n    1. 入金送奖励\n    1. 邀请他人注册、开户送奖励（邀请人得到奖励，被邀请人也得到奖励；这里的核心在于邀请人和被邀请人间会建立起一个关系）\n    1. 新特性推广期，使用人获得奖励\n\n## 需求分析\n\n根据上面罗列的模块，模块间有一定的层级关系，但同一层级下的不同模块基本互不干涉。而活动推广页的构建，也基本是上述模块的堆砌。\n\n所以，如果要完成「活动页可配置化」这个需求，基本要做到下面几点：\n\n1. 可复用模块抽象提取\n1. 同一层级模块互不依赖，可独立运行\n1. 模块可被统一组织、驱动\n\n按照上述分析，可使用组合模式来满足上述需求\n\n## 组合模式介绍\n\n一句话描述：组合模式就是构建一个树，然后对里面的节点进行深度优先的遍历。\n\n![](/images/composite-pattern/2018-09-02-am-11.50.24.png)\n\n## 组合模式使用\n\n下面是一个简单地例子：\n\n```html\n<html> \n<body>\n<button id=\"button\">按我</button>\n</body>\n<script>\n\nvar MacroCommand = function () {\n    return {\n        commandsList: [],\n        add: function (command) {\n            this.commandsList.push(command);\n        },\n        execute: function () {\n            for (var i = 0, command; command = this.commandsList[i++];) {\n                command.execute();\n            }\n        }\n    }\n};\nvar openAcCommand = {\n    execute: function () {\n        console.log('打开空调');\n    }\n};\n\n/**********家里的电视和音响是连接在一起的，所以可以用一个宏命令来组合打开电视和打开音响的命令 *********/\n\nvar openTvCommand = {\n    execute: function () {\n        console.log('打开电视');\n    }\n};\nvar openSoundCommand = {\n    execute: function () {\n        console.log('打开音响');\n    }\n};\nvar macroCommand1 = MacroCommand();\nmacroCommand1.add(openTvCommand);\nmacroCommand1.add(openSoundCommand);\n\n/*********关门、打开电脑和打登录 QQ 的命令****************/\n\nvar closeDoorCommand = {\n    execute: function () {\n        console.log('关门');\n    }\n};\n\nvar openPcCommand = {\n    execute: function () {\n        console.log('开电脑');\n    }\n}\n\nvar openQQCommand = {\n    execute: function () {\n        console.log('登录 QQ');\n    }\n};\nvar macroCommand2 = MacroCommand(); \nmacroCommand2.add(closeDoorCommand); \nmacroCommand2.add(openPcCommand); \nmacroCommand2.add(openQQCommand);\n\n/*********现在把所有的命令组合成一个“超级命令”**********/\n\nvar macroCommand = MacroCommand(); \nmacroCommand.add(openAcCommand); \nmacroCommand.add(macroCommand1); \nmacroCommand.add(macroCommand2);\n\n/*********最后给遥控器绑定“超级命令”**********/\n\nvar setCommand = (function (command) {\n    document.getElementById('button').onclick = function () {\n        command.execute();\n    }\n})(macroCommand);\n\n</script>\n</html>\n```\n\n## 组合模式与活动页业务的结合\n\n组合模式解决的问题，主要是模块的统一组织、驱动问题。这里面的前提条件有两个：\n\n1. 模块必须暴露出统一的接口\n1. 模块间必须互不影响、互不依赖\n\n初步来看，上面提取出的上报模块、大部分奖励业务模块可以很好地和组合模式结合，而分享模块和奖励模块中的邀请小模块有一定的联系，目前还不好处理。\n\n## 注意\n\n因为不了解后端业务情况，上述模块抽象提取在和后端业务结合后，肯定还有比较大的调整。\n\n目前先思考这么多，完。","source":"_posts/composite-pattern.md","raw":"---\ntitle: 活动页可配置化的一点探索 -- 组合模式的构建与使用\ndate: 2018-09-03 20:07:58\ntags: [设计模式]\n---\n\n就2018年而言，小组的工作重点，在于承接公司因「用户增长」战略而产生的大量需求。\n\n经过这半年的满负荷和之前几年的半负荷「活动页」项目运载，不论是产品侧还是开发侧，都可以明显察觉到 -- 大部分的活动推广页，其实都有着相似的流程、逻辑，当中有很多明显可复用的模块在等待被抽象提取。\n\n<escape><!-- more --></escape>\n\n对于这些可复用的模块，目前可抽取出这么一些：\n\n1. 分享模块\n    1. 分享活动页本身\n    1. 分享出特殊分享页（被分享人和分享人可通过此分享页建立关系）\n1. 上报模块\n    1. 产品侧使用\n        1. 用户事件上报：主要是点击事件上报，上报至BI组负责维护的罗盘系统\n        1. 页面pvuv上报：同样上报至罗盘系统\n        1. 香港地区活动的google sem上报\n    1. 开发侧使用\n        1. 错误事件上报：上报至monitor系统进行打点累计、监控，超过告警值则发出警告短信\n        1. 普通事件上报：同样上报至monitor系统进行打点累计、监控，开发人员对页面各种事件触发量有个整体了解\n        1. 错误日志上报：错误事件发生时，会有错误日志同时上报至uls系统，开发人员可进行事件回溯\n        1. 普通日志上报：同样是用于帮助开发人员进行事件回溯\n1. 送奖励型业务模块，包括\n    1. 注册送奖励、开户送奖励（大部分的开户送奖励都隐藏在「注册送奖励」后，但用户注册后会被告知「实际奖励得开户后才能领到」）\n    1. 入金送奖励\n    1. 邀请他人注册、开户送奖励（邀请人得到奖励，被邀请人也得到奖励；这里的核心在于邀请人和被邀请人间会建立起一个关系）\n    1. 新特性推广期，使用人获得奖励\n\n## 需求分析\n\n根据上面罗列的模块，模块间有一定的层级关系，但同一层级下的不同模块基本互不干涉。而活动推广页的构建，也基本是上述模块的堆砌。\n\n所以，如果要完成「活动页可配置化」这个需求，基本要做到下面几点：\n\n1. 可复用模块抽象提取\n1. 同一层级模块互不依赖，可独立运行\n1. 模块可被统一组织、驱动\n\n按照上述分析，可使用组合模式来满足上述需求\n\n## 组合模式介绍\n\n一句话描述：组合模式就是构建一个树，然后对里面的节点进行深度优先的遍历。\n\n![](/images/composite-pattern/2018-09-02-am-11.50.24.png)\n\n## 组合模式使用\n\n下面是一个简单地例子：\n\n```html\n<html> \n<body>\n<button id=\"button\">按我</button>\n</body>\n<script>\n\nvar MacroCommand = function () {\n    return {\n        commandsList: [],\n        add: function (command) {\n            this.commandsList.push(command);\n        },\n        execute: function () {\n            for (var i = 0, command; command = this.commandsList[i++];) {\n                command.execute();\n            }\n        }\n    }\n};\nvar openAcCommand = {\n    execute: function () {\n        console.log('打开空调');\n    }\n};\n\n/**********家里的电视和音响是连接在一起的，所以可以用一个宏命令来组合打开电视和打开音响的命令 *********/\n\nvar openTvCommand = {\n    execute: function () {\n        console.log('打开电视');\n    }\n};\nvar openSoundCommand = {\n    execute: function () {\n        console.log('打开音响');\n    }\n};\nvar macroCommand1 = MacroCommand();\nmacroCommand1.add(openTvCommand);\nmacroCommand1.add(openSoundCommand);\n\n/*********关门、打开电脑和打登录 QQ 的命令****************/\n\nvar closeDoorCommand = {\n    execute: function () {\n        console.log('关门');\n    }\n};\n\nvar openPcCommand = {\n    execute: function () {\n        console.log('开电脑');\n    }\n}\n\nvar openQQCommand = {\n    execute: function () {\n        console.log('登录 QQ');\n    }\n};\nvar macroCommand2 = MacroCommand(); \nmacroCommand2.add(closeDoorCommand); \nmacroCommand2.add(openPcCommand); \nmacroCommand2.add(openQQCommand);\n\n/*********现在把所有的命令组合成一个“超级命令”**********/\n\nvar macroCommand = MacroCommand(); \nmacroCommand.add(openAcCommand); \nmacroCommand.add(macroCommand1); \nmacroCommand.add(macroCommand2);\n\n/*********最后给遥控器绑定“超级命令”**********/\n\nvar setCommand = (function (command) {\n    document.getElementById('button').onclick = function () {\n        command.execute();\n    }\n})(macroCommand);\n\n</script>\n</html>\n```\n\n## 组合模式与活动页业务的结合\n\n组合模式解决的问题，主要是模块的统一组织、驱动问题。这里面的前提条件有两个：\n\n1. 模块必须暴露出统一的接口\n1. 模块间必须互不影响、互不依赖\n\n初步来看，上面提取出的上报模块、大部分奖励业务模块可以很好地和组合模式结合，而分享模块和奖励模块中的邀请小模块有一定的联系，目前还不好处理。\n\n## 注意\n\n因为不了解后端业务情况，上述模块抽象提取在和后端业务结合后，肯定还有比较大的调整。\n\n目前先思考这么多，完。","slug":"composite-pattern","published":1,"updated":"2019-08-29T01:32:47.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4uq0005uaideymyd3nm","content":"<p>就2018年而言，小组的工作重点，在于承接公司因「用户增长」战略而产生的大量需求。</p>\n<p>经过这半年的满负荷和之前几年的半负荷「活动页」项目运载，不论是产品侧还是开发侧，都可以明显察觉到 – 大部分的活动推广页，其实都有着相似的流程、逻辑，当中有很多明显可复用的模块在等待被抽象提取。</p>\n<a id=\"more\"></a>\n\n<p>对于这些可复用的模块，目前可抽取出这么一些：</p>\n<ol>\n<li>分享模块<ol>\n<li>分享活动页本身</li>\n<li>分享出特殊分享页（被分享人和分享人可通过此分享页建立关系）</li>\n</ol>\n</li>\n<li>上报模块<ol>\n<li>产品侧使用<ol>\n<li>用户事件上报：主要是点击事件上报，上报至BI组负责维护的罗盘系统</li>\n<li>页面pvuv上报：同样上报至罗盘系统</li>\n<li>香港地区活动的google sem上报</li>\n</ol>\n</li>\n<li>开发侧使用<ol>\n<li>错误事件上报：上报至monitor系统进行打点累计、监控，超过告警值则发出警告短信</li>\n<li>普通事件上报：同样上报至monitor系统进行打点累计、监控，开发人员对页面各种事件触发量有个整体了解</li>\n<li>错误日志上报：错误事件发生时，会有错误日志同时上报至uls系统，开发人员可进行事件回溯</li>\n<li>普通日志上报：同样是用于帮助开发人员进行事件回溯</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>送奖励型业务模块，包括<ol>\n<li>注册送奖励、开户送奖励（大部分的开户送奖励都隐藏在「注册送奖励」后，但用户注册后会被告知「实际奖励得开户后才能领到」）</li>\n<li>入金送奖励</li>\n<li>邀请他人注册、开户送奖励（邀请人得到奖励，被邀请人也得到奖励；这里的核心在于邀请人和被邀请人间会建立起一个关系）</li>\n<li>新特性推广期，使用人获得奖励</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><p>根据上面罗列的模块，模块间有一定的层级关系，但同一层级下的不同模块基本互不干涉。而活动推广页的构建，也基本是上述模块的堆砌。</p>\n<p>所以，如果要完成「活动页可配置化」这个需求，基本要做到下面几点：</p>\n<ol>\n<li>可复用模块抽象提取</li>\n<li>同一层级模块互不依赖，可独立运行</li>\n<li>模块可被统一组织、驱动</li>\n</ol>\n<p>按照上述分析，可使用组合模式来满足上述需求</p>\n<h2 id=\"组合模式介绍\"><a href=\"#组合模式介绍\" class=\"headerlink\" title=\"组合模式介绍\"></a>组合模式介绍</h2><p>一句话描述：组合模式就是构建一个树，然后对里面的节点进行深度优先的遍历。</p>\n<p><img src=\"/images/composite-pattern/2018-09-02-am-11.50.24.png\" alt></p>\n<h2 id=\"组合模式使用\"><a href=\"#组合模式使用\" class=\"headerlink\" title=\"组合模式使用\"></a>组合模式使用</h2><p>下面是一个简单地例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>按我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> MacroCommand = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">        commandsList: [],</span><br><span class=\"line\"><span class=\"javascript\">        add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">command</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.commandsList.push(command);</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"><span class=\"javascript\">        execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, command; command = <span class=\"keyword\">this</span>.commandsList[i++];) &#123;</span></span><br><span class=\"line\">                command.execute();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> openAcCommand = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'打开空调'</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">/**********家里的电视和音响是连接在一起的，所以可以用一个宏命令来组合打开电视和打开音响的命令 *********/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> openTvCommand = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'打开电视'</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> openSoundCommand = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'打开音响'</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> macroCommand1 = MacroCommand();</span></span><br><span class=\"line\">macroCommand1.add(openTvCommand);</span><br><span class=\"line\">macroCommand1.add(openSoundCommand);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">/*********关门、打开电脑和打登录 QQ 的命令****************/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> closeDoorCommand = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'关门'</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> openPcCommand = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'开电脑'</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> openQQCommand = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'登录 QQ'</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> macroCommand2 = MacroCommand(); </span></span><br><span class=\"line\">macroCommand2.add(closeDoorCommand); </span><br><span class=\"line\">macroCommand2.add(openPcCommand); </span><br><span class=\"line\">macroCommand2.add(openQQCommand);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">/*********现在把所有的命令组合成一个“超级命令”**********/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> macroCommand = MacroCommand(); </span></span><br><span class=\"line\">macroCommand.add(openAcCommand); </span><br><span class=\"line\">macroCommand.add(macroCommand1); </span><br><span class=\"line\">macroCommand.add(macroCommand2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">/*********最后给遥控器绑定“超级命令”**********/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> setCommand = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">command</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'button'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        command.execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(macroCommand);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组合模式与活动页业务的结合\"><a href=\"#组合模式与活动页业务的结合\" class=\"headerlink\" title=\"组合模式与活动页业务的结合\"></a>组合模式与活动页业务的结合</h2><p>组合模式解决的问题，主要是模块的统一组织、驱动问题。这里面的前提条件有两个：</p>\n<ol>\n<li>模块必须暴露出统一的接口</li>\n<li>模块间必须互不影响、互不依赖</li>\n</ol>\n<p>初步来看，上面提取出的上报模块、大部分奖励业务模块可以很好地和组合模式结合，而分享模块和奖励模块中的邀请小模块有一定的联系，目前还不好处理。</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>因为不了解后端业务情况，上述模块抽象提取在和后端业务结合后，肯定还有比较大的调整。</p>\n<p>目前先思考这么多，完。</p>\n","site":{"data":{}},"length":2994,"excerpt":"<p>就2018年而言，小组的工作重点，在于承接公司因「用户增长」战略而产生的大量需求。</p>\n<p>经过这半年的满负荷和之前几年的半负荷「活动页」项目运载，不论是产品侧还是开发侧，都可以明显察觉到 – 大部分的活动推广页，其实都有着相似的流程、逻辑，当中有很多明显可复用的模块在等待被抽象提取。</p>","more":"<p>对于这些可复用的模块，目前可抽取出这么一些：</p>\n<ol>\n<li>分享模块<ol>\n<li>分享活动页本身</li>\n<li>分享出特殊分享页（被分享人和分享人可通过此分享页建立关系）</li>\n</ol>\n</li>\n<li>上报模块<ol>\n<li>产品侧使用<ol>\n<li>用户事件上报：主要是点击事件上报，上报至BI组负责维护的罗盘系统</li>\n<li>页面pvuv上报：同样上报至罗盘系统</li>\n<li>香港地区活动的google sem上报</li>\n</ol>\n</li>\n<li>开发侧使用<ol>\n<li>错误事件上报：上报至monitor系统进行打点累计、监控，超过告警值则发出警告短信</li>\n<li>普通事件上报：同样上报至monitor系统进行打点累计、监控，开发人员对页面各种事件触发量有个整体了解</li>\n<li>错误日志上报：错误事件发生时，会有错误日志同时上报至uls系统，开发人员可进行事件回溯</li>\n<li>普通日志上报：同样是用于帮助开发人员进行事件回溯</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>送奖励型业务模块，包括<ol>\n<li>注册送奖励、开户送奖励（大部分的开户送奖励都隐藏在「注册送奖励」后，但用户注册后会被告知「实际奖励得开户后才能领到」）</li>\n<li>入金送奖励</li>\n<li>邀请他人注册、开户送奖励（邀请人得到奖励，被邀请人也得到奖励；这里的核心在于邀请人和被邀请人间会建立起一个关系）</li>\n<li>新特性推广期，使用人获得奖励</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><p>根据上面罗列的模块，模块间有一定的层级关系，但同一层级下的不同模块基本互不干涉。而活动推广页的构建，也基本是上述模块的堆砌。</p>\n<p>所以，如果要完成「活动页可配置化」这个需求，基本要做到下面几点：</p>\n<ol>\n<li>可复用模块抽象提取</li>\n<li>同一层级模块互不依赖，可独立运行</li>\n<li>模块可被统一组织、驱动</li>\n</ol>\n<p>按照上述分析，可使用组合模式来满足上述需求</p>\n<h2 id=\"组合模式介绍\"><a href=\"#组合模式介绍\" class=\"headerlink\" title=\"组合模式介绍\"></a>组合模式介绍</h2><p>一句话描述：组合模式就是构建一个树，然后对里面的节点进行深度优先的遍历。</p>\n<p><img src=\"/images/composite-pattern/2018-09-02-am-11.50.24.png\" alt></p>\n<h2 id=\"组合模式使用\"><a href=\"#组合模式使用\" class=\"headerlink\" title=\"组合模式使用\"></a>组合模式使用</h2><p>下面是一个简单地例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>按我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> MacroCommand = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">        commandsList: [],</span><br><span class=\"line\"><span class=\"javascript\">        add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">command</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.commandsList.push(command);</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"><span class=\"javascript\">        execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, command; command = <span class=\"keyword\">this</span>.commandsList[i++];) &#123;</span></span><br><span class=\"line\">                command.execute();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> openAcCommand = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'打开空调'</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">/**********家里的电视和音响是连接在一起的，所以可以用一个宏命令来组合打开电视和打开音响的命令 *********/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> openTvCommand = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'打开电视'</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> openSoundCommand = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'打开音响'</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> macroCommand1 = MacroCommand();</span></span><br><span class=\"line\">macroCommand1.add(openTvCommand);</span><br><span class=\"line\">macroCommand1.add(openSoundCommand);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">/*********关门、打开电脑和打登录 QQ 的命令****************/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> closeDoorCommand = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'关门'</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> openPcCommand = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'开电脑'</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> openQQCommand = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    execute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'登录 QQ'</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> macroCommand2 = MacroCommand(); </span></span><br><span class=\"line\">macroCommand2.add(closeDoorCommand); </span><br><span class=\"line\">macroCommand2.add(openPcCommand); </span><br><span class=\"line\">macroCommand2.add(openQQCommand);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">/*********现在把所有的命令组合成一个“超级命令”**********/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> macroCommand = MacroCommand(); </span></span><br><span class=\"line\">macroCommand.add(openAcCommand); </span><br><span class=\"line\">macroCommand.add(macroCommand1); </span><br><span class=\"line\">macroCommand.add(macroCommand2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">/*********最后给遥控器绑定“超级命令”**********/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> setCommand = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">command</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'button'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        command.execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(macroCommand);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组合模式与活动页业务的结合\"><a href=\"#组合模式与活动页业务的结合\" class=\"headerlink\" title=\"组合模式与活动页业务的结合\"></a>组合模式与活动页业务的结合</h2><p>组合模式解决的问题，主要是模块的统一组织、驱动问题。这里面的前提条件有两个：</p>\n<ol>\n<li>模块必须暴露出统一的接口</li>\n<li>模块间必须互不影响、互不依赖</li>\n</ol>\n<p>初步来看，上面提取出的上报模块、大部分奖励业务模块可以很好地和组合模式结合，而分享模块和奖励模块中的邀请小模块有一定的联系，目前还不好处理。</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>因为不了解后端业务情况，上述模块抽象提取在和后端业务结合后，肯定还有比较大的调整。</p>\n<p>目前先思考这么多，完。</p>"},{"title":"低成本碰撞动画实现","date":"2018-02-11T07:35:58.000Z","_content":"\n![](/images/crashBall-by-css3/crash-ball.gif)\n<escape><!-- more --></escape>\n\n## 具体代码\n\n```javascript\n<html>\n\n<head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <style>\n        html,\n        body {\n            padding: 0;\n            margin: 0;\n        }\n\n        .horizontal {\n            display: block;\n            position: absolute;\n            top: 0;\n            left: 0;\n\n            -webkit-animation: horizontal 1.4s linear 0s infinite alternate;\n            -moz-animation: horizontal 1.4s linear 0s infinite alternate;\n            -o-animation: horizontal 1.4s linear 0s infinite alternate;\n            animation: horizontal 1.4s linear 0s infinite alternate;\n        }\n\n        .vertical {\n            display: block;\n            position: absolute;\n            top: 0;\n            left: 0;\n\n            -webkit-animation: vertical 1.1s ease-in 0s infinite alternate;\n            -moz-animation: vertical 1.1s ease-in 0s infinite alternate;\n            -o-animation: vertical 1.1s ease-in 0s infinite alternate;\n            animation: vertical 1.1s ease-in 0s infinite alternate;\n        }\n\n        .ball {\n            width: 50px;\n            height: 50px;\n            border-radius: 50%;\n            background-color: red;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"horizontal\" class=\"\">\n        <div id=\"vertical\" class=\"\">\n            <div class=\"ball\"></div>\n        </div>\n    </div>\n    <script src=\"https://cdn.bootcss.com/jquery/2.0.3/jquery.js\"></script>\n    <script>\n        $ph = $(\"body\").height();\n        $pw = $(\"body\").width();\n        $ballR = $(\".ball\").width();\n\n        $(\"<style></style>\").text(\n            \"@-webkit-keyframes horizontal {0% {transform: translate(0, 0);}100% {transform: translate(\" + ($pw -\n                $ballR) + \"px, 0);}}\" +\n            \"@keyframes horizontal {0% { transform: translate(0, 0);}100% {transform: translate(\" + ($pw - $ballR) +\n            \"px, 0);}}\" +\n            \"@-webkit-keyframes vertical {0% {transform: translate(0, 0);}100% {transform: translate(0, \" + ($ph -\n                $ballR) + \"px);}}\" +\n            \"@keyframes vertical {0% { transform: translate(0, 0);}100% {transform: translate(0, \" + ($ph - $ballR) +\n            \"px);}}\"\n        ).appendTo($(\"head\"));\n\n        $('#horizontal').addClass('horizontal');\n        $('#vertical').addClass('vertical');\n    </script>\n</body>\n\n</html>\n```\n\n## 动画解析\n\n先看html结构：\n\n```javascript\n<div id=\"horizontal\" class=\"\">\n    <div id=\"vertical\" class=\"\">\n        <div class=\"ball\"></div>\n    </div>\n</div>\n```\n\n然后看两个动画：\n\n```javascript\n@-webkit-keyframes horizontal {\n    0% {\n        transform: translate(0, 0);\n    }\n    100% {\n        transform: translate(290px, 0);\n    }\n}\n\n@keyframes horizontal {\n    0% {\n        transform: translate(0, 0);\n    }\n    100% {\n        transform: translate(290px);\n    }\n}\n\n@-webkit-keyframes vertical {\n    0% {\n        transform: translate(0, 0);\n    }\n    100% {\n        transform: translate(0, 630px);\n    }\n}\n\n@keyframes vertical {\n    0% {\n        transform: translate(0, 0);\n    }\n    100% {\n        transform: translate(0, 630px);\n    }\n}\n```\n\n显然，包裹div.ball的两个元素，div#horizontal负责x轴平移，div#vertical负责y轴平移，x轴、y轴两种平移混合，就实现各种斜移。\n\n接下来是动画属性设置：\n\n```javascript\n.horizontal {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    -webkit-animation: horizontal 1.4s linear 0s infinite alternate;\n    -moz-animation: horizontal 1.4s linear 0s infinite alternate;\n    -o-animation: horizontal 1.4s linear 0s infinite alternate;\n    animation: horizontal 1.4s linear 0s infinite alternate;\n}\n\n.vertical {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    -webkit-animation: vertical 1.1s ease-in 0s infinite alternate;\n    -moz-animation: vertical 1.1s ease-in 0s infinite alternate;\n    -o-animation: vertical 1.1s ease-in 0s infinite alternate;\n    animation: vertical 1.1s ease-in 0s infinite alternate;\n}\n```\n\n对于碰撞运动而言，在y轴上，始终有重力的影响。\n\n所以，y轴动画 animation-timing-function属性被设置为ease-in，从开始到结束逐渐加速(从高处到低处逐渐加速)；然后，animation-direction设置为alternate，则动画正向播完后，会反向播出，则反向播出时，结束到开始回事逐渐减速(从低处到高处逐渐减速)；最后，animation-iteration-count设置为infinite，动画会无限循环。\n\n至于x轴，其不受其他力的影响，所以在x轴方向上，速度不变，所以 animation-timing-function属性被设置为linear，从开始到结束速度不变。其余属性，与y轴一样。\n\n另外，x轴和y轴的具体移动距离，这个由javascript计算得出:\n\n```javascript\n$ph = $(\"body\").height();\n$pw = $(\"body\").width();\n$ballR = $(\".ball\").width();\n\n$(\"<style></style>\").text(\n    \"@-webkit-keyframes horizontal {0% {transform: translate(0, 0);}100% {transform: translate(\" + ($pw -\n        $ballR) + \"px, 0);}}\" +\n    \"@keyframes horizontal {0% { transform: translate(0, 0);}100% {transform: translate(\" + ($pw - $ballR) +\n    \"px, 0);}}\" +\n    \"@-webkit-keyframes vertical {0% {transform: translate(0, 0);}100% {transform: translate(0, \" + ($ph -\n        $ballR) + \"px);}}\" +\n    \"@keyframes vertical {0% { transform: translate(0, 0);}100% {transform: translate(0, \" + ($ph - $ballR) +\n    \"px);}}\"\n).appendTo($(\"head\"));\n```\n\n至此，低成本碰撞动画简述完毕。","source":"_posts/crashBall-by-css3.md","raw":"---\ntitle: 低成本碰撞动画实现\ndate: 2018-02-11 15:35:58\ntags: [css, html]\n---\n\n![](/images/crashBall-by-css3/crash-ball.gif)\n<escape><!-- more --></escape>\n\n## 具体代码\n\n```javascript\n<html>\n\n<head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <style>\n        html,\n        body {\n            padding: 0;\n            margin: 0;\n        }\n\n        .horizontal {\n            display: block;\n            position: absolute;\n            top: 0;\n            left: 0;\n\n            -webkit-animation: horizontal 1.4s linear 0s infinite alternate;\n            -moz-animation: horizontal 1.4s linear 0s infinite alternate;\n            -o-animation: horizontal 1.4s linear 0s infinite alternate;\n            animation: horizontal 1.4s linear 0s infinite alternate;\n        }\n\n        .vertical {\n            display: block;\n            position: absolute;\n            top: 0;\n            left: 0;\n\n            -webkit-animation: vertical 1.1s ease-in 0s infinite alternate;\n            -moz-animation: vertical 1.1s ease-in 0s infinite alternate;\n            -o-animation: vertical 1.1s ease-in 0s infinite alternate;\n            animation: vertical 1.1s ease-in 0s infinite alternate;\n        }\n\n        .ball {\n            width: 50px;\n            height: 50px;\n            border-radius: 50%;\n            background-color: red;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"horizontal\" class=\"\">\n        <div id=\"vertical\" class=\"\">\n            <div class=\"ball\"></div>\n        </div>\n    </div>\n    <script src=\"https://cdn.bootcss.com/jquery/2.0.3/jquery.js\"></script>\n    <script>\n        $ph = $(\"body\").height();\n        $pw = $(\"body\").width();\n        $ballR = $(\".ball\").width();\n\n        $(\"<style></style>\").text(\n            \"@-webkit-keyframes horizontal {0% {transform: translate(0, 0);}100% {transform: translate(\" + ($pw -\n                $ballR) + \"px, 0);}}\" +\n            \"@keyframes horizontal {0% { transform: translate(0, 0);}100% {transform: translate(\" + ($pw - $ballR) +\n            \"px, 0);}}\" +\n            \"@-webkit-keyframes vertical {0% {transform: translate(0, 0);}100% {transform: translate(0, \" + ($ph -\n                $ballR) + \"px);}}\" +\n            \"@keyframes vertical {0% { transform: translate(0, 0);}100% {transform: translate(0, \" + ($ph - $ballR) +\n            \"px);}}\"\n        ).appendTo($(\"head\"));\n\n        $('#horizontal').addClass('horizontal');\n        $('#vertical').addClass('vertical');\n    </script>\n</body>\n\n</html>\n```\n\n## 动画解析\n\n先看html结构：\n\n```javascript\n<div id=\"horizontal\" class=\"\">\n    <div id=\"vertical\" class=\"\">\n        <div class=\"ball\"></div>\n    </div>\n</div>\n```\n\n然后看两个动画：\n\n```javascript\n@-webkit-keyframes horizontal {\n    0% {\n        transform: translate(0, 0);\n    }\n    100% {\n        transform: translate(290px, 0);\n    }\n}\n\n@keyframes horizontal {\n    0% {\n        transform: translate(0, 0);\n    }\n    100% {\n        transform: translate(290px);\n    }\n}\n\n@-webkit-keyframes vertical {\n    0% {\n        transform: translate(0, 0);\n    }\n    100% {\n        transform: translate(0, 630px);\n    }\n}\n\n@keyframes vertical {\n    0% {\n        transform: translate(0, 0);\n    }\n    100% {\n        transform: translate(0, 630px);\n    }\n}\n```\n\n显然，包裹div.ball的两个元素，div#horizontal负责x轴平移，div#vertical负责y轴平移，x轴、y轴两种平移混合，就实现各种斜移。\n\n接下来是动画属性设置：\n\n```javascript\n.horizontal {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    -webkit-animation: horizontal 1.4s linear 0s infinite alternate;\n    -moz-animation: horizontal 1.4s linear 0s infinite alternate;\n    -o-animation: horizontal 1.4s linear 0s infinite alternate;\n    animation: horizontal 1.4s linear 0s infinite alternate;\n}\n\n.vertical {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    -webkit-animation: vertical 1.1s ease-in 0s infinite alternate;\n    -moz-animation: vertical 1.1s ease-in 0s infinite alternate;\n    -o-animation: vertical 1.1s ease-in 0s infinite alternate;\n    animation: vertical 1.1s ease-in 0s infinite alternate;\n}\n```\n\n对于碰撞运动而言，在y轴上，始终有重力的影响。\n\n所以，y轴动画 animation-timing-function属性被设置为ease-in，从开始到结束逐渐加速(从高处到低处逐渐加速)；然后，animation-direction设置为alternate，则动画正向播完后，会反向播出，则反向播出时，结束到开始回事逐渐减速(从低处到高处逐渐减速)；最后，animation-iteration-count设置为infinite，动画会无限循环。\n\n至于x轴，其不受其他力的影响，所以在x轴方向上，速度不变，所以 animation-timing-function属性被设置为linear，从开始到结束速度不变。其余属性，与y轴一样。\n\n另外，x轴和y轴的具体移动距离，这个由javascript计算得出:\n\n```javascript\n$ph = $(\"body\").height();\n$pw = $(\"body\").width();\n$ballR = $(\".ball\").width();\n\n$(\"<style></style>\").text(\n    \"@-webkit-keyframes horizontal {0% {transform: translate(0, 0);}100% {transform: translate(\" + ($pw -\n        $ballR) + \"px, 0);}}\" +\n    \"@keyframes horizontal {0% { transform: translate(0, 0);}100% {transform: translate(\" + ($pw - $ballR) +\n    \"px, 0);}}\" +\n    \"@-webkit-keyframes vertical {0% {transform: translate(0, 0);}100% {transform: translate(0, \" + ($ph -\n        $ballR) + \"px);}}\" +\n    \"@keyframes vertical {0% { transform: translate(0, 0);}100% {transform: translate(0, \" + ($ph - $ballR) +\n    \"px);}}\"\n).appendTo($(\"head\"));\n```\n\n至此，低成本碰撞动画简述完毕。","slug":"crashBall-by-css3","published":1,"updated":"2019-08-29T02:31:28.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4us0007uaide2h981mr","content":"<p><img src=\"/images/crashBall-by-css3/crash-ball.gif\" alt></p>\n<a id=\"more\"></a>\n\n<h2 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        html,</span><br><span class=\"line\">        body &#123;</span><br><span class=\"line\">            padding: <span class=\"number\">0</span>;</span><br><span class=\"line\">            margin: <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .horizontal &#123;</span><br><span class=\"line\">            display: block;</span><br><span class=\"line\">            position: absolute;</span><br><span class=\"line\">            top: <span class=\"number\">0</span>;</span><br><span class=\"line\">            left: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            -webkit-animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">            -moz-animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">            -o-animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">            animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .vertical &#123;</span><br><span class=\"line\">            display: block;</span><br><span class=\"line\">            position: absolute;</span><br><span class=\"line\">            top: <span class=\"number\">0</span>;</span><br><span class=\"line\">            left: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            -webkit-animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">            -moz-animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">            -o-animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">            animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .ball &#123;</span><br><span class=\"line\">            width: <span class=\"number\">50</span>px;</span><br><span class=\"line\">            height: <span class=\"number\">50</span>px;</span><br><span class=\"line\">            border-radius: <span class=\"number\">50</span>%;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"horizontal\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">        &lt;div id=<span class=\"string\">\"vertical\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">            &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ball\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/jquery/2.0.3/jquery.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        $ph = $(<span class=\"string\">\"body\"</span>).height();</span><br><span class=\"line\">        $pw = $(<span class=\"string\">\"body\"</span>).width();</span><br><span class=\"line\">        $ballR = $(<span class=\"string\">\".ball\"</span>).width();</span><br><span class=\"line\"></span><br><span class=\"line\">        $(<span class=\"string\">\"&lt;style&gt;&lt;/style&gt;\"</span>).text(</span><br><span class=\"line\">            <span class=\"string\">\"@-webkit-keyframes horizontal &#123;0% &#123;transform: translate(0, 0);&#125;100% &#123;transform: translate(\"</span> + ($pw -</span><br><span class=\"line\">                $ballR) + <span class=\"string\">\"px, 0);&#125;&#125;\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"@keyframes horizontal &#123;0% &#123; transform: translate(0, 0);&#125;100% &#123;transform: translate(\"</span> + ($pw - $ballR) +</span><br><span class=\"line\">            <span class=\"string\">\"px, 0);&#125;&#125;\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"@-webkit-keyframes vertical &#123;0% &#123;transform: translate(0, 0);&#125;100% &#123;transform: translate(0, \"</span> + ($ph -</span><br><span class=\"line\">                $ballR) + <span class=\"string\">\"px);&#125;&#125;\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"@keyframes vertical &#123;0% &#123; transform: translate(0, 0);&#125;100% &#123;transform: translate(0, \"</span> + ($ph - $ballR) +</span><br><span class=\"line\">            <span class=\"string\">\"px);&#125;&#125;\"</span></span><br><span class=\"line\">        ).appendTo($(<span class=\"string\">\"head\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        $(<span class=\"string\">'#horizontal'</span>).addClass(<span class=\"string\">'horizontal'</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'#vertical'</span>).addClass(<span class=\"string\">'vertical'</span>);</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动画解析\"><a href=\"#动画解析\" class=\"headerlink\" title=\"动画解析\"></a>动画解析</h2><p>先看html结构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"horizontal\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"vertical\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ball\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后看两个动画：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@-webkit-keyframes horizontal &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">290</span>px, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@keyframes horizontal &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">290</span>px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@-webkit-keyframes vertical &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">0</span>, <span class=\"number\">630</span>px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@keyframes vertical &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">0</span>, <span class=\"number\">630</span>px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>显然，包裹div.ball的两个元素，div#horizontal负责x轴平移，div#vertical负责y轴平移，x轴、y轴两种平移混合，就实现各种斜移。</p>\n<p>接下来是动画属性设置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.horizontal &#123;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: <span class=\"number\">0</span>;</span><br><span class=\"line\">    left: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    -webkit-animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">    -moz-animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">    -o-animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">    animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.vertical &#123;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: <span class=\"number\">0</span>;</span><br><span class=\"line\">    left: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    -webkit-animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">    -moz-animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">    -o-animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">    animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于碰撞运动而言，在y轴上，始终有重力的影响。</p>\n<p>所以，y轴动画 animation-timing-function属性被设置为ease-in，从开始到结束逐渐加速(从高处到低处逐渐加速)；然后，animation-direction设置为alternate，则动画正向播完后，会反向播出，则反向播出时，结束到开始回事逐渐减速(从低处到高处逐渐减速)；最后，animation-iteration-count设置为infinite，动画会无限循环。</p>\n<p>至于x轴，其不受其他力的影响，所以在x轴方向上，速度不变，所以 animation-timing-function属性被设置为linear，从开始到结束速度不变。其余属性，与y轴一样。</p>\n<p>另外，x轴和y轴的具体移动距离，这个由javascript计算得出:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ph = $(<span class=\"string\">\"body\"</span>).height();</span><br><span class=\"line\">$pw = $(<span class=\"string\">\"body\"</span>).width();</span><br><span class=\"line\">$ballR = $(<span class=\"string\">\".ball\"</span>).width();</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"&lt;style&gt;&lt;/style&gt;\"</span>).text(</span><br><span class=\"line\">    <span class=\"string\">\"@-webkit-keyframes horizontal &#123;0% &#123;transform: translate(0, 0);&#125;100% &#123;transform: translate(\"</span> + ($pw -</span><br><span class=\"line\">        $ballR) + <span class=\"string\">\"px, 0);&#125;&#125;\"</span> +</span><br><span class=\"line\">    <span class=\"string\">\"@keyframes horizontal &#123;0% &#123; transform: translate(0, 0);&#125;100% &#123;transform: translate(\"</span> + ($pw - $ballR) +</span><br><span class=\"line\">    <span class=\"string\">\"px, 0);&#125;&#125;\"</span> +</span><br><span class=\"line\">    <span class=\"string\">\"@-webkit-keyframes vertical &#123;0% &#123;transform: translate(0, 0);&#125;100% &#123;transform: translate(0, \"</span> + ($ph -</span><br><span class=\"line\">        $ballR) + <span class=\"string\">\"px);&#125;&#125;\"</span> +</span><br><span class=\"line\">    <span class=\"string\">\"@keyframes vertical &#123;0% &#123; transform: translate(0, 0);&#125;100% &#123;transform: translate(0, \"</span> + ($ph - $ballR) +</span><br><span class=\"line\">    <span class=\"string\">\"px);&#125;&#125;\"</span></span><br><span class=\"line\">).appendTo($(<span class=\"string\">\"head\"</span>));</span><br></pre></td></tr></table></figure>\n\n<p>至此，低成本碰撞动画简述完毕。</p>\n","site":{"data":{}},"length":5502,"excerpt":"<p><img src=\"/images/crashBall-by-css3/crash-ball.gif\" alt></p>","more":"<h2 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        html,</span><br><span class=\"line\">        body &#123;</span><br><span class=\"line\">            padding: <span class=\"number\">0</span>;</span><br><span class=\"line\">            margin: <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .horizontal &#123;</span><br><span class=\"line\">            display: block;</span><br><span class=\"line\">            position: absolute;</span><br><span class=\"line\">            top: <span class=\"number\">0</span>;</span><br><span class=\"line\">            left: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            -webkit-animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">            -moz-animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">            -o-animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">            animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .vertical &#123;</span><br><span class=\"line\">            display: block;</span><br><span class=\"line\">            position: absolute;</span><br><span class=\"line\">            top: <span class=\"number\">0</span>;</span><br><span class=\"line\">            left: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            -webkit-animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">            -moz-animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">            -o-animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">            animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .ball &#123;</span><br><span class=\"line\">            width: <span class=\"number\">50</span>px;</span><br><span class=\"line\">            height: <span class=\"number\">50</span>px;</span><br><span class=\"line\">            border-radius: <span class=\"number\">50</span>%;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"horizontal\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">        &lt;div id=<span class=\"string\">\"vertical\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">            &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ball\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/jquery/2.0.3/jquery.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        $ph = $(<span class=\"string\">\"body\"</span>).height();</span><br><span class=\"line\">        $pw = $(<span class=\"string\">\"body\"</span>).width();</span><br><span class=\"line\">        $ballR = $(<span class=\"string\">\".ball\"</span>).width();</span><br><span class=\"line\"></span><br><span class=\"line\">        $(<span class=\"string\">\"&lt;style&gt;&lt;/style&gt;\"</span>).text(</span><br><span class=\"line\">            <span class=\"string\">\"@-webkit-keyframes horizontal &#123;0% &#123;transform: translate(0, 0);&#125;100% &#123;transform: translate(\"</span> + ($pw -</span><br><span class=\"line\">                $ballR) + <span class=\"string\">\"px, 0);&#125;&#125;\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"@keyframes horizontal &#123;0% &#123; transform: translate(0, 0);&#125;100% &#123;transform: translate(\"</span> + ($pw - $ballR) +</span><br><span class=\"line\">            <span class=\"string\">\"px, 0);&#125;&#125;\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"@-webkit-keyframes vertical &#123;0% &#123;transform: translate(0, 0);&#125;100% &#123;transform: translate(0, \"</span> + ($ph -</span><br><span class=\"line\">                $ballR) + <span class=\"string\">\"px);&#125;&#125;\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"@keyframes vertical &#123;0% &#123; transform: translate(0, 0);&#125;100% &#123;transform: translate(0, \"</span> + ($ph - $ballR) +</span><br><span class=\"line\">            <span class=\"string\">\"px);&#125;&#125;\"</span></span><br><span class=\"line\">        ).appendTo($(<span class=\"string\">\"head\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        $(<span class=\"string\">'#horizontal'</span>).addClass(<span class=\"string\">'horizontal'</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'#vertical'</span>).addClass(<span class=\"string\">'vertical'</span>);</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动画解析\"><a href=\"#动画解析\" class=\"headerlink\" title=\"动画解析\"></a>动画解析</h2><p>先看html结构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"horizontal\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"vertical\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ball\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后看两个动画：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@-webkit-keyframes horizontal &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">290</span>px, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@keyframes horizontal &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">290</span>px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@-webkit-keyframes vertical &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">0</span>, <span class=\"number\">630</span>px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@keyframes vertical &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100</span>% &#123;</span><br><span class=\"line\">        transform: translate(<span class=\"number\">0</span>, <span class=\"number\">630</span>px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>显然，包裹div.ball的两个元素，div#horizontal负责x轴平移，div#vertical负责y轴平移，x轴、y轴两种平移混合，就实现各种斜移。</p>\n<p>接下来是动画属性设置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.horizontal &#123;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: <span class=\"number\">0</span>;</span><br><span class=\"line\">    left: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    -webkit-animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">    -moz-animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">    -o-animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">    animation: horizontal <span class=\"number\">1.4</span>s linear <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.vertical &#123;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: <span class=\"number\">0</span>;</span><br><span class=\"line\">    left: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    -webkit-animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">    -moz-animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">    -o-animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">    animation: vertical <span class=\"number\">1.1</span>s ease-<span class=\"keyword\">in</span> <span class=\"number\">0</span>s infinite alternate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于碰撞运动而言，在y轴上，始终有重力的影响。</p>\n<p>所以，y轴动画 animation-timing-function属性被设置为ease-in，从开始到结束逐渐加速(从高处到低处逐渐加速)；然后，animation-direction设置为alternate，则动画正向播完后，会反向播出，则反向播出时，结束到开始回事逐渐减速(从低处到高处逐渐减速)；最后，animation-iteration-count设置为infinite，动画会无限循环。</p>\n<p>至于x轴，其不受其他力的影响，所以在x轴方向上，速度不变，所以 animation-timing-function属性被设置为linear，从开始到结束速度不变。其余属性，与y轴一样。</p>\n<p>另外，x轴和y轴的具体移动距离，这个由javascript计算得出:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ph = $(<span class=\"string\">\"body\"</span>).height();</span><br><span class=\"line\">$pw = $(<span class=\"string\">\"body\"</span>).width();</span><br><span class=\"line\">$ballR = $(<span class=\"string\">\".ball\"</span>).width();</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"&lt;style&gt;&lt;/style&gt;\"</span>).text(</span><br><span class=\"line\">    <span class=\"string\">\"@-webkit-keyframes horizontal &#123;0% &#123;transform: translate(0, 0);&#125;100% &#123;transform: translate(\"</span> + ($pw -</span><br><span class=\"line\">        $ballR) + <span class=\"string\">\"px, 0);&#125;&#125;\"</span> +</span><br><span class=\"line\">    <span class=\"string\">\"@keyframes horizontal &#123;0% &#123; transform: translate(0, 0);&#125;100% &#123;transform: translate(\"</span> + ($pw - $ballR) +</span><br><span class=\"line\">    <span class=\"string\">\"px, 0);&#125;&#125;\"</span> +</span><br><span class=\"line\">    <span class=\"string\">\"@-webkit-keyframes vertical &#123;0% &#123;transform: translate(0, 0);&#125;100% &#123;transform: translate(0, \"</span> + ($ph -</span><br><span class=\"line\">        $ballR) + <span class=\"string\">\"px);&#125;&#125;\"</span> +</span><br><span class=\"line\">    <span class=\"string\">\"@keyframes vertical &#123;0% &#123; transform: translate(0, 0);&#125;100% &#123;transform: translate(0, \"</span> + ($ph - $ballR) +</span><br><span class=\"line\">    <span class=\"string\">\"px);&#125;&#125;\"</span></span><br><span class=\"line\">).appendTo($(<span class=\"string\">\"head\"</span>));</span><br></pre></td></tr></table></figure>\n\n<p>至此，低成本碰撞动画简述完毕。</p>"},{"title":"增长黑客小结","date":"2019-08-15T01:16:58.000Z","_content":"\n“增长黑客”这一概念近年来兴起于美国互联网创业圈，最早是由互联网创业者Sean Ellis提出。增长黑客是介于技术和市场之间的新型团队角色，主要依靠技术和数据的力量来达成各种营销目标，而非传统意义上靠砸钱来获取用户的市场推广角色。他们能从单线思维者时常忽略的角度和难以企及的高度通盘考虑影响产品发展的因素，提出基于产品本身的改造和开发策略，以切实的依据、低廉的成本、可控的风险来达成用户增长、活跃度上升、收入额增加等商业目的。简单来说，就是低成本甚至零成本地用“技术”来让产品获得有效增长。\n\n<escape><!-- more --></escape>\n\n![](/images/growth-hacker/growthhacker.png)\n\n[增长黑客](https://book.douban.com/subject/26541801/)","source":"_posts/growth-hacker.md","raw":"---\ntitle: 增长黑客小结\ndate: 2019-08-15 09:16:58\ntags: [用户增长]\n---\n\n“增长黑客”这一概念近年来兴起于美国互联网创业圈，最早是由互联网创业者Sean Ellis提出。增长黑客是介于技术和市场之间的新型团队角色，主要依靠技术和数据的力量来达成各种营销目标，而非传统意义上靠砸钱来获取用户的市场推广角色。他们能从单线思维者时常忽略的角度和难以企及的高度通盘考虑影响产品发展的因素，提出基于产品本身的改造和开发策略，以切实的依据、低廉的成本、可控的风险来达成用户增长、活跃度上升、收入额增加等商业目的。简单来说，就是低成本甚至零成本地用“技术”来让产品获得有效增长。\n\n<escape><!-- more --></escape>\n\n![](/images/growth-hacker/growthhacker.png)\n\n[增长黑客](https://book.douban.com/subject/26541801/)","slug":"growth-hacker","published":1,"updated":"2019-08-28T08:06:29.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4ut0008uaid829trxnh","content":"<p>“增长黑客”这一概念近年来兴起于美国互联网创业圈，最早是由互联网创业者Sean Ellis提出。增长黑客是介于技术和市场之间的新型团队角色，主要依靠技术和数据的力量来达成各种营销目标，而非传统意义上靠砸钱来获取用户的市场推广角色。他们能从单线思维者时常忽略的角度和难以企及的高度通盘考虑影响产品发展的因素，提出基于产品本身的改造和开发策略，以切实的依据、低廉的成本、可控的风险来达成用户增长、活跃度上升、收入额增加等商业目的。简单来说，就是低成本甚至零成本地用“技术”来让产品获得有效增长。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/growth-hacker/growthhacker.png\" alt></p>\n<p><a href=\"https://book.douban.com/subject/26541801/\" target=\"_blank\" rel=\"noopener\">增长黑客</a></p>\n","site":{"data":{}},"length":249,"excerpt":"<p>“增长黑客”这一概念近年来兴起于美国互联网创业圈，最早是由互联网创业者Sean Ellis提出。增长黑客是介于技术和市场之间的新型团队角色，主要依靠技术和数据的力量来达成各种营销目标，而非传统意义上靠砸钱来获取用户的市场推广角色。他们能从单线思维者时常忽略的角度和难以企及的高度通盘考虑影响产品发展的因素，提出基于产品本身的改造和开发策略，以切实的依据、低廉的成本、可控的风险来达成用户增长、活跃度上升、收入额增加等商业目的。简单来说，就是低成本甚至零成本地用“技术”来让产品获得有效增长。</p>","more":"<p><img src=\"/images/growth-hacker/growthhacker.png\" alt></p>\n<p><a href=\"https://book.douban.com/subject/26541801/\" target=\"_blank\" rel=\"noopener\">增长黑客</a></p>"},{"title":"geohash算法","date":"2019-08-15T09:47:58.000Z","_content":"\n对于地图元素，通常使用经纬度坐标表示，经度为（-180，180], 纬度为（-90， 90]。对于计算确定几个点互相之间的距离时，使用勾股定理足以。\n\n但如果要计算距离某点一定范围内有多少个点时，“遍历所有的点计算出距离再做比对”在性能上肯定无法令人接受。\n所以，这种时候，可以考虑直接使用sql划分矩形：\n```\nselect id from positions where x0-r < x < x0+r and y0-r < y < y0+r\n```\n\n不过，这种查询方式，在高并发场景，性能可能仍然达不到要求\n<escape><!-- more --></escape>\n\n![](/images/geohash/1.png)\n\n\n## geohash\n\n业界比较通用的地理位置距离排序算法是 GeoHash 算法。\n\n以一句话总结的话：GeoHash 算法将二维的经纬度数据映射到一维的整数，这样所有的元素都将在挂载到一条线上，距离靠近的二维坐标映射到一维后的点之间距离也会很接近。\n\n### 原理\n\n![](/images/geohash/2.png)\n\n![](/images/geohash/3.png)\n\n假设有一个点[31.1932993, 121.43960190000007]，则：\n\n1. 经度在 [-180,0) 范围内的标识为0，经度范围在 [0, 180) 度的标识为 1;\n2. 继续划分，经度范围在 [0,90) 的标识为 0，经度范围在 [90,180) 的标识为 1;\n3. 这样，我们划分 15 次，得到经度的标识二进制串为110101100101101;\n4. 对纬度同样划分，得到纬度的标识二进制串为101011000101110;\n5. 按照“偶数位放经度，奇数位放纬度”的规则，重新组合经度和纬度的二进制串，11100 11001 00011 00111 10110\n6. 转换成十进制是 28 25 28 3 7 22，查表编码得到最终结果，wtw37q;\n\n![](/images/geohash/4.png)\n\n![](/images/geohash/5.png)\n\n![](/images/geohash/6.png)\n\n之后，作出查询时，就是：\n\n```\nselect id from positions where geoHash like \"wtw37%\";\n```\n\n### 问题\n\n1. Z 阶曲线有一个比较严重的问题，虽然有局部保序性，但是它也有突变性。在每个 Z 字母的拐角，都有可能出现顺序的突变。\n![](/images/geohash/7.png)\n看上图中标注出来的蓝色的点点。每两个点虽然是相邻的，但是距离相隔很远。看右下角的图，两个数值邻近红色的点两者距离几乎达到了整个正方形的边长。两个数值邻近绿色的点也达到了正方形的一半的长度。\n\n>获取到的点都按勾股定理算一算，排除不合理的点\n\n2. Geohash 的另外一个缺点是，如果选择不好合适的网格大小，判断邻近点可能会比较麻烦。\n![](/images/geohash/8.png)\n\n>![](/images/geohash/9.png)\n>仔细观察相邻方格，我们会发现两个小方格会在 经度或纬度的二进制码上相差1；我们通过 GeoHash 码反向解析出二进制码后，将其经度或纬度（或两者）的二进制码加一、减一，再次组合为 GeoHash码。然后获取到的点都按勾股定理算一算，排除不合理的点\n\n\n## 使用\n\n![](/images/geohash/10.png)","source":"_posts/geohash.md","raw":"---\ntitle: geohash算法\ndate: 2019-08-15 17:47:58\ntags: [redis, 算法]\n---\n\n对于地图元素，通常使用经纬度坐标表示，经度为（-180，180], 纬度为（-90， 90]。对于计算确定几个点互相之间的距离时，使用勾股定理足以。\n\n但如果要计算距离某点一定范围内有多少个点时，“遍历所有的点计算出距离再做比对”在性能上肯定无法令人接受。\n所以，这种时候，可以考虑直接使用sql划分矩形：\n```\nselect id from positions where x0-r < x < x0+r and y0-r < y < y0+r\n```\n\n不过，这种查询方式，在高并发场景，性能可能仍然达不到要求\n<escape><!-- more --></escape>\n\n![](/images/geohash/1.png)\n\n\n## geohash\n\n业界比较通用的地理位置距离排序算法是 GeoHash 算法。\n\n以一句话总结的话：GeoHash 算法将二维的经纬度数据映射到一维的整数，这样所有的元素都将在挂载到一条线上，距离靠近的二维坐标映射到一维后的点之间距离也会很接近。\n\n### 原理\n\n![](/images/geohash/2.png)\n\n![](/images/geohash/3.png)\n\n假设有一个点[31.1932993, 121.43960190000007]，则：\n\n1. 经度在 [-180,0) 范围内的标识为0，经度范围在 [0, 180) 度的标识为 1;\n2. 继续划分，经度范围在 [0,90) 的标识为 0，经度范围在 [90,180) 的标识为 1;\n3. 这样，我们划分 15 次，得到经度的标识二进制串为110101100101101;\n4. 对纬度同样划分，得到纬度的标识二进制串为101011000101110;\n5. 按照“偶数位放经度，奇数位放纬度”的规则，重新组合经度和纬度的二进制串，11100 11001 00011 00111 10110\n6. 转换成十进制是 28 25 28 3 7 22，查表编码得到最终结果，wtw37q;\n\n![](/images/geohash/4.png)\n\n![](/images/geohash/5.png)\n\n![](/images/geohash/6.png)\n\n之后，作出查询时，就是：\n\n```\nselect id from positions where geoHash like \"wtw37%\";\n```\n\n### 问题\n\n1. Z 阶曲线有一个比较严重的问题，虽然有局部保序性，但是它也有突变性。在每个 Z 字母的拐角，都有可能出现顺序的突变。\n![](/images/geohash/7.png)\n看上图中标注出来的蓝色的点点。每两个点虽然是相邻的，但是距离相隔很远。看右下角的图，两个数值邻近红色的点两者距离几乎达到了整个正方形的边长。两个数值邻近绿色的点也达到了正方形的一半的长度。\n\n>获取到的点都按勾股定理算一算，排除不合理的点\n\n2. Geohash 的另外一个缺点是，如果选择不好合适的网格大小，判断邻近点可能会比较麻烦。\n![](/images/geohash/8.png)\n\n>![](/images/geohash/9.png)\n>仔细观察相邻方格，我们会发现两个小方格会在 经度或纬度的二进制码上相差1；我们通过 GeoHash 码反向解析出二进制码后，将其经度或纬度（或两者）的二进制码加一、减一，再次组合为 GeoHash码。然后获取到的点都按勾股定理算一算，排除不合理的点\n\n\n## 使用\n\n![](/images/geohash/10.png)","slug":"geohash","published":1,"updated":"2019-08-29T01:32:47.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4uw000buaidy7c6bxzt","content":"<p>对于地图元素，通常使用经纬度坐标表示，经度为（-180，180], 纬度为（-90， 90]。对于计算确定几个点互相之间的距离时，使用勾股定理足以。</p>\n<p>但如果要计算距离某点一定范围内有多少个点时，“遍历所有的点计算出距离再做比对”在性能上肯定无法令人接受。<br>所以，这种时候，可以考虑直接使用sql划分矩形：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from positions where x0-r &lt; x &lt; x0+r and y0-r &lt; y &lt; y0+r</span><br></pre></td></tr></table></figure>\n\n<p>不过，这种查询方式，在高并发场景，性能可能仍然达不到要求</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/geohash/1.png\" alt></p>\n<h2 id=\"geohash\"><a href=\"#geohash\" class=\"headerlink\" title=\"geohash\"></a>geohash</h2><p>业界比较通用的地理位置距离排序算法是 GeoHash 算法。</p>\n<p>以一句话总结的话：GeoHash 算法将二维的经纬度数据映射到一维的整数，这样所有的元素都将在挂载到一条线上，距离靠近的二维坐标映射到一维后的点之间距离也会很接近。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p><img src=\"/images/geohash/2.png\" alt></p>\n<p><img src=\"/images/geohash/3.png\" alt></p>\n<p>假设有一个点[31.1932993, 121.43960190000007]，则：</p>\n<ol>\n<li>经度在 [-180,0) 范围内的标识为0，经度范围在 [0, 180) 度的标识为 1;</li>\n<li>继续划分，经度范围在 [0,90) 的标识为 0，经度范围在 [90,180) 的标识为 1;</li>\n<li>这样，我们划分 15 次，得到经度的标识二进制串为110101100101101;</li>\n<li>对纬度同样划分，得到纬度的标识二进制串为101011000101110;</li>\n<li>按照“偶数位放经度，奇数位放纬度”的规则，重新组合经度和纬度的二进制串，11100 11001 00011 00111 10110</li>\n<li>转换成十进制是 28 25 28 3 7 22，查表编码得到最终结果，wtw37q;</li>\n</ol>\n<p><img src=\"/images/geohash/4.png\" alt></p>\n<p><img src=\"/images/geohash/5.png\" alt></p>\n<p><img src=\"/images/geohash/6.png\" alt></p>\n<p>之后，作出查询时，就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from positions where geoHash like &quot;wtw37%&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ol>\n<li>Z 阶曲线有一个比较严重的问题，虽然有局部保序性，但是它也有突变性。在每个 Z 字母的拐角，都有可能出现顺序的突变。<br><img src=\"/images/geohash/7.png\" alt><br>看上图中标注出来的蓝色的点点。每两个点虽然是相邻的，但是距离相隔很远。看右下角的图，两个数值邻近红色的点两者距离几乎达到了整个正方形的边长。两个数值邻近绿色的点也达到了正方形的一半的长度。</li>\n</ol>\n<blockquote>\n<p>获取到的点都按勾股定理算一算，排除不合理的点</p>\n</blockquote>\n<ol start=\"2\">\n<li>Geohash 的另外一个缺点是，如果选择不好合适的网格大小，判断邻近点可能会比较麻烦。<br><img src=\"/images/geohash/8.png\" alt></li>\n</ol>\n<blockquote>\n<p><img src=\"/images/geohash/9.png\" alt><br>仔细观察相邻方格，我们会发现两个小方格会在 经度或纬度的二进制码上相差1；我们通过 GeoHash 码反向解析出二进制码后，将其经度或纬度（或两者）的二进制码加一、减一，再次组合为 GeoHash码。然后获取到的点都按勾股定理算一算，排除不合理的点</p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><img src=\"/images/geohash/10.png\" alt></p>\n","site":{"data":{}},"length":1117,"excerpt":"<p>对于地图元素，通常使用经纬度坐标表示，经度为（-180，180], 纬度为（-90， 90]。对于计算确定几个点互相之间的距离时，使用勾股定理足以。</p>\n<p>但如果要计算距离某点一定范围内有多少个点时，“遍历所有的点计算出距离再做比对”在性能上肯定无法令人接受。<br>所以，这种时候，可以考虑直接使用sql划分矩形：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from positions where x0-r &lt; x &lt; x0+r and y0-r &lt; y &lt; y0+r</span><br></pre></td></tr></table></figure>\n\n<p>不过，这种查询方式，在高并发场景，性能可能仍然达不到要求</p>","more":"<p><img src=\"/images/geohash/1.png\" alt></p>\n<h2 id=\"geohash\"><a href=\"#geohash\" class=\"headerlink\" title=\"geohash\"></a>geohash</h2><p>业界比较通用的地理位置距离排序算法是 GeoHash 算法。</p>\n<p>以一句话总结的话：GeoHash 算法将二维的经纬度数据映射到一维的整数，这样所有的元素都将在挂载到一条线上，距离靠近的二维坐标映射到一维后的点之间距离也会很接近。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p><img src=\"/images/geohash/2.png\" alt></p>\n<p><img src=\"/images/geohash/3.png\" alt></p>\n<p>假设有一个点[31.1932993, 121.43960190000007]，则：</p>\n<ol>\n<li>经度在 [-180,0) 范围内的标识为0，经度范围在 [0, 180) 度的标识为 1;</li>\n<li>继续划分，经度范围在 [0,90) 的标识为 0，经度范围在 [90,180) 的标识为 1;</li>\n<li>这样，我们划分 15 次，得到经度的标识二进制串为110101100101101;</li>\n<li>对纬度同样划分，得到纬度的标识二进制串为101011000101110;</li>\n<li>按照“偶数位放经度，奇数位放纬度”的规则，重新组合经度和纬度的二进制串，11100 11001 00011 00111 10110</li>\n<li>转换成十进制是 28 25 28 3 7 22，查表编码得到最终结果，wtw37q;</li>\n</ol>\n<p><img src=\"/images/geohash/4.png\" alt></p>\n<p><img src=\"/images/geohash/5.png\" alt></p>\n<p><img src=\"/images/geohash/6.png\" alt></p>\n<p>之后，作出查询时，就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from positions where geoHash like &quot;wtw37%&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ol>\n<li>Z 阶曲线有一个比较严重的问题，虽然有局部保序性，但是它也有突变性。在每个 Z 字母的拐角，都有可能出现顺序的突变。<br><img src=\"/images/geohash/7.png\" alt><br>看上图中标注出来的蓝色的点点。每两个点虽然是相邻的，但是距离相隔很远。看右下角的图，两个数值邻近红色的点两者距离几乎达到了整个正方形的边长。两个数值邻近绿色的点也达到了正方形的一半的长度。</li>\n</ol>\n<blockquote>\n<p>获取到的点都按勾股定理算一算，排除不合理的点</p>\n</blockquote>\n<ol start=\"2\">\n<li>Geohash 的另外一个缺点是，如果选择不好合适的网格大小，判断邻近点可能会比较麻烦。<br><img src=\"/images/geohash/8.png\" alt></li>\n</ol>\n<blockquote>\n<p><img src=\"/images/geohash/9.png\" alt><br>仔细观察相邻方格，我们会发现两个小方格会在 经度或纬度的二进制码上相差1；我们通过 GeoHash 码反向解析出二进制码后，将其经度或纬度（或两者）的二进制码加一、减一，再次组合为 GeoHash码。然后获取到的点都按勾股定理算一算，排除不合理的点</p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><img src=\"/images/geohash/10.png\" alt></p>"},{"title":"iframe踩坑记录","date":"2018-10-11T07:32:58.000Z","_content":"\n以现代web页面最佳实践而言，iframe是属于应该尽量避免使用的东西。\n\n不过，在人力资源和产出需求相矛盾的情况下，iframe又是解决这一矛盾的利器。\n<escape><!-- more --></escape>\n\n## 背景\n\n在一个纯展示推广页中，有个区域，固定展示之前已经做好的另一页面里的部分内容，且此区域不可滚动。\n\n之前已做好的页面实际上在另一站点，逻辑较为复杂，业务耦合度高，很多业务并未抽出做成公用服务。\n\n当前推广站点若要重构相关内容，花费的代价会比较大。经讨论，决定使用iframe载入相关需要展示的页面。\n\n## 问题记录\n\n#### 使用html2canvas生成长图用于分享无法实现\n    \n- 问题背景：产品希望实时根据页面内容生成长图，引导用户分享长图\n\n- 结论：iframe里面的内容无法被解析，所以这个需求点只能放弃\n\n#### iOS webview中无法对iframe的高度进行设置\n\n- 问题背景：iframe载入的目标页面有很多内容，而我们需要的只是其中一小部分。所以我们要根据推广页的宽度，计算出可展示内容的高度，然后对iframe的高度作出限制，且iframe不可被滚动\n    \n- 原因：对iframe的height属性做设置，在iOS中会失效。\n    \n- 结论：另行生成一个style标签（高度需要实时计算，所以style标签由javascript生成），里面有iframe的高度限制，再插入head标签中\n    \n#### 安卓webview中，iframe onload事件失效\n\n- 问题背景：产品希望iframe载入相关内容时，未载入完全时，展示loading动画\n    \n- 原因：某些安卓webview中，iframe onload事件失效。iframe实际已经加载完毕，但一只不触发onload事件，于是页面相关区域就一直loading中。在用户看来，iframe区域一直loading，感觉就是“明显有bug”。\n    \n- 结论：牺牲掉这个loading动画，让webview一直展示。","source":"_posts/iframe-bug.md","raw":"---\ntitle: iframe踩坑记录\ndate: 2018-10-11 15:32:58\ntags: [iframe, bug fix]\n---\n\n以现代web页面最佳实践而言，iframe是属于应该尽量避免使用的东西。\n\n不过，在人力资源和产出需求相矛盾的情况下，iframe又是解决这一矛盾的利器。\n<escape><!-- more --></escape>\n\n## 背景\n\n在一个纯展示推广页中，有个区域，固定展示之前已经做好的另一页面里的部分内容，且此区域不可滚动。\n\n之前已做好的页面实际上在另一站点，逻辑较为复杂，业务耦合度高，很多业务并未抽出做成公用服务。\n\n当前推广站点若要重构相关内容，花费的代价会比较大。经讨论，决定使用iframe载入相关需要展示的页面。\n\n## 问题记录\n\n#### 使用html2canvas生成长图用于分享无法实现\n    \n- 问题背景：产品希望实时根据页面内容生成长图，引导用户分享长图\n\n- 结论：iframe里面的内容无法被解析，所以这个需求点只能放弃\n\n#### iOS webview中无法对iframe的高度进行设置\n\n- 问题背景：iframe载入的目标页面有很多内容，而我们需要的只是其中一小部分。所以我们要根据推广页的宽度，计算出可展示内容的高度，然后对iframe的高度作出限制，且iframe不可被滚动\n    \n- 原因：对iframe的height属性做设置，在iOS中会失效。\n    \n- 结论：另行生成一个style标签（高度需要实时计算，所以style标签由javascript生成），里面有iframe的高度限制，再插入head标签中\n    \n#### 安卓webview中，iframe onload事件失效\n\n- 问题背景：产品希望iframe载入相关内容时，未载入完全时，展示loading动画\n    \n- 原因：某些安卓webview中，iframe onload事件失效。iframe实际已经加载完毕，但一只不触发onload事件，于是页面相关区域就一直loading中。在用户看来，iframe区域一直loading，感觉就是“明显有bug”。\n    \n- 结论：牺牲掉这个loading动画，让webview一直展示。","slug":"iframe-bug","published":1,"updated":"2019-08-29T01:32:47.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4ux000cuaidm9paxe0i","content":"<p>以现代web页面最佳实践而言，iframe是属于应该尽量避免使用的东西。</p>\n<p>不过，在人力资源和产出需求相矛盾的情况下，iframe又是解决这一矛盾的利器。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在一个纯展示推广页中，有个区域，固定展示之前已经做好的另一页面里的部分内容，且此区域不可滚动。</p>\n<p>之前已做好的页面实际上在另一站点，逻辑较为复杂，业务耦合度高，很多业务并未抽出做成公用服务。</p>\n<p>当前推广站点若要重构相关内容，花费的代价会比较大。经讨论，决定使用iframe载入相关需要展示的页面。</p>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><h4 id=\"使用html2canvas生成长图用于分享无法实现\"><a href=\"#使用html2canvas生成长图用于分享无法实现\" class=\"headerlink\" title=\"使用html2canvas生成长图用于分享无法实现\"></a>使用html2canvas生成长图用于分享无法实现</h4><ul>\n<li><p>问题背景：产品希望实时根据页面内容生成长图，引导用户分享长图</p>\n</li>\n<li><p>结论：iframe里面的内容无法被解析，所以这个需求点只能放弃</p>\n</li>\n</ul>\n<h4 id=\"iOS-webview中无法对iframe的高度进行设置\"><a href=\"#iOS-webview中无法对iframe的高度进行设置\" class=\"headerlink\" title=\"iOS webview中无法对iframe的高度进行设置\"></a>iOS webview中无法对iframe的高度进行设置</h4><ul>\n<li><p>问题背景：iframe载入的目标页面有很多内容，而我们需要的只是其中一小部分。所以我们要根据推广页的宽度，计算出可展示内容的高度，然后对iframe的高度作出限制，且iframe不可被滚动</p>\n</li>\n<li><p>原因：对iframe的height属性做设置，在iOS中会失效。</p>\n</li>\n<li><p>结论：另行生成一个style标签（高度需要实时计算，所以style标签由javascript生成），里面有iframe的高度限制，再插入head标签中</p>\n</li>\n</ul>\n<h4 id=\"安卓webview中，iframe-onload事件失效\"><a href=\"#安卓webview中，iframe-onload事件失效\" class=\"headerlink\" title=\"安卓webview中，iframe onload事件失效\"></a>安卓webview中，iframe onload事件失效</h4><ul>\n<li><p>问题背景：产品希望iframe载入相关内容时，未载入完全时，展示loading动画</p>\n</li>\n<li><p>原因：某些安卓webview中，iframe onload事件失效。iframe实际已经加载完毕，但一只不触发onload事件，于是页面相关区域就一直loading中。在用户看来，iframe区域一直loading，感觉就是“明显有bug”。</p>\n</li>\n<li><p>结论：牺牲掉这个loading动画，让webview一直展示。</p>\n</li>\n</ul>\n","site":{"data":{}},"length":761,"excerpt":"<p>以现代web页面最佳实践而言，iframe是属于应该尽量避免使用的东西。</p>\n<p>不过，在人力资源和产出需求相矛盾的情况下，iframe又是解决这一矛盾的利器。</p>","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在一个纯展示推广页中，有个区域，固定展示之前已经做好的另一页面里的部分内容，且此区域不可滚动。</p>\n<p>之前已做好的页面实际上在另一站点，逻辑较为复杂，业务耦合度高，很多业务并未抽出做成公用服务。</p>\n<p>当前推广站点若要重构相关内容，花费的代价会比较大。经讨论，决定使用iframe载入相关需要展示的页面。</p>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><h4 id=\"使用html2canvas生成长图用于分享无法实现\"><a href=\"#使用html2canvas生成长图用于分享无法实现\" class=\"headerlink\" title=\"使用html2canvas生成长图用于分享无法实现\"></a>使用html2canvas生成长图用于分享无法实现</h4><ul>\n<li><p>问题背景：产品希望实时根据页面内容生成长图，引导用户分享长图</p>\n</li>\n<li><p>结论：iframe里面的内容无法被解析，所以这个需求点只能放弃</p>\n</li>\n</ul>\n<h4 id=\"iOS-webview中无法对iframe的高度进行设置\"><a href=\"#iOS-webview中无法对iframe的高度进行设置\" class=\"headerlink\" title=\"iOS webview中无法对iframe的高度进行设置\"></a>iOS webview中无法对iframe的高度进行设置</h4><ul>\n<li><p>问题背景：iframe载入的目标页面有很多内容，而我们需要的只是其中一小部分。所以我们要根据推广页的宽度，计算出可展示内容的高度，然后对iframe的高度作出限制，且iframe不可被滚动</p>\n</li>\n<li><p>原因：对iframe的height属性做设置，在iOS中会失效。</p>\n</li>\n<li><p>结论：另行生成一个style标签（高度需要实时计算，所以style标签由javascript生成），里面有iframe的高度限制，再插入head标签中</p>\n</li>\n</ul>\n<h4 id=\"安卓webview中，iframe-onload事件失效\"><a href=\"#安卓webview中，iframe-onload事件失效\" class=\"headerlink\" title=\"安卓webview中，iframe onload事件失效\"></a>安卓webview中，iframe onload事件失效</h4><ul>\n<li><p>问题背景：产品希望iframe载入相关内容时，未载入完全时，展示loading动画</p>\n</li>\n<li><p>原因：某些安卓webview中，iframe onload事件失效。iframe实际已经加载完毕，但一只不触发onload事件，于是页面相关区域就一直loading中。在用户看来，iframe区域一直loading，感觉就是“明显有bug”。</p>\n</li>\n<li><p>结论：牺牲掉这个loading动画，让webview一直展示。</p>\n</li>\n</ul>"},{"title":"职责链模式","date":"2018-07-03T12:06:58.000Z","_content":"\n职责链模式使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间 5 的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。\n<escape><!-- more --></escape>\n\n## 一个常见的场景\n\n```javascript\nif(type1){\n    if(type2 === 1){\n        //do something\n    }\n    if(type2 === 2){\n        //do something\n    }\n    if(type2 === 3){\n        //do something\n    }\n} else {\n    if(type2 === 4){\n        //dom something\n    }\n}\n```\n\n增强一点可读性：\n\n```javascript\nif(type1 && type2 === 1){\n    //do something\n}\nif(type1 && type2 === 2){\n    //do something\n}\nif(type1 && type2 === 3){\n    //do something\n}\nif(!type1 && type2 === 4){\n    //dom something\n}\n```\n\n上面的判断逻辑十分常见，是程序后续运营维护的噩梦之一。当业务复杂度开始膨胀后，这样的判断逻辑代码会变得十分难读，修改起来也是非常困难。随着版本的迭代与开发人员的变更，这样的判断逻辑代码最后有可能变成无人敢动的代码块。\n\n## 使用职责链模式进行重构\n\n观察上面的原始代码，可以看到总共有4个判断条件。要把这些判断条件都构造成节点，串联成一个职责链，则这些节点，都必须暴露出一个相同的接口。\n\n先构建4个判断函数\n\n```javascript\nfunction condition1(type1, type2){\n    if(type1 && type2 === 1){\n    //do something\n    } else {\n        return 'next';\n    }\n}\nfunction condition2(type1, type2){\n    if(type1 && type2 === 2){\n    //do something\n    } else {\n        return 'next';\n    }\n}\nfunction condition3(type1, type2){\n    if(type1 && type2 === 3){\n    //do something\n    } else {\n        return 'next';\n    }\n}\nfunction condition4(type1, type2){\n    if(!type1 && type2 === 4){\n    //do something\n    } else {\n        return 'next';\n    }\n}\n```\n\n建立节点类，用于实例化节点\n\n```javascript\nfunction Chain(fn){\n    this.fn = fn;\n    this.nextCall = null;\n}\nChain.prototype.setNextCall = function(fn){\n    this.nextCall = fn;\n};\nChain.prototype.request = function(){\n    var ret = this.fn.apply(this, arguments);\n\n    if(ret === 'next'){\n        return this.nextCall && this.nextCall.request.apply(this.nextCall, arguments);\n    }\n};\n```\n\n于是，可以构成职责链：\n\n```javascript\nvar chain1 = new Chain(conditin1);\nvar chain2 = new Chain(conditin2);\nvar chain3 = new Chain(conditin3);\nvar chain4 = new Chain(conditin4);\n\nchain1.setNextCall(chain2);\nchain2.setNextCall(chain3);\nchain3.setNextCall(chain4);\n\nchain1.request(false, 4);\n```\n\n## 异步职责链\n\n当判断函数需要通过异步请求结果才能知道是否调用下一个判断函数时，节点对象自身需要有一个主动调用下一个节点的方法\n```javascript\nChain.prototype.next = function(){\n    return this.nextCall && this.nextCall.request.apply(this.nextCall, arguments);\n};\n```\n\nexample:\n```javascript\nfunction condition5(type1, type2){\n    var self = this;\n    fetch('/abc.com?type1=' + type1 + '&type2=' + type2).then(function(resp){\n        if(resp.code === 0){\n            //do something\n        } else {\n            self.next();\n        }\n    })\n}\nvar chain5 = new Chain(condition5);\nchain5.setNextCall(chain1);\nchain5.request(false, 4);\n```","source":"_posts/chain-pattern.md","raw":"---\ntitle: 职责链模式\ndate: 2018-07-03 20:06:58\ntags: [设计模式]\n---\n\n职责链模式使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间 5 的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。\n<escape><!-- more --></escape>\n\n## 一个常见的场景\n\n```javascript\nif(type1){\n    if(type2 === 1){\n        //do something\n    }\n    if(type2 === 2){\n        //do something\n    }\n    if(type2 === 3){\n        //do something\n    }\n} else {\n    if(type2 === 4){\n        //dom something\n    }\n}\n```\n\n增强一点可读性：\n\n```javascript\nif(type1 && type2 === 1){\n    //do something\n}\nif(type1 && type2 === 2){\n    //do something\n}\nif(type1 && type2 === 3){\n    //do something\n}\nif(!type1 && type2 === 4){\n    //dom something\n}\n```\n\n上面的判断逻辑十分常见，是程序后续运营维护的噩梦之一。当业务复杂度开始膨胀后，这样的判断逻辑代码会变得十分难读，修改起来也是非常困难。随着版本的迭代与开发人员的变更，这样的判断逻辑代码最后有可能变成无人敢动的代码块。\n\n## 使用职责链模式进行重构\n\n观察上面的原始代码，可以看到总共有4个判断条件。要把这些判断条件都构造成节点，串联成一个职责链，则这些节点，都必须暴露出一个相同的接口。\n\n先构建4个判断函数\n\n```javascript\nfunction condition1(type1, type2){\n    if(type1 && type2 === 1){\n    //do something\n    } else {\n        return 'next';\n    }\n}\nfunction condition2(type1, type2){\n    if(type1 && type2 === 2){\n    //do something\n    } else {\n        return 'next';\n    }\n}\nfunction condition3(type1, type2){\n    if(type1 && type2 === 3){\n    //do something\n    } else {\n        return 'next';\n    }\n}\nfunction condition4(type1, type2){\n    if(!type1 && type2 === 4){\n    //do something\n    } else {\n        return 'next';\n    }\n}\n```\n\n建立节点类，用于实例化节点\n\n```javascript\nfunction Chain(fn){\n    this.fn = fn;\n    this.nextCall = null;\n}\nChain.prototype.setNextCall = function(fn){\n    this.nextCall = fn;\n};\nChain.prototype.request = function(){\n    var ret = this.fn.apply(this, arguments);\n\n    if(ret === 'next'){\n        return this.nextCall && this.nextCall.request.apply(this.nextCall, arguments);\n    }\n};\n```\n\n于是，可以构成职责链：\n\n```javascript\nvar chain1 = new Chain(conditin1);\nvar chain2 = new Chain(conditin2);\nvar chain3 = new Chain(conditin3);\nvar chain4 = new Chain(conditin4);\n\nchain1.setNextCall(chain2);\nchain2.setNextCall(chain3);\nchain3.setNextCall(chain4);\n\nchain1.request(false, 4);\n```\n\n## 异步职责链\n\n当判断函数需要通过异步请求结果才能知道是否调用下一个判断函数时，节点对象自身需要有一个主动调用下一个节点的方法\n```javascript\nChain.prototype.next = function(){\n    return this.nextCall && this.nextCall.request.apply(this.nextCall, arguments);\n};\n```\n\nexample:\n```javascript\nfunction condition5(type1, type2){\n    var self = this;\n    fetch('/abc.com?type1=' + type1 + '&type2=' + type2).then(function(resp){\n        if(resp.code === 0){\n            //do something\n        } else {\n            self.next();\n        }\n    })\n}\nvar chain5 = new Chain(condition5);\nchain5.setNextCall(chain1);\nchain5.request(false, 4);\n```","slug":"chain-pattern","published":1,"updated":"2019-08-29T01:32:47.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4v0000euaidsv4yewwx","content":"<p>职责链模式使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间 5 的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"一个常见的场景\"><a href=\"#一个常见的场景\" class=\"headerlink\" title=\"一个常见的场景\"></a>一个常见的场景</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(type1)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type2 === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type2 === <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type2 === <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type2 === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//dom something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>增强一点可读性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(type1 &amp;&amp; type2 === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(type1 &amp;&amp; type2 === <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(type1 &amp;&amp; type2 === <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!type1 &amp;&amp; type2 === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//dom something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的判断逻辑十分常见，是程序后续运营维护的噩梦之一。当业务复杂度开始膨胀后，这样的判断逻辑代码会变得十分难读，修改起来也是非常困难。随着版本的迭代与开发人员的变更，这样的判断逻辑代码最后有可能变成无人敢动的代码块。</p>\n<h2 id=\"使用职责链模式进行重构\"><a href=\"#使用职责链模式进行重构\" class=\"headerlink\" title=\"使用职责链模式进行重构\"></a>使用职责链模式进行重构</h2><p>观察上面的原始代码，可以看到总共有4个判断条件。要把这些判断条件都构造成节点，串联成一个职责链，则这些节点，都必须暴露出一个相同的接口。</p>\n<p>先构建4个判断函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">condition1</span>(<span class=\"params\">type1, type2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type1 &amp;&amp; type2 === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'next'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">condition2</span>(<span class=\"params\">type1, type2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type1 &amp;&amp; type2 === <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'next'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">condition3</span>(<span class=\"params\">type1, type2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type1 &amp;&amp; type2 === <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'next'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">condition4</span>(<span class=\"params\">type1, type2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!type1 &amp;&amp; type2 === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'next'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>建立节点类，用于实例化节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Chain</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fn = fn;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.nextCall = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Chain.prototype.setNextCall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.nextCall = fn;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Chain.prototype.request = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"keyword\">this</span>.fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret === <span class=\"string\">'next'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nextCall &amp;&amp; <span class=\"keyword\">this</span>.nextCall.request.apply(<span class=\"keyword\">this</span>.nextCall, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>于是，可以构成职责链：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> chain1 = <span class=\"keyword\">new</span> Chain(conditin1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> chain2 = <span class=\"keyword\">new</span> Chain(conditin2);</span><br><span class=\"line\"><span class=\"keyword\">var</span> chain3 = <span class=\"keyword\">new</span> Chain(conditin3);</span><br><span class=\"line\"><span class=\"keyword\">var</span> chain4 = <span class=\"keyword\">new</span> Chain(conditin4);</span><br><span class=\"line\"></span><br><span class=\"line\">chain1.setNextCall(chain2);</span><br><span class=\"line\">chain2.setNextCall(chain3);</span><br><span class=\"line\">chain3.setNextCall(chain4);</span><br><span class=\"line\"></span><br><span class=\"line\">chain1.request(<span class=\"literal\">false</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步职责链\"><a href=\"#异步职责链\" class=\"headerlink\" title=\"异步职责链\"></a>异步职责链</h2><p>当判断函数需要通过异步请求结果才能知道是否调用下一个判断函数时，节点对象自身需要有一个主动调用下一个节点的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Chain.prototype.next = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nextCall &amp;&amp; <span class=\"keyword\">this</span>.nextCall.request.apply(<span class=\"keyword\">this</span>.nextCall, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">condition5</span>(<span class=\"params\">type1, type2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    fetch(<span class=\"string\">'/abc.com?type1='</span> + type1 + <span class=\"string\">'&amp;type2='</span> + type2).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resp.code === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//do something</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            self.next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> chain5 = <span class=\"keyword\">new</span> Chain(condition5);</span><br><span class=\"line\">chain5.setNextCall(chain1);</span><br><span class=\"line\">chain5.request(<span class=\"literal\">false</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2797,"excerpt":"<p>职责链模式使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间 5 的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>","more":"<h2 id=\"一个常见的场景\"><a href=\"#一个常见的场景\" class=\"headerlink\" title=\"一个常见的场景\"></a>一个常见的场景</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(type1)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type2 === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type2 === <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type2 === <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type2 === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//dom something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>增强一点可读性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(type1 &amp;&amp; type2 === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(type1 &amp;&amp; type2 === <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(type1 &amp;&amp; type2 === <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!type1 &amp;&amp; type2 === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//dom something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的判断逻辑十分常见，是程序后续运营维护的噩梦之一。当业务复杂度开始膨胀后，这样的判断逻辑代码会变得十分难读，修改起来也是非常困难。随着版本的迭代与开发人员的变更，这样的判断逻辑代码最后有可能变成无人敢动的代码块。</p>\n<h2 id=\"使用职责链模式进行重构\"><a href=\"#使用职责链模式进行重构\" class=\"headerlink\" title=\"使用职责链模式进行重构\"></a>使用职责链模式进行重构</h2><p>观察上面的原始代码，可以看到总共有4个判断条件。要把这些判断条件都构造成节点，串联成一个职责链，则这些节点，都必须暴露出一个相同的接口。</p>\n<p>先构建4个判断函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">condition1</span>(<span class=\"params\">type1, type2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type1 &amp;&amp; type2 === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'next'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">condition2</span>(<span class=\"params\">type1, type2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type1 &amp;&amp; type2 === <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'next'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">condition3</span>(<span class=\"params\">type1, type2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type1 &amp;&amp; type2 === <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'next'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">condition4</span>(<span class=\"params\">type1, type2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!type1 &amp;&amp; type2 === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'next'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>建立节点类，用于实例化节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Chain</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fn = fn;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.nextCall = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Chain.prototype.setNextCall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.nextCall = fn;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Chain.prototype.request = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"keyword\">this</span>.fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret === <span class=\"string\">'next'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nextCall &amp;&amp; <span class=\"keyword\">this</span>.nextCall.request.apply(<span class=\"keyword\">this</span>.nextCall, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>于是，可以构成职责链：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> chain1 = <span class=\"keyword\">new</span> Chain(conditin1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> chain2 = <span class=\"keyword\">new</span> Chain(conditin2);</span><br><span class=\"line\"><span class=\"keyword\">var</span> chain3 = <span class=\"keyword\">new</span> Chain(conditin3);</span><br><span class=\"line\"><span class=\"keyword\">var</span> chain4 = <span class=\"keyword\">new</span> Chain(conditin4);</span><br><span class=\"line\"></span><br><span class=\"line\">chain1.setNextCall(chain2);</span><br><span class=\"line\">chain2.setNextCall(chain3);</span><br><span class=\"line\">chain3.setNextCall(chain4);</span><br><span class=\"line\"></span><br><span class=\"line\">chain1.request(<span class=\"literal\">false</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步职责链\"><a href=\"#异步职责链\" class=\"headerlink\" title=\"异步职责链\"></a>异步职责链</h2><p>当判断函数需要通过异步请求结果才能知道是否调用下一个判断函数时，节点对象自身需要有一个主动调用下一个节点的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Chain.prototype.next = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nextCall &amp;&amp; <span class=\"keyword\">this</span>.nextCall.request.apply(<span class=\"keyword\">this</span>.nextCall, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">condition5</span>(<span class=\"params\">type1, type2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    fetch(<span class=\"string\">'/abc.com?type1='</span> + type1 + <span class=\"string\">'&amp;type2='</span> + type2).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resp.code === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//do something</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            self.next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> chain5 = <span class=\"keyword\">new</span> Chain(condition5);</span><br><span class=\"line\">chain5.setNextCall(chain1);</span><br><span class=\"line\">chain5.request(<span class=\"literal\">false</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>"},{"title":"数据绑定方案收集","date":"2018-03-12T07:28:58.000Z","_content":"\n## 封装属性访问器 \n\n```javascript\n//Object.defineProperty(obj, prop, descriptor)  \n//obj ，待修改的对象  \n//prop ，带修改的属性名称  \n//descriptor ，待修改属性的相关描述  \nvar obj = {};\nObject.defineProperty(obj,'a',{  \n    set:function(newVal){  \n        document.getElementById('a').value = newVal;  \n        document.getElementById('b').innerHTML = newVal;  \n    }  \n});  \n    \ndocument.addEventListener('keyup',function(e){  \n    obj.a = e.target.value;  \n});\n```\n<escape><!-- more --></escape>\n\n>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。存取描述符是由getter-setter函数对描述的属性。描述符必须是这两种形式之一；不能同时是两者。\n\n### 数据描述符和存取描述符均具有以下可选键值：\n\n- configurable\n\n当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 false。\n\n- enumerable\n\n当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中。默认为 false。\n\n### 数据描述符同时具有以下可选键值：\n\n- value\n\n该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。\n\n- writable\n\n当且仅当该属性的writable为true时，value才能被赋值运算符改变。默认为 false。\n\n### 存取描述符同时具有以下可选键值：\n\n- get\n\n一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。该方法返回值被用作属性值。默认为 undefined。\n\n- set\n\n一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认为 undefined。\n\n>如果一个描述符不具有value,writable,get 和 set 任意一个关键字，那么它将被认为是一个数据描述符。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。\n\n## angular 1.x 的数据绑定原理\n\n在未引入angluar1.x的情况下，要实现angular1.x的数据绑定设计，大概会是下面这样：\n\n```javascript\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>two-way binding</title>\n    </head>\n    <body onload=\"init()\">\n        <button ng-click=\"inc\">\n            increase 1\n        </button>\n        <button ng-click=\"inc2\">\n            increase 2\n        </button>\n        <span style=\"color:red\" ng-bind=\"counter\"></span>\n        <span style=\"color:blue\" ng-bind=\"counter\"></span>\n        <span style=\"color:green\" ng-bind=\"counter\"></span>\n\n        <script type=\"text/javascript\">\n            /* 数据模型区开始 */\n            var counter = 0;\n\n            function inc() {\n                counter++;\n            }\n\n            function inc2() {\n                counter+=2;\n            }\n            /* 数据模型区结束 */\n\n            /* 绑定关系区开始 */\n            function init() {\n                bind();\n            }\n\n            function bind() {\n                var list = document.querySelectorAll(\"[ng-click]\");\n                for (var i=0; i<list.length; i++) {\n                    list[i].onclick = (function(index) {\n                        return function() {\n                            window[list[index].getAttribute(\"ng-click\")]();\n                            apply();\n                        };\n                    })(i);\n                }\n            }\n\n            function apply() {\n                var list = document.querySelectorAll(\"[ng-bind='counter']\");\n                for (var i=0; i<list.length; i++) {\n                    list[i].innerHTML = counter;\n                }\n            }\n            /* 绑定关系区结束 */\n        </script>\n    </body>\n</html>\n```\n\n## ECMA2015的新特性Proxy\n\n```javascript\nlet validator = {\n  set: function(obj, prop, value) {\n    if (prop === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // The default behavior to store the value\n    obj[prop] = value;\n\n    // Indicate success\n    return true;\n  }\n};\n\nlet person = new Proxy({}, validator);\n\nperson.age = 100;\nconsole.log(person.age); // 100\nperson.age = 'young'; // Throws an exception\nperson.age = 300; // Throws an exception\n```\n\n## 几个被废弃的方案\n\n### 1\nObject.observe(obj, callback[, acceptList]) 方法对对象（或者其属性）进行监控观察，一旦其发生变化时，将会执行相应的handler。\n\n现在 Object.observe 将不加入es7 [An update on Object.observe](https://mail.mozilla.org/pipermail/es-discuss/2015-November/044684.html)\n\n### 2\nObject.prototype.watch(prop, handler) 方法对对象属性进行监控观察，一旦其发生变化时，将会执行相应的handler。\n\n此方法只在Firefox 58之前的Firefox中实现，其余浏览器及浏览器版本均不实现此方法 [Object.prototype.watch()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch)","source":"_posts/data-binding.md","raw":"---\ntitle: 数据绑定方案收集\ndate: 2018-03-12 15:28:58\ntags: [设计模式]\n---\n\n## 封装属性访问器 \n\n```javascript\n//Object.defineProperty(obj, prop, descriptor)  \n//obj ，待修改的对象  \n//prop ，带修改的属性名称  \n//descriptor ，待修改属性的相关描述  \nvar obj = {};\nObject.defineProperty(obj,'a',{  \n    set:function(newVal){  \n        document.getElementById('a').value = newVal;  \n        document.getElementById('b').innerHTML = newVal;  \n    }  \n});  \n    \ndocument.addEventListener('keyup',function(e){  \n    obj.a = e.target.value;  \n});\n```\n<escape><!-- more --></escape>\n\n>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。存取描述符是由getter-setter函数对描述的属性。描述符必须是这两种形式之一；不能同时是两者。\n\n### 数据描述符和存取描述符均具有以下可选键值：\n\n- configurable\n\n当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 false。\n\n- enumerable\n\n当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中。默认为 false。\n\n### 数据描述符同时具有以下可选键值：\n\n- value\n\n该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。\n\n- writable\n\n当且仅当该属性的writable为true时，value才能被赋值运算符改变。默认为 false。\n\n### 存取描述符同时具有以下可选键值：\n\n- get\n\n一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。该方法返回值被用作属性值。默认为 undefined。\n\n- set\n\n一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认为 undefined。\n\n>如果一个描述符不具有value,writable,get 和 set 任意一个关键字，那么它将被认为是一个数据描述符。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。\n\n## angular 1.x 的数据绑定原理\n\n在未引入angluar1.x的情况下，要实现angular1.x的数据绑定设计，大概会是下面这样：\n\n```javascript\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>two-way binding</title>\n    </head>\n    <body onload=\"init()\">\n        <button ng-click=\"inc\">\n            increase 1\n        </button>\n        <button ng-click=\"inc2\">\n            increase 2\n        </button>\n        <span style=\"color:red\" ng-bind=\"counter\"></span>\n        <span style=\"color:blue\" ng-bind=\"counter\"></span>\n        <span style=\"color:green\" ng-bind=\"counter\"></span>\n\n        <script type=\"text/javascript\">\n            /* 数据模型区开始 */\n            var counter = 0;\n\n            function inc() {\n                counter++;\n            }\n\n            function inc2() {\n                counter+=2;\n            }\n            /* 数据模型区结束 */\n\n            /* 绑定关系区开始 */\n            function init() {\n                bind();\n            }\n\n            function bind() {\n                var list = document.querySelectorAll(\"[ng-click]\");\n                for (var i=0; i<list.length; i++) {\n                    list[i].onclick = (function(index) {\n                        return function() {\n                            window[list[index].getAttribute(\"ng-click\")]();\n                            apply();\n                        };\n                    })(i);\n                }\n            }\n\n            function apply() {\n                var list = document.querySelectorAll(\"[ng-bind='counter']\");\n                for (var i=0; i<list.length; i++) {\n                    list[i].innerHTML = counter;\n                }\n            }\n            /* 绑定关系区结束 */\n        </script>\n    </body>\n</html>\n```\n\n## ECMA2015的新特性Proxy\n\n```javascript\nlet validator = {\n  set: function(obj, prop, value) {\n    if (prop === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // The default behavior to store the value\n    obj[prop] = value;\n\n    // Indicate success\n    return true;\n  }\n};\n\nlet person = new Proxy({}, validator);\n\nperson.age = 100;\nconsole.log(person.age); // 100\nperson.age = 'young'; // Throws an exception\nperson.age = 300; // Throws an exception\n```\n\n## 几个被废弃的方案\n\n### 1\nObject.observe(obj, callback[, acceptList]) 方法对对象（或者其属性）进行监控观察，一旦其发生变化时，将会执行相应的handler。\n\n现在 Object.observe 将不加入es7 [An update on Object.observe](https://mail.mozilla.org/pipermail/es-discuss/2015-November/044684.html)\n\n### 2\nObject.prototype.watch(prop, handler) 方法对对象属性进行监控观察，一旦其发生变化时，将会执行相应的handler。\n\n此方法只在Firefox 58之前的Firefox中实现，其余浏览器及浏览器版本均不实现此方法 [Object.prototype.watch()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch)","slug":"data-binding","published":1,"updated":"2019-08-28T08:06:24.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4v1000guaid1udqemdh","content":"<h2 id=\"封装属性访问器\"><a href=\"#封装属性访问器\" class=\"headerlink\" title=\"封装属性访问器\"></a>封装属性访问器</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Object.defineProperty(obj, prop, descriptor)  </span></span><br><span class=\"line\"><span class=\"comment\">//obj ，待修改的对象  </span></span><br><span class=\"line\"><span class=\"comment\">//prop ，带修改的属性名称  </span></span><br><span class=\"line\"><span class=\"comment\">//descriptor ，待修改属性的相关描述  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">'a'</span>,&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">set</span>:function(newVal)&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'a'</span>).value = newVal;  </span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'b'</span>).innerHTML = newVal;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </span><br><span class=\"line\">    obj.a = e.target.value;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<blockquote>\n<p>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。存取描述符是由getter-setter函数对描述的属性。描述符必须是这两种形式之一；不能同时是两者。</p>\n</blockquote>\n<h3 id=\"数据描述符和存取描述符均具有以下可选键值：\"><a href=\"#数据描述符和存取描述符均具有以下可选键值：\" class=\"headerlink\" title=\"数据描述符和存取描述符均具有以下可选键值：\"></a>数据描述符和存取描述符均具有以下可选键值：</h3><ul>\n<li>configurable</li>\n</ul>\n<p>当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 false。</p>\n<ul>\n<li>enumerable</li>\n</ul>\n<p>当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中。默认为 false。</p>\n<h3 id=\"数据描述符同时具有以下可选键值：\"><a href=\"#数据描述符同时具有以下可选键值：\" class=\"headerlink\" title=\"数据描述符同时具有以下可选键值：\"></a>数据描述符同时具有以下可选键值：</h3><ul>\n<li>value</li>\n</ul>\n<p>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。</p>\n<ul>\n<li>writable</li>\n</ul>\n<p>当且仅当该属性的writable为true时，value才能被赋值运算符改变。默认为 false。</p>\n<h3 id=\"存取描述符同时具有以下可选键值：\"><a href=\"#存取描述符同时具有以下可选键值：\" class=\"headerlink\" title=\"存取描述符同时具有以下可选键值：\"></a>存取描述符同时具有以下可选键值：</h3><ul>\n<li>get</li>\n</ul>\n<p>一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。该方法返回值被用作属性值。默认为 undefined。</p>\n<ul>\n<li>set</li>\n</ul>\n<p>一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认为 undefined。</p>\n<blockquote>\n<p>如果一个描述符不具有value,writable,get 和 set 任意一个关键字，那么它将被认为是一个数据描述符。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。</p>\n</blockquote>\n<h2 id=\"angular-1-x-的数据绑定原理\"><a href=\"#angular-1-x-的数据绑定原理\" class=\"headerlink\" title=\"angular 1.x 的数据绑定原理\"></a>angular 1.x 的数据绑定原理</h2><p>在未引入angluar1.x的情况下，要实现angular1.x的数据绑定设计，大概会是下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"utf-8\"</span> /&gt;</span><br><span class=\"line\">        &lt;title&gt;two-way binding&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>head&gt;</span><br><span class=\"line\">    &lt;body onload=<span class=\"string\">\"init()\"</span>&gt;</span><br><span class=\"line\">        &lt;button ng-click=<span class=\"string\">\"inc\"</span>&gt;</span><br><span class=\"line\">            increase <span class=\"number\">1</span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button ng-click=\"inc2\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            increase 2</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;span style=<span class=\"string\">\"color:red\"</span> ng-bind=<span class=\"string\">\"counter\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">        &lt;span style=<span class=\"string\">\"color:blue\"</span> ng-bind=<span class=\"string\">\"counter\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">        &lt;span style=<span class=\"string\">\"color:green\"</span> ng-bind=<span class=\"string\">\"counter\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">            <span class=\"comment\">/* 数据模型区开始 */</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                counter++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inc2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                counter+=<span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/* 数据模型区结束 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* 绑定关系区开始 */</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                bind();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"[ng-click]\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;list.length; i++) &#123;</span><br><span class=\"line\">                    list[i].onclick = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                            <span class=\"built_in\">window</span>[list[index].getAttribute(<span class=\"string\">\"ng-click\"</span>)]();</span><br><span class=\"line\">                            apply();</span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                    &#125;)(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apply</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"[ng-bind='counter']\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;list.length; i++) &#123;</span><br><span class=\"line\">                    list[i].innerHTML = counter;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/* 绑定关系区结束 */</span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ECMA2015的新特性Proxy\"><a href=\"#ECMA2015的新特性Proxy\" class=\"headerlink\" title=\"ECMA2015的新特性Proxy\"></a>ECMA2015的新特性Proxy</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> validator = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(obj, prop, value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop === <span class=\"string\">'age'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">Number</span>.isInteger(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'The age is not an integer'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RangeError</span>(<span class=\"string\">'The age seems invalid'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The default behavior to store the value</span></span><br><span class=\"line\">    obj[prop] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Indicate success</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, validator);</span><br><span class=\"line\"></span><br><span class=\"line\">person.age = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age); <span class=\"comment\">// 100</span></span><br><span class=\"line\">person.age = <span class=\"string\">'young'</span>; <span class=\"comment\">// Throws an exception</span></span><br><span class=\"line\">person.age = <span class=\"number\">300</span>; <span class=\"comment\">// Throws an exception</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"几个被废弃的方案\"><a href=\"#几个被废弃的方案\" class=\"headerlink\" title=\"几个被废弃的方案\"></a>几个被废弃的方案</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><p>Object.observe(obj, callback[, acceptList]) 方法对对象（或者其属性）进行监控观察，一旦其发生变化时，将会执行相应的handler。</p>\n<p>现在 Object.observe 将不加入es7 <a href=\"https://mail.mozilla.org/pipermail/es-discuss/2015-November/044684.html\" target=\"_blank\" rel=\"noopener\">An update on Object.observe</a></p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><p>Object.prototype.watch(prop, handler) 方法对对象属性进行监控观察，一旦其发生变化时，将会执行相应的handler。</p>\n<p>此方法只在Firefox 58之前的Firefox中实现，其余浏览器及浏览器版本均不实现此方法 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch\" target=\"_blank\" rel=\"noopener\">Object.prototype.watch()</a></p>\n","site":{"data":{}},"length":4059,"excerpt":"<h2 id=\"封装属性访问器\"><a href=\"#封装属性访问器\" class=\"headerlink\" title=\"封装属性访问器\"></a>封装属性访问器</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Object.defineProperty(obj, prop, descriptor)  </span></span><br><span class=\"line\"><span class=\"comment\">//obj ，待修改的对象  </span></span><br><span class=\"line\"><span class=\"comment\">//prop ，带修改的属性名称  </span></span><br><span class=\"line\"><span class=\"comment\">//descriptor ，待修改属性的相关描述  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">'a'</span>,&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">set</span>:function(newVal)&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'a'</span>).value = newVal;  </span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'b'</span>).innerHTML = newVal;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </span><br><span class=\"line\">    obj.a = e.target.value;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<p>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。存取描述符是由getter-setter函数对描述的属性。描述符必须是这两种形式之一；不能同时是两者。</p>\n</blockquote>\n<h3 id=\"数据描述符和存取描述符均具有以下可选键值：\"><a href=\"#数据描述符和存取描述符均具有以下可选键值：\" class=\"headerlink\" title=\"数据描述符和存取描述符均具有以下可选键值：\"></a>数据描述符和存取描述符均具有以下可选键值：</h3><ul>\n<li>configurable</li>\n</ul>\n<p>当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 false。</p>\n<ul>\n<li>enumerable</li>\n</ul>\n<p>当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中。默认为 false。</p>\n<h3 id=\"数据描述符同时具有以下可选键值：\"><a href=\"#数据描述符同时具有以下可选键值：\" class=\"headerlink\" title=\"数据描述符同时具有以下可选键值：\"></a>数据描述符同时具有以下可选键值：</h3><ul>\n<li>value</li>\n</ul>\n<p>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。</p>\n<ul>\n<li>writable</li>\n</ul>\n<p>当且仅当该属性的writable为true时，value才能被赋值运算符改变。默认为 false。</p>\n<h3 id=\"存取描述符同时具有以下可选键值：\"><a href=\"#存取描述符同时具有以下可选键值：\" class=\"headerlink\" title=\"存取描述符同时具有以下可选键值：\"></a>存取描述符同时具有以下可选键值：</h3><ul>\n<li>get</li>\n</ul>\n<p>一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。该方法返回值被用作属性值。默认为 undefined。</p>\n<ul>\n<li>set</li>\n</ul>\n<p>一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认为 undefined。</p>\n<blockquote>\n<p>如果一个描述符不具有value,writable,get 和 set 任意一个关键字，那么它将被认为是一个数据描述符。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。</p>\n</blockquote>\n<h2 id=\"angular-1-x-的数据绑定原理\"><a href=\"#angular-1-x-的数据绑定原理\" class=\"headerlink\" title=\"angular 1.x 的数据绑定原理\"></a>angular 1.x 的数据绑定原理</h2><p>在未引入angluar1.x的情况下，要实现angular1.x的数据绑定设计，大概会是下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"utf-8\"</span> /&gt;</span><br><span class=\"line\">        &lt;title&gt;two-way binding&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>head&gt;</span><br><span class=\"line\">    &lt;body onload=<span class=\"string\">\"init()\"</span>&gt;</span><br><span class=\"line\">        &lt;button ng-click=<span class=\"string\">\"inc\"</span>&gt;</span><br><span class=\"line\">            increase <span class=\"number\">1</span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button ng-click=\"inc2\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            increase 2</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;span style=<span class=\"string\">\"color:red\"</span> ng-bind=<span class=\"string\">\"counter\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">        &lt;span style=<span class=\"string\">\"color:blue\"</span> ng-bind=<span class=\"string\">\"counter\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">        &lt;span style=<span class=\"string\">\"color:green\"</span> ng-bind=<span class=\"string\">\"counter\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">            <span class=\"comment\">/* 数据模型区开始 */</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                counter++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inc2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                counter+=<span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/* 数据模型区结束 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* 绑定关系区开始 */</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                bind();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"[ng-click]\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;list.length; i++) &#123;</span><br><span class=\"line\">                    list[i].onclick = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                            <span class=\"built_in\">window</span>[list[index].getAttribute(<span class=\"string\">\"ng-click\"</span>)]();</span><br><span class=\"line\">                            apply();</span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                    &#125;)(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apply</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"[ng-bind='counter']\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;list.length; i++) &#123;</span><br><span class=\"line\">                    list[i].innerHTML = counter;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/* 绑定关系区结束 */</span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ECMA2015的新特性Proxy\"><a href=\"#ECMA2015的新特性Proxy\" class=\"headerlink\" title=\"ECMA2015的新特性Proxy\"></a>ECMA2015的新特性Proxy</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> validator = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(obj, prop, value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop === <span class=\"string\">'age'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">Number</span>.isInteger(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'The age is not an integer'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RangeError</span>(<span class=\"string\">'The age seems invalid'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The default behavior to store the value</span></span><br><span class=\"line\">    obj[prop] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Indicate success</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, validator);</span><br><span class=\"line\"></span><br><span class=\"line\">person.age = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age); <span class=\"comment\">// 100</span></span><br><span class=\"line\">person.age = <span class=\"string\">'young'</span>; <span class=\"comment\">// Throws an exception</span></span><br><span class=\"line\">person.age = <span class=\"number\">300</span>; <span class=\"comment\">// Throws an exception</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"几个被废弃的方案\"><a href=\"#几个被废弃的方案\" class=\"headerlink\" title=\"几个被废弃的方案\"></a>几个被废弃的方案</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><p>Object.observe(obj, callback[, acceptList]) 方法对对象（或者其属性）进行监控观察，一旦其发生变化时，将会执行相应的handler。</p>\n<p>现在 Object.observe 将不加入es7 <a href=\"https://mail.mozilla.org/pipermail/es-discuss/2015-November/044684.html\" target=\"_blank\" rel=\"noopener\">An update on Object.observe</a></p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><p>Object.prototype.watch(prop, handler) 方法对对象属性进行监控观察，一旦其发生变化时，将会执行相应的handler。</p>\n<p>此方法只在Firefox 58之前的Firefox中实现，其余浏览器及浏览器版本均不实现此方法 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch\" target=\"_blank\" rel=\"noopener\">Object.prototype.watch()</a></p>"},{"title":"高階函数特性与装饰者模式","date":"2018-04-03T06:32:58.000Z","_content":"\n## 高階函数特性\n\n- 函数可以作为参数被传递\n- 函数可以作为返回值输出\n<escape><!-- more --></escape>\n\n## 高階函数特性使用场景\n\n### 作为参数被传递: 回调函数\n\n```javascript\nfunction callBack(str) {\n    console.log(str);\n}\n\nfunction test(str, callback) {\n    callback(str);\n}\n\ntest('test', callBack);\n```\n\n### 作为返回值输出: 构建闭包\n\n```javascript\nvar logPick = (function () {\n    var pick = 1;\n    return function () {\n        console.log(pick);\n        pick++;\n    };\n})();\n```\n\n## 装饰者模式介绍\n\n装饰模式是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。\n\n当脚本运行时，在子类中增加行为会影响原有类所有的实例，而装饰者却不然，它能给不同对象各自添加新行为。这就是装饰者模式的好处。\n\n## 装饰者模式使用场景\n\n### 数据统计上报\n\n```javascript\nFunction.prototype.after = function (afterfn) {\n    var _self = this;\n    return function(){\n        var ret = _self.apply(this, arguments);;\n        afterfn.apply(this, arguments);\n        return ret;\n    };\n};\nvar func = function (param) {\n    console.log(param);\n}\nfunc = func.after(function (param) {\n    console.log('report: ' + JSON.stringify(param));\n});\n```\n\n### 改变参数\n\n```javascript\nFunction.prototype.before = function (beforefn) {\n    var _self = this;\n    return function () {\n        beforefn.apply(this, arguments);\n        return _self.apply(this, arguments);\n    };\n};\nvar func = function (param) {\n    console.log(param);\n}\nfunc = func.before(function (param) {\n    param.kk = 'kk';\n    console.log('decorator params');\n});\n```","source":"_posts/higher-order-function.md","raw":"---\ntitle: 高階函数特性与装饰者模式\ndate: 2018-04-03 14:32:58\ntags: [设计模式]\n---\n\n## 高階函数特性\n\n- 函数可以作为参数被传递\n- 函数可以作为返回值输出\n<escape><!-- more --></escape>\n\n## 高階函数特性使用场景\n\n### 作为参数被传递: 回调函数\n\n```javascript\nfunction callBack(str) {\n    console.log(str);\n}\n\nfunction test(str, callback) {\n    callback(str);\n}\n\ntest('test', callBack);\n```\n\n### 作为返回值输出: 构建闭包\n\n```javascript\nvar logPick = (function () {\n    var pick = 1;\n    return function () {\n        console.log(pick);\n        pick++;\n    };\n})();\n```\n\n## 装饰者模式介绍\n\n装饰模式是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。\n\n当脚本运行时，在子类中增加行为会影响原有类所有的实例，而装饰者却不然，它能给不同对象各自添加新行为。这就是装饰者模式的好处。\n\n## 装饰者模式使用场景\n\n### 数据统计上报\n\n```javascript\nFunction.prototype.after = function (afterfn) {\n    var _self = this;\n    return function(){\n        var ret = _self.apply(this, arguments);;\n        afterfn.apply(this, arguments);\n        return ret;\n    };\n};\nvar func = function (param) {\n    console.log(param);\n}\nfunc = func.after(function (param) {\n    console.log('report: ' + JSON.stringify(param));\n});\n```\n\n### 改变参数\n\n```javascript\nFunction.prototype.before = function (beforefn) {\n    var _self = this;\n    return function () {\n        beforefn.apply(this, arguments);\n        return _self.apply(this, arguments);\n    };\n};\nvar func = function (param) {\n    console.log(param);\n}\nfunc = func.before(function (param) {\n    param.kk = 'kk';\n    console.log('decorator params');\n});\n```","slug":"higher-order-function","published":1,"updated":"2019-08-28T08:06:34.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4v3000juaid3klg06u6","content":"<h2 id=\"高階函数特性\"><a href=\"#高階函数特性\" class=\"headerlink\" title=\"高階函数特性\"></a>高階函数特性</h2><ul>\n<li>函数可以作为参数被传递</li>\n<li>函数可以作为返回值输出<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"高階函数特性使用场景\"><a href=\"#高階函数特性使用场景\" class=\"headerlink\" title=\"高階函数特性使用场景\"></a>高階函数特性使用场景</h2><h3 id=\"作为参数被传递-回调函数\"><a href=\"#作为参数被传递-回调函数\" class=\"headerlink\" title=\"作为参数被传递: 回调函数\"></a>作为参数被传递: 回调函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callBack</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">str, callback</span>) </span>&#123;</span><br><span class=\"line\">    callback(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'test'</span>, callBack);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作为返回值输出-构建闭包\"><a href=\"#作为返回值输出-构建闭包\" class=\"headerlink\" title=\"作为返回值输出: 构建闭包\"></a>作为返回值输出: 构建闭包</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> logPick = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pick = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(pick);</span><br><span class=\"line\">        pick++;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"装饰者模式介绍\"><a href=\"#装饰者模式介绍\" class=\"headerlink\" title=\"装饰者模式介绍\"></a>装饰者模式介绍</h2><p>装饰模式是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</p>\n<p>当脚本运行时，在子类中增加行为会影响原有类所有的实例，而装饰者却不然，它能给不同对象各自添加新行为。这就是装饰者模式的好处。</p>\n<h2 id=\"装饰者模式使用场景\"><a href=\"#装饰者模式使用场景\" class=\"headerlink\" title=\"装饰者模式使用场景\"></a>装饰者模式使用场景</h2><h3 id=\"数据统计上报\"><a href=\"#数据统计上报\" class=\"headerlink\" title=\"数据统计上报\"></a>数据统计上报</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.after = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">afterfn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = _self.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);;</span><br><span class=\"line\">        afterfn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(param);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func = func.after(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'report: '</span> + <span class=\"built_in\">JSON</span>.stringify(param));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"改变参数\"><a href=\"#改变参数\" class=\"headerlink\" title=\"改变参数\"></a>改变参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.before = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">beforefn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        beforefn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _self.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(param);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func = func.before(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">    param.kk = <span class=\"string\">'kk'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'decorator params'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1312,"excerpt":"<h2 id=\"高階函数特性\"><a href=\"#高階函数特性\" class=\"headerlink\" title=\"高階函数特性\"></a>高階函数特性</h2><ul>\n<li>函数可以作为参数被传递</li>\n<li>函数可以作为返回值输出","more":"</li>\n</ul>\n<h2 id=\"高階函数特性使用场景\"><a href=\"#高階函数特性使用场景\" class=\"headerlink\" title=\"高階函数特性使用场景\"></a>高階函数特性使用场景</h2><h3 id=\"作为参数被传递-回调函数\"><a href=\"#作为参数被传递-回调函数\" class=\"headerlink\" title=\"作为参数被传递: 回调函数\"></a>作为参数被传递: 回调函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callBack</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">str, callback</span>) </span>&#123;</span><br><span class=\"line\">    callback(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'test'</span>, callBack);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作为返回值输出-构建闭包\"><a href=\"#作为返回值输出-构建闭包\" class=\"headerlink\" title=\"作为返回值输出: 构建闭包\"></a>作为返回值输出: 构建闭包</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> logPick = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pick = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(pick);</span><br><span class=\"line\">        pick++;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"装饰者模式介绍\"><a href=\"#装饰者模式介绍\" class=\"headerlink\" title=\"装饰者模式介绍\"></a>装饰者模式介绍</h2><p>装饰模式是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</p>\n<p>当脚本运行时，在子类中增加行为会影响原有类所有的实例，而装饰者却不然，它能给不同对象各自添加新行为。这就是装饰者模式的好处。</p>\n<h2 id=\"装饰者模式使用场景\"><a href=\"#装饰者模式使用场景\" class=\"headerlink\" title=\"装饰者模式使用场景\"></a>装饰者模式使用场景</h2><h3 id=\"数据统计上报\"><a href=\"#数据统计上报\" class=\"headerlink\" title=\"数据统计上报\"></a>数据统计上报</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.after = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">afterfn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = _self.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);;</span><br><span class=\"line\">        afterfn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(param);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func = func.after(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'report: '</span> + <span class=\"built_in\">JSON</span>.stringify(param));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"改变参数\"><a href=\"#改变参数\" class=\"headerlink\" title=\"改变参数\"></a>改变参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.before = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">beforefn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        beforefn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _self.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(param);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func = func.before(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">    param.kk = <span class=\"string\">'kk'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'decorator params'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"迭代器的构建和使用","date":"2018-09-03T11:42:58.000Z","_content":"\n目前绝大部分语言都内置了迭代器，而当前开发中对于迭代器的使用也很是频繁。今天刚好看到迭代器相关文档，索性对此做下归纳和总结。\n<escape><!-- more --></escape>\n\n## 迭代器模式的含义\n\n迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。所以，迭代器模式可以把迭代的过程从业务逻辑中分离出来，完成一次解耦。\n\n## 迭代器模式的简单实现\n\n```javascript\nvar each = function(ary, callback){\n    for(let i = 0; i < ary.length; i++){\n        callback(ary[i], i);\n    }\n};\n\neach([1, 2, 3], function(item, index){\n    dosomething(item, index);\n});\n```\n\n## 内部迭代器和外部迭代器\n\n### 内部迭代器\n\n上面的 each 函数属于内部迭代器，each 函数的内部已经定义好了迭代规则，它完全接手整个迭代过程，外部只需要一次初始调用。\n\n内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。由于内部迭代器的迭代规则已经被提前规定，上面的 each 函数就无法同时迭代2个数组了。\n\n比如现在有个需求，要判断 2 个数组里元素的值是否完全相等， 如果不改写 each 函数本身 的代码，我们能够入手的地方似乎只剩下 each 的回调函数了，代码如下:\n\n```javascript\nvar compare = function( ary1, ary2 ){\n    if ( ary1.length !== ary2.length ){\n        throw new Error ( 'ary1 和 ary2 不相等' ); }\n        each( ary1, function( i, n ){\n            if ( n !== ary2[ i ] ){\n                throw new Error ( 'ary1 和 ary2 不相等' );\n            }\n        });\n        alert ( 'ary1 和 ary2 相等' );\n};\ncompare( [ 1, 2, 3 ], [ 1, 2, 4 ] ); // throw new Error ( 'ary1和ary2不相等' );\n```\n\n### 外部迭代器\n\n外部迭代器必须显式地请求迭代下一个元素，下面是一个外部迭代器的实现：\n\n```javascript\nvar Iterator = function (obj) {\n    var current = 0;\n    var getCurrItem = function () {\n        return obj[current];\n    };\n    return {\n        next: next,\n        isDone: isDone,\n        getCurrItem: getCurrItem\n    }\n};\n```\n\n下面是compare函数的改写：\n\n```javascript\nvar compare = function (iterator1, iterator2) {\n    while (!iterator1.isDone() && !iterator2.isDone()) {\n        if (iterator1.getCurrItem() !== iterator2.getCurrItem()) {\n            throw new Error('iterator1 和 iterator2 不相等');\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n    alert('iterator1 和 iterator2 相等');\n}\nvar iterator1 = Iterator([1, 2, 3]);\nvar iterator2 = Iterator([1, 2, 3]);\ncompare(iterator1, iterator2); // 输出:iterator1 和 iterator2 相等\n```\n\n## 倒序迭代器\n\n针对有一定排列顺序的迭代器，有正序，自然有倒序。如果上面 [迭代器模式的简单实现]一节中的迭代顺序为正序，则倒序会是下面这样：\n\n```javascript\nvar reverseEach = function (ary, callback) {\n    for (var l = ary.length - 1; l >= 0; l--) {\n        callback(l, ary[l]);\n    }\n};\nreverseEach([0, 1, 2], function (i, n) {\n    console.log(n); // 分别输出:2, 1 ,0\n});\n```\n\n## 终止迭代器\n\n分析下来，迭代器有必要提供一个停止迭代的方式，以避免资源的浪费。下面是一个终止迭代的方式：\n\n```javascript\nvar each = function (ary, callback) {\n    for (var i = 0, l = ary.length; i < l; i++) {\n        if (callback(i, ary[i]) === false) {// callback 的执行结果返回 false，提前终止迭代\n            break;\n        }\n    }\n};\neach([1, 2, 3, 4, 5], function (i, n) {\n    if (n > 3) {\n        return false;\n    }\n    console.log(n);\n    // n大于3的时候终止循环 // 分别输出:1, 2, 3\n});\n```\n\n## 迭代器模式的一个应用举例\n\n不同浏览器环境下，获取到上传对象的方式是不同的：\n\n```javascript\nvar getActiveUploadObj = function () {\n    try {\n        return new ActiveXObject(\"TXFTNActiveX.FTNUpload\");\n    } catch (e) {\n        return false;\n    }\n};\nvar getFlashUploadObj = function () {\n    if (supportFlash()) { // supportFlash 函数未提供\n        // IE 上传控件\n    }\n    var str = '<object type=\"application/x-shockwave-flash\"></object>';\n    return $(str).appendTo($('body'));\n    return false;\n};\n\nvar getFormUpladObj = function () {\n    var str = '<input name=\"file\" type=\"file\" class=\"ui-file\"/>'; // 表单上传\n    return $(str).appendTo($('body'));\n};\n```\n\n如果要通过迭代器获取上传对象的话，大概是这个样子：\n\n```javascript\nvar iteratorUploadObj = function () {\n    for (var i = 0, fn; fn = arguments[i++];) {\n        var uploadObj = fn();\n        if (uploadObj !== false) {\n            return uploadObj;\n        }\n    }\n};\nvar uploadObj = iteratorUploadObj(getActiveUploadObj, getFlashUploadObj, getFormUpladObj);\n```","source":"_posts/interator-pattern.md","raw":"---\ntitle: 迭代器的构建和使用\ndate: 2018-09-03 19:42:58\ntags: [设计模式]\n---\n\n目前绝大部分语言都内置了迭代器，而当前开发中对于迭代器的使用也很是频繁。今天刚好看到迭代器相关文档，索性对此做下归纳和总结。\n<escape><!-- more --></escape>\n\n## 迭代器模式的含义\n\n迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。所以，迭代器模式可以把迭代的过程从业务逻辑中分离出来，完成一次解耦。\n\n## 迭代器模式的简单实现\n\n```javascript\nvar each = function(ary, callback){\n    for(let i = 0; i < ary.length; i++){\n        callback(ary[i], i);\n    }\n};\n\neach([1, 2, 3], function(item, index){\n    dosomething(item, index);\n});\n```\n\n## 内部迭代器和外部迭代器\n\n### 内部迭代器\n\n上面的 each 函数属于内部迭代器，each 函数的内部已经定义好了迭代规则，它完全接手整个迭代过程，外部只需要一次初始调用。\n\n内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。由于内部迭代器的迭代规则已经被提前规定，上面的 each 函数就无法同时迭代2个数组了。\n\n比如现在有个需求，要判断 2 个数组里元素的值是否完全相等， 如果不改写 each 函数本身 的代码，我们能够入手的地方似乎只剩下 each 的回调函数了，代码如下:\n\n```javascript\nvar compare = function( ary1, ary2 ){\n    if ( ary1.length !== ary2.length ){\n        throw new Error ( 'ary1 和 ary2 不相等' ); }\n        each( ary1, function( i, n ){\n            if ( n !== ary2[ i ] ){\n                throw new Error ( 'ary1 和 ary2 不相等' );\n            }\n        });\n        alert ( 'ary1 和 ary2 相等' );\n};\ncompare( [ 1, 2, 3 ], [ 1, 2, 4 ] ); // throw new Error ( 'ary1和ary2不相等' );\n```\n\n### 外部迭代器\n\n外部迭代器必须显式地请求迭代下一个元素，下面是一个外部迭代器的实现：\n\n```javascript\nvar Iterator = function (obj) {\n    var current = 0;\n    var getCurrItem = function () {\n        return obj[current];\n    };\n    return {\n        next: next,\n        isDone: isDone,\n        getCurrItem: getCurrItem\n    }\n};\n```\n\n下面是compare函数的改写：\n\n```javascript\nvar compare = function (iterator1, iterator2) {\n    while (!iterator1.isDone() && !iterator2.isDone()) {\n        if (iterator1.getCurrItem() !== iterator2.getCurrItem()) {\n            throw new Error('iterator1 和 iterator2 不相等');\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n    alert('iterator1 和 iterator2 相等');\n}\nvar iterator1 = Iterator([1, 2, 3]);\nvar iterator2 = Iterator([1, 2, 3]);\ncompare(iterator1, iterator2); // 输出:iterator1 和 iterator2 相等\n```\n\n## 倒序迭代器\n\n针对有一定排列顺序的迭代器，有正序，自然有倒序。如果上面 [迭代器模式的简单实现]一节中的迭代顺序为正序，则倒序会是下面这样：\n\n```javascript\nvar reverseEach = function (ary, callback) {\n    for (var l = ary.length - 1; l >= 0; l--) {\n        callback(l, ary[l]);\n    }\n};\nreverseEach([0, 1, 2], function (i, n) {\n    console.log(n); // 分别输出:2, 1 ,0\n});\n```\n\n## 终止迭代器\n\n分析下来，迭代器有必要提供一个停止迭代的方式，以避免资源的浪费。下面是一个终止迭代的方式：\n\n```javascript\nvar each = function (ary, callback) {\n    for (var i = 0, l = ary.length; i < l; i++) {\n        if (callback(i, ary[i]) === false) {// callback 的执行结果返回 false，提前终止迭代\n            break;\n        }\n    }\n};\neach([1, 2, 3, 4, 5], function (i, n) {\n    if (n > 3) {\n        return false;\n    }\n    console.log(n);\n    // n大于3的时候终止循环 // 分别输出:1, 2, 3\n});\n```\n\n## 迭代器模式的一个应用举例\n\n不同浏览器环境下，获取到上传对象的方式是不同的：\n\n```javascript\nvar getActiveUploadObj = function () {\n    try {\n        return new ActiveXObject(\"TXFTNActiveX.FTNUpload\");\n    } catch (e) {\n        return false;\n    }\n};\nvar getFlashUploadObj = function () {\n    if (supportFlash()) { // supportFlash 函数未提供\n        // IE 上传控件\n    }\n    var str = '<object type=\"application/x-shockwave-flash\"></object>';\n    return $(str).appendTo($('body'));\n    return false;\n};\n\nvar getFormUpladObj = function () {\n    var str = '<input name=\"file\" type=\"file\" class=\"ui-file\"/>'; // 表单上传\n    return $(str).appendTo($('body'));\n};\n```\n\n如果要通过迭代器获取上传对象的话，大概是这个样子：\n\n```javascript\nvar iteratorUploadObj = function () {\n    for (var i = 0, fn; fn = arguments[i++];) {\n        var uploadObj = fn();\n        if (uploadObj !== false) {\n            return uploadObj;\n        }\n    }\n};\nvar uploadObj = iteratorUploadObj(getActiveUploadObj, getFlashUploadObj, getFormUpladObj);\n```","slug":"interator-pattern","published":1,"updated":"2019-08-29T01:32:47.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4v4000luaidq6qdenqs","content":"<p>目前绝大部分语言都内置了迭代器，而当前开发中对于迭代器的使用也很是频繁。今天刚好看到迭代器相关文档，索性对此做下归纳和总结。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"迭代器模式的含义\"><a href=\"#迭代器模式的含义\" class=\"headerlink\" title=\"迭代器模式的含义\"></a>迭代器模式的含义</h2><p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。所以，迭代器模式可以把迭代的过程从业务逻辑中分离出来，完成一次解耦。</p>\n<h2 id=\"迭代器模式的简单实现\"><a href=\"#迭代器模式的简单实现\" class=\"headerlink\" title=\"迭代器模式的简单实现\"></a>迭代器模式的简单实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> each = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ary, callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; ary.length; i++)&#123;</span><br><span class=\"line\">        callback(ary[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">each([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>)</span>&#123;</span><br><span class=\"line\">    dosomething(item, index);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内部迭代器和外部迭代器\"><a href=\"#内部迭代器和外部迭代器\" class=\"headerlink\" title=\"内部迭代器和外部迭代器\"></a>内部迭代器和外部迭代器</h2><h3 id=\"内部迭代器\"><a href=\"#内部迭代器\" class=\"headerlink\" title=\"内部迭代器\"></a>内部迭代器</h3><p>上面的 each 函数属于内部迭代器，each 函数的内部已经定义好了迭代规则，它完全接手整个迭代过程，外部只需要一次初始调用。</p>\n<p>内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。由于内部迭代器的迭代规则已经被提前规定，上面的 each 函数就无法同时迭代2个数组了。</p>\n<p>比如现在有个需求，要判断 2 个数组里元素的值是否完全相等， 如果不改写 each 函数本身 的代码，我们能够入手的地方似乎只剩下 each 的回调函数了，代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> compare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> ary1, ary2 </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ary1.length !== ary2.length )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span> ( <span class=\"string\">'ary1 和 ary2 不相等'</span> ); &#125;</span><br><span class=\"line\">        each( ary1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> i, n </span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( n !== ary2[ i ] )&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span> ( <span class=\"string\">'ary1 和 ary2 不相等'</span> );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        alert ( <span class=\"string\">'ary1 和 ary2 相等'</span> );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">compare( [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ], [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span> ] ); <span class=\"comment\">// throw new Error ( 'ary1和ary2不相等' );</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"外部迭代器\"><a href=\"#外部迭代器\" class=\"headerlink\" title=\"外部迭代器\"></a>外部迭代器</h3><p>外部迭代器必须显式地请求迭代下一个元素，下面是一个外部迭代器的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Iterator = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> current = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> getCurrItem = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj[current];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        next: next,</span><br><span class=\"line\">        isDone: isDone,</span><br><span class=\"line\">        getCurrItem: getCurrItem</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>下面是compare函数的改写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> compare = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">iterator1, iterator2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!iterator1.isDone() &amp;&amp; !iterator2.isDone()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iterator1.getCurrItem() !== iterator2.getCurrItem()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'iterator1 和 iterator2 不相等'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        iterator1.next();</span><br><span class=\"line\">        iterator2.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    alert(<span class=\"string\">'iterator1 和 iterator2 相等'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator1 = Iterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator2 = Iterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">compare(iterator1, iterator2); <span class=\"comment\">// 输出:iterator1 和 iterator2 相等</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"倒序迭代器\"><a href=\"#倒序迭代器\" class=\"headerlink\" title=\"倒序迭代器\"></a>倒序迭代器</h2><p>针对有一定排列顺序的迭代器，有正序，自然有倒序。如果上面 [迭代器模式的简单实现]一节中的迭代顺序为正序，则倒序会是下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseEach = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ary, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> l = ary.length - <span class=\"number\">1</span>; l &gt;= <span class=\"number\">0</span>; l--) &#123;</span><br><span class=\"line\">        callback(l, ary[l]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">reverseEach([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n); <span class=\"comment\">// 分别输出:2, 1 ,0</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"终止迭代器\"><a href=\"#终止迭代器\" class=\"headerlink\" title=\"终止迭代器\"></a>终止迭代器</h2><p>分析下来，迭代器有必要提供一个停止迭代的方式，以避免资源的浪费。下面是一个终止迭代的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> each = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ary, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = ary.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback(i, ary[i]) === <span class=\"literal\">false</span>) &#123;<span class=\"comment\">// callback 的执行结果返回 false，提前终止迭代</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">each([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">    <span class=\"comment\">// n大于3的时候终止循环 // 分别输出:1, 2, 3</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"迭代器模式的一个应用举例\"><a href=\"#迭代器模式的一个应用举例\" class=\"headerlink\" title=\"迭代器模式的一个应用举例\"></a>迭代器模式的一个应用举例</h2><p>不同浏览器环境下，获取到上传对象的方式是不同的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getActiveUploadObj = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"TXFTNActiveX.FTNUpload\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getFlashUploadObj = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (supportFlash()) &#123; <span class=\"comment\">// supportFlash 函数未提供</span></span><br><span class=\"line\">        <span class=\"comment\">// IE 上传控件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">'&lt;object type=\"application/x-shockwave-flash\"&gt;&lt;/object&gt;'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $(str).appendTo($(<span class=\"string\">'body'</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getFormUpladObj = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">'&lt;input name=\"file\" type=\"file\" class=\"ui-file\"/&gt;'</span>; <span class=\"comment\">// 表单上传</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $(str).appendTo($(<span class=\"string\">'body'</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果要通过迭代器获取上传对象的话，大概是这个样子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> iteratorUploadObj = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, fn; fn = <span class=\"built_in\">arguments</span>[i++];) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> uploadObj = fn();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (uploadObj !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> uploadObj;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> uploadObj = iteratorUploadObj(getActiveUploadObj, getFlashUploadObj, getFormUpladObj);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":3716,"excerpt":"<p>目前绝大部分语言都内置了迭代器，而当前开发中对于迭代器的使用也很是频繁。今天刚好看到迭代器相关文档，索性对此做下归纳和总结。</p>","more":"<h2 id=\"迭代器模式的含义\"><a href=\"#迭代器模式的含义\" class=\"headerlink\" title=\"迭代器模式的含义\"></a>迭代器模式的含义</h2><p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。所以，迭代器模式可以把迭代的过程从业务逻辑中分离出来，完成一次解耦。</p>\n<h2 id=\"迭代器模式的简单实现\"><a href=\"#迭代器模式的简单实现\" class=\"headerlink\" title=\"迭代器模式的简单实现\"></a>迭代器模式的简单实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> each = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ary, callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; ary.length; i++)&#123;</span><br><span class=\"line\">        callback(ary[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">each([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>)</span>&#123;</span><br><span class=\"line\">    dosomething(item, index);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内部迭代器和外部迭代器\"><a href=\"#内部迭代器和外部迭代器\" class=\"headerlink\" title=\"内部迭代器和外部迭代器\"></a>内部迭代器和外部迭代器</h2><h3 id=\"内部迭代器\"><a href=\"#内部迭代器\" class=\"headerlink\" title=\"内部迭代器\"></a>内部迭代器</h3><p>上面的 each 函数属于内部迭代器，each 函数的内部已经定义好了迭代规则，它完全接手整个迭代过程，外部只需要一次初始调用。</p>\n<p>内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。由于内部迭代器的迭代规则已经被提前规定，上面的 each 函数就无法同时迭代2个数组了。</p>\n<p>比如现在有个需求，要判断 2 个数组里元素的值是否完全相等， 如果不改写 each 函数本身 的代码，我们能够入手的地方似乎只剩下 each 的回调函数了，代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> compare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> ary1, ary2 </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ary1.length !== ary2.length )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span> ( <span class=\"string\">'ary1 和 ary2 不相等'</span> ); &#125;</span><br><span class=\"line\">        each( ary1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> i, n </span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( n !== ary2[ i ] )&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span> ( <span class=\"string\">'ary1 和 ary2 不相等'</span> );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        alert ( <span class=\"string\">'ary1 和 ary2 相等'</span> );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">compare( [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ], [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span> ] ); <span class=\"comment\">// throw new Error ( 'ary1和ary2不相等' );</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"外部迭代器\"><a href=\"#外部迭代器\" class=\"headerlink\" title=\"外部迭代器\"></a>外部迭代器</h3><p>外部迭代器必须显式地请求迭代下一个元素，下面是一个外部迭代器的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Iterator = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> current = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> getCurrItem = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj[current];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        next: next,</span><br><span class=\"line\">        isDone: isDone,</span><br><span class=\"line\">        getCurrItem: getCurrItem</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>下面是compare函数的改写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> compare = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">iterator1, iterator2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!iterator1.isDone() &amp;&amp; !iterator2.isDone()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iterator1.getCurrItem() !== iterator2.getCurrItem()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'iterator1 和 iterator2 不相等'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        iterator1.next();</span><br><span class=\"line\">        iterator2.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    alert(<span class=\"string\">'iterator1 和 iterator2 相等'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator1 = Iterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator2 = Iterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">compare(iterator1, iterator2); <span class=\"comment\">// 输出:iterator1 和 iterator2 相等</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"倒序迭代器\"><a href=\"#倒序迭代器\" class=\"headerlink\" title=\"倒序迭代器\"></a>倒序迭代器</h2><p>针对有一定排列顺序的迭代器，有正序，自然有倒序。如果上面 [迭代器模式的简单实现]一节中的迭代顺序为正序，则倒序会是下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseEach = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ary, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> l = ary.length - <span class=\"number\">1</span>; l &gt;= <span class=\"number\">0</span>; l--) &#123;</span><br><span class=\"line\">        callback(l, ary[l]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">reverseEach([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n); <span class=\"comment\">// 分别输出:2, 1 ,0</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"终止迭代器\"><a href=\"#终止迭代器\" class=\"headerlink\" title=\"终止迭代器\"></a>终止迭代器</h2><p>分析下来，迭代器有必要提供一个停止迭代的方式，以避免资源的浪费。下面是一个终止迭代的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> each = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ary, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = ary.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback(i, ary[i]) === <span class=\"literal\">false</span>) &#123;<span class=\"comment\">// callback 的执行结果返回 false，提前终止迭代</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">each([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">    <span class=\"comment\">// n大于3的时候终止循环 // 分别输出:1, 2, 3</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"迭代器模式的一个应用举例\"><a href=\"#迭代器模式的一个应用举例\" class=\"headerlink\" title=\"迭代器模式的一个应用举例\"></a>迭代器模式的一个应用举例</h2><p>不同浏览器环境下，获取到上传对象的方式是不同的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getActiveUploadObj = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"TXFTNActiveX.FTNUpload\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getFlashUploadObj = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (supportFlash()) &#123; <span class=\"comment\">// supportFlash 函数未提供</span></span><br><span class=\"line\">        <span class=\"comment\">// IE 上传控件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">'&lt;object type=\"application/x-shockwave-flash\"&gt;&lt;/object&gt;'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $(str).appendTo($(<span class=\"string\">'body'</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getFormUpladObj = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">'&lt;input name=\"file\" type=\"file\" class=\"ui-file\"/&gt;'</span>; <span class=\"comment\">// 表单上传</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $(str).appendTo($(<span class=\"string\">'body'</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果要通过迭代器获取上传对象的话，大概是这个样子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> iteratorUploadObj = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, fn; fn = <span class=\"built_in\">arguments</span>[i++];) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> uploadObj = fn();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (uploadObj !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> uploadObj;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> uploadObj = iteratorUploadObj(getActiveUploadObj, getFlashUploadObj, getFormUpladObj);</span><br></pre></td></tr></table></figure>"},{"title":"node.js 内存泄漏排查小结","date":"2019-07-11T07:06:58.000Z","_content":"\n内存泄漏（Memory Leak）指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。如果内存泄漏的位置比较关键，那么随着处理的进行可能持有越来越多的无用内存，这些无用的内存变多会引起服务器响应速度变慢，严重的情况下导致内存达到某个极限（可能是进程的上限，如 v8 的上限；也可能是系统可提供的内存上限）会使得应用程序崩溃。\n\n<escape><!-- more --></escape>\n\n![](/images/node-memory-leak/4ffd766c-a3aa-11e9-8f00-0a58ac13161b.png)","source":"_posts/node-memory-leak.md","raw":"---\ntitle: node.js 内存泄漏排查小结\ndate: 2019-07-11 15:06:58\ntags: [node.js, bug fix]\n---\n\n内存泄漏（Memory Leak）指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。如果内存泄漏的位置比较关键，那么随着处理的进行可能持有越来越多的无用内存，这些无用的内存变多会引起服务器响应速度变慢，严重的情况下导致内存达到某个极限（可能是进程的上限，如 v8 的上限；也可能是系统可提供的内存上限）会使得应用程序崩溃。\n\n<escape><!-- more --></escape>\n\n![](/images/node-memory-leak/4ffd766c-a3aa-11e9-8f00-0a58ac13161b.png)","slug":"node-memory-leak","published":1,"updated":"2019-08-28T08:06:52.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4v5000ouaidvdwc3xfu","content":"<p>内存泄漏（Memory Leak）指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。如果内存泄漏的位置比较关键，那么随着处理的进行可能持有越来越多的无用内存，这些无用的内存变多会引起服务器响应速度变慢，严重的情况下导致内存达到某个极限（可能是进程的上限，如 v8 的上限；也可能是系统可提供的内存上限）会使得应用程序崩溃。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/node-memory-leak/4ffd766c-a3aa-11e9-8f00-0a58ac13161b.png\" alt></p>\n","site":{"data":{}},"length":165,"excerpt":"<p>内存泄漏（Memory Leak）指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。如果内存泄漏的位置比较关键，那么随着处理的进行可能持有越来越多的无用内存，这些无用的内存变多会引起服务器响应速度变慢，严重的情况下导致内存达到某个极限（可能是进程的上限，如 v8 的上限；也可能是系统可提供的内存上限）会使得应用程序崩溃。</p>","more":"<p><img src=\"/images/node-memory-leak/4ffd766c-a3aa-11e9-8f00-0a58ac13161b.png\" alt></p>"},{"title":"对\"数据变化->UI变化\"间的逻辑进行解耦(1)--观察者模式介绍与简略使用","date":"2018-02-07T02:52:58.000Z","_content":"\n用户与页面的交互会导致数据状态发生变化，数据状态变化，又需要通过UI表现出来。随着页面复杂度的提高，数据变化后要通知的UI组件也会变得越来越多。如果不对这一步进行解耦，这部分的代码会变得越来越冗余和复杂，对代码的可读性和可测试性都带来不良的影响。\n\n所以，我们需要对【数据变化】 -> 【UI变化】这部分的逻辑进行解耦\n<escape><!-- more --></escape>\n\n## 观察者模式介绍\n\n观察者模式（Observer pattern）是一种管理对象及其行为和状态之间的关系的得力工具。\n\n用JavaScript的话来说，这种模式的实质就是对可以对程序中的某个对象的状态进行观察，并且在其发生改变时能够得到通知。\n\n所以，这个模式可以解决我们现在面对的问题：\"对【数据变化】 -> 【UI变化】这部分的逻辑进行解耦\"\n\n观察者模式中存在两个角色：观察者和被观察者(又名订阅者和发布者)。下面是观察者模式的实现原理。\n\n## 观察者模式实现原理\n\n可以通过一个实例来了解观察者模式的运行原理。\n\n首先，建立一个描述观察者的类。\n\n```javascript\nfunction Observer() {\n    this.Update = function () {\n        // ...\n    };\n}\n```\n\n然后，建立一个描述观察者队列的类。\n\n```javascript\nfunction ObserverList() {\n    this.observerList = [];\n}\n\nObserverList.prototype.Add = function (obj) {\n    return this.observerList.push(obj);\n};\n\nObserverList.prototype.Empty = function () {\n    this.observerList = [];\n};\n\nObserverList.prototype.Count = function () {\n    return this.observerList.length;\n};\n\n\nObserverList.prototype.Get = function (index) {\n    if (index > -1 && index < this.observerList.length) {\n        return this.observerList[index];\n    }\n};\n\nObserverList.prototype.Insert = function (obj, index) {\n    var pointer = -1;\n\n    if (index === 0) {\n        this.observerList.unshift(obj);\n        pointer = index;\n    } else if (index === this.observerList.length) {\n        this.observerList.push(obj);\n        pointer = index;\n    }\n\n    return pointer;\n};\n\nObserverList.prototype.IndexOf = function (obj, startIndex) {\n    var i = startIndex, pointer = -1;\n\n    while (i < this.observerList.length) {\n        if (this.observerList[i] === obj) {\n            pointer = i;\n        }\n        i++;\n    }\n\n    return pointer;\n};\n\n\nObserverList.prototype.RemoveAt = function (index) {\n    if (index === 0) {\n        this.observerList.shift();\n    } else if (index === this.observerList.length - 1) {\n        this.observerList.pop();\n    }\n};\n\n\n// Extend an object with an extension\nfunction extend(extension, obj) {\n    for (var key in extension) {\n        obj[key] = extension[key];\n    }\n}\n```\n\n接着，建立一个描述被观察者的类。\n\n```javascript\nfunction Subject() {\n    this.observers = new ObserverList();\n}\n\nSubject.prototype.AddObserver = function (observer) {\n    this.observers.Add(observer);\n};\n\nSubject.prototype.RemoveObserver = function (observer) {\n    this.observers.RemoveAt(this.observers.IndexOf(observer, 0));\n};\n\nSubject.prototype.Notify = function (context) {\n    var observerCount = this.observers.Count();\n    for (var i = 0; i < observerCount; i++) {\n        this.observers.Get(i).Update(context);\n    }\n};\n```\n>注意这里Subject类的Notify方法。在观察者模式中，观察者可以观察到被观察者，原因就是：被观察者把观察者的引用存储起来，被观察者可以进行\"通告\"，对所有观察者进行调用(发送信息)。\n\n下面是一个具体的实例\n\n```javascript\n<html>\n\n<head></head>\n\n<body>\n    <button id=\"addNewObserver\">Add New Observer checkbox</button>\n    <input id=\"mainCheckbox\" type=\"checkbox\" />\n    <div id=\"observersContainer\"></div>\n    <script src=\"./observer-pattern.js\"></script>\n    <script>\n        // 我们DOM 元素的引用\n\n        var controlCheckbox = document.getElementById(\"mainCheckbox\"),\n            addBtn = document.getElementById(\"addNewObserver\"),\n            container = document.getElementById(\"observersContainer\");\n\n\n        // 具体的被观察者\n\n        //Subject 类扩展controlCheckbox 类\n        extend(new Subject(), controlCheckbox);\n\n        //点击checkbox 将会触发对观察者的通知\n        controlCheckbox[\"onclick\"] = new Function(\"controlCheckbox.Notify(controlCheckbox.checked)\");\n\n\n        addBtn[\"onclick\"] = AddNewObserver;\n\n        // 具体的观察者\n\n        function AddNewObserver() {\n\n            //建立一个新的用于增加的checkbox\n            var check = document.createElement(\"input\");\n            check.type = \"checkbox\";\n\n            // 使用Observer 类扩展checkbox\n            extend(new Observer(), check);\n\n            // 使用定制的Update函数重载\n            check.Update = function (value) {\n                this.checked = value;\n            };\n\n            // 增加新的观察者到我们主要的被观察者的观察者列表中\n            controlCheckbox.AddObserver(check);\n\n            // 将元素添加到容器的最后\n            container.appendChild(check);\n        }\n    </script>\n</body>\n\n</html>\n```\n\n至此，观察者模式使用方式简述完毕。\n\n## 参考\n\n[《JavaScript设计模式与开发实践》](https://book.douban.com/subject/26382780/)\n\n[Learning JavaScript Design Patterns](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)\n[Learning JavaScript Design Patterns 中文版](http://www.oschina.net/translate/learning-javascript-design-patterns#introduction)","source":"_posts/observer-pattern.md","raw":"---\ntitle: 对\"数据变化->UI变化\"间的逻辑进行解耦(1)--观察者模式介绍与简略使用\ndate: 2018-02-07 10:52:58\ntags: [设计模式]\n---\n\n用户与页面的交互会导致数据状态发生变化，数据状态变化，又需要通过UI表现出来。随着页面复杂度的提高，数据变化后要通知的UI组件也会变得越来越多。如果不对这一步进行解耦，这部分的代码会变得越来越冗余和复杂，对代码的可读性和可测试性都带来不良的影响。\n\n所以，我们需要对【数据变化】 -> 【UI变化】这部分的逻辑进行解耦\n<escape><!-- more --></escape>\n\n## 观察者模式介绍\n\n观察者模式（Observer pattern）是一种管理对象及其行为和状态之间的关系的得力工具。\n\n用JavaScript的话来说，这种模式的实质就是对可以对程序中的某个对象的状态进行观察，并且在其发生改变时能够得到通知。\n\n所以，这个模式可以解决我们现在面对的问题：\"对【数据变化】 -> 【UI变化】这部分的逻辑进行解耦\"\n\n观察者模式中存在两个角色：观察者和被观察者(又名订阅者和发布者)。下面是观察者模式的实现原理。\n\n## 观察者模式实现原理\n\n可以通过一个实例来了解观察者模式的运行原理。\n\n首先，建立一个描述观察者的类。\n\n```javascript\nfunction Observer() {\n    this.Update = function () {\n        // ...\n    };\n}\n```\n\n然后，建立一个描述观察者队列的类。\n\n```javascript\nfunction ObserverList() {\n    this.observerList = [];\n}\n\nObserverList.prototype.Add = function (obj) {\n    return this.observerList.push(obj);\n};\n\nObserverList.prototype.Empty = function () {\n    this.observerList = [];\n};\n\nObserverList.prototype.Count = function () {\n    return this.observerList.length;\n};\n\n\nObserverList.prototype.Get = function (index) {\n    if (index > -1 && index < this.observerList.length) {\n        return this.observerList[index];\n    }\n};\n\nObserverList.prototype.Insert = function (obj, index) {\n    var pointer = -1;\n\n    if (index === 0) {\n        this.observerList.unshift(obj);\n        pointer = index;\n    } else if (index === this.observerList.length) {\n        this.observerList.push(obj);\n        pointer = index;\n    }\n\n    return pointer;\n};\n\nObserverList.prototype.IndexOf = function (obj, startIndex) {\n    var i = startIndex, pointer = -1;\n\n    while (i < this.observerList.length) {\n        if (this.observerList[i] === obj) {\n            pointer = i;\n        }\n        i++;\n    }\n\n    return pointer;\n};\n\n\nObserverList.prototype.RemoveAt = function (index) {\n    if (index === 0) {\n        this.observerList.shift();\n    } else if (index === this.observerList.length - 1) {\n        this.observerList.pop();\n    }\n};\n\n\n// Extend an object with an extension\nfunction extend(extension, obj) {\n    for (var key in extension) {\n        obj[key] = extension[key];\n    }\n}\n```\n\n接着，建立一个描述被观察者的类。\n\n```javascript\nfunction Subject() {\n    this.observers = new ObserverList();\n}\n\nSubject.prototype.AddObserver = function (observer) {\n    this.observers.Add(observer);\n};\n\nSubject.prototype.RemoveObserver = function (observer) {\n    this.observers.RemoveAt(this.observers.IndexOf(observer, 0));\n};\n\nSubject.prototype.Notify = function (context) {\n    var observerCount = this.observers.Count();\n    for (var i = 0; i < observerCount; i++) {\n        this.observers.Get(i).Update(context);\n    }\n};\n```\n>注意这里Subject类的Notify方法。在观察者模式中，观察者可以观察到被观察者，原因就是：被观察者把观察者的引用存储起来，被观察者可以进行\"通告\"，对所有观察者进行调用(发送信息)。\n\n下面是一个具体的实例\n\n```javascript\n<html>\n\n<head></head>\n\n<body>\n    <button id=\"addNewObserver\">Add New Observer checkbox</button>\n    <input id=\"mainCheckbox\" type=\"checkbox\" />\n    <div id=\"observersContainer\"></div>\n    <script src=\"./observer-pattern.js\"></script>\n    <script>\n        // 我们DOM 元素的引用\n\n        var controlCheckbox = document.getElementById(\"mainCheckbox\"),\n            addBtn = document.getElementById(\"addNewObserver\"),\n            container = document.getElementById(\"observersContainer\");\n\n\n        // 具体的被观察者\n\n        //Subject 类扩展controlCheckbox 类\n        extend(new Subject(), controlCheckbox);\n\n        //点击checkbox 将会触发对观察者的通知\n        controlCheckbox[\"onclick\"] = new Function(\"controlCheckbox.Notify(controlCheckbox.checked)\");\n\n\n        addBtn[\"onclick\"] = AddNewObserver;\n\n        // 具体的观察者\n\n        function AddNewObserver() {\n\n            //建立一个新的用于增加的checkbox\n            var check = document.createElement(\"input\");\n            check.type = \"checkbox\";\n\n            // 使用Observer 类扩展checkbox\n            extend(new Observer(), check);\n\n            // 使用定制的Update函数重载\n            check.Update = function (value) {\n                this.checked = value;\n            };\n\n            // 增加新的观察者到我们主要的被观察者的观察者列表中\n            controlCheckbox.AddObserver(check);\n\n            // 将元素添加到容器的最后\n            container.appendChild(check);\n        }\n    </script>\n</body>\n\n</html>\n```\n\n至此，观察者模式使用方式简述完毕。\n\n## 参考\n\n[《JavaScript设计模式与开发实践》](https://book.douban.com/subject/26382780/)\n\n[Learning JavaScript Design Patterns](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)\n[Learning JavaScript Design Patterns 中文版](http://www.oschina.net/translate/learning-javascript-design-patterns#introduction)","slug":"observer-pattern","published":1,"updated":"2019-08-29T01:32:47.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4v6000quaid5dbt09gd","content":"<p>用户与页面的交互会导致数据状态发生变化，数据状态变化，又需要通过UI表现出来。随着页面复杂度的提高，数据变化后要通知的UI组件也会变得越来越多。如果不对这一步进行解耦，这部分的代码会变得越来越冗余和复杂，对代码的可读性和可测试性都带来不良的影响。</p>\n<p>所以，我们需要对【数据变化】 -&gt; 【UI变化】这部分的逻辑进行解耦</p>\n<a id=\"more\"></a>\n\n<h2 id=\"观察者模式介绍\"><a href=\"#观察者模式介绍\" class=\"headerlink\" title=\"观察者模式介绍\"></a>观察者模式介绍</h2><p>观察者模式（Observer pattern）是一种管理对象及其行为和状态之间的关系的得力工具。</p>\n<p>用JavaScript的话来说，这种模式的实质就是对可以对程序中的某个对象的状态进行观察，并且在其发生改变时能够得到通知。</p>\n<p>所以，这个模式可以解决我们现在面对的问题：”对【数据变化】 -&gt; 【UI变化】这部分的逻辑进行解耦”</p>\n<p>观察者模式中存在两个角色：观察者和被观察者(又名订阅者和发布者)。下面是观察者模式的实现原理。</p>\n<h2 id=\"观察者模式实现原理\"><a href=\"#观察者模式实现原理\" class=\"headerlink\" title=\"观察者模式实现原理\"></a>观察者模式实现原理</h2><p>可以通过一个实例来了解观察者模式的运行原理。</p>\n<p>首先，建立一个描述观察者的类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.Update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，建立一个描述观察者队列的类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ObserverList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observerList = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.Add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.observerList.push(obj);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.Empty = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observerList = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.Count = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.observerList.length;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.Get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt; <span class=\"number\">-1</span> &amp;&amp; index &lt; <span class=\"keyword\">this</span>.observerList.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.observerList[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.Insert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pointer = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observerList.unshift(obj);</span><br><span class=\"line\">        pointer = index;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index === <span class=\"keyword\">this</span>.observerList.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observerList.push(obj);</span><br><span class=\"line\">        pointer = index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pointer;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.IndexOf = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, startIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = startIndex, pointer = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; <span class=\"keyword\">this</span>.observerList.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.observerList[i] === obj) &#123;</span><br><span class=\"line\">            pointer = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pointer;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.RemoveAt = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observerList.shift();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index === <span class=\"keyword\">this</span>.observerList.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observerList.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Extend an object with an extension</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">extension, obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> extension) &#123;</span><br><span class=\"line\">        obj[key] = extension[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着，建立一个描述被观察者的类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Subject</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers = <span class=\"keyword\">new</span> ObserverList();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Subject.prototype.AddObserver = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">observer</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.Add(observer);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Subject.prototype.RemoveObserver = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">observer</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.RemoveAt(<span class=\"keyword\">this</span>.observers.IndexOf(observer, <span class=\"number\">0</span>));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Subject.prototype.Notify = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> observerCount = <span class=\"keyword\">this</span>.observers.Count();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; observerCount; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observers.Get(i).Update(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意这里Subject类的Notify方法。在观察者模式中，观察者可以观察到被观察者，原因就是：被观察者把观察者的引用存储起来，被观察者可以进行”通告”，对所有观察者进行调用(发送信息)。</p>\n</blockquote>\n<p>下面是一个具体的实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;button id=<span class=\"string\">\"addNewObserver\"</span>&gt;Add New Observer checkbox&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;input id=\"mainCheckbox\" type=\"checkbox\" /</span>&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"observersContainer\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"./observer-pattern.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"comment\">// 我们DOM 元素的引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> controlCheckbox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mainCheckbox\"</span>),</span><br><span class=\"line\">            addBtn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"addNewObserver\"</span>),</span><br><span class=\"line\">            container = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"observersContainer\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 具体的被观察者</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Subject 类扩展controlCheckbox 类</span></span><br><span class=\"line\">        extend(<span class=\"keyword\">new</span> Subject(), controlCheckbox);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//点击checkbox 将会触发对观察者的通知</span></span><br><span class=\"line\">        controlCheckbox[<span class=\"string\">\"onclick\"</span>] = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"controlCheckbox.Notify(controlCheckbox.checked)\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        addBtn[<span class=\"string\">\"onclick\"</span>] = AddNewObserver;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 具体的观察者</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AddNewObserver</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//建立一个新的用于增加的checkbox</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> check = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"input\"</span>);</span><br><span class=\"line\">            check.type = <span class=\"string\">\"checkbox\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 使用Observer 类扩展checkbox</span></span><br><span class=\"line\">            extend(<span class=\"keyword\">new</span> Observer(), check);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 使用定制的Update函数重载</span></span><br><span class=\"line\">            check.Update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.checked = value;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 增加新的观察者到我们主要的被观察者的观察者列表中</span></span><br><span class=\"line\">            controlCheckbox.AddObserver(check);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将元素添加到容器的最后</span></span><br><span class=\"line\">            container.appendChild(check);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，观察者模式使用方式简述完毕。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://book.douban.com/subject/26382780/\" target=\"_blank\" rel=\"noopener\">《JavaScript设计模式与开发实践》</a></p>\n<p><a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/\" target=\"_blank\" rel=\"noopener\">Learning JavaScript Design Patterns</a><br><a href=\"http://www.oschina.net/translate/learning-javascript-design-patterns#introduction\" target=\"_blank\" rel=\"noopener\">Learning JavaScript Design Patterns 中文版</a></p>\n","site":{"data":{}},"length":4490,"excerpt":"<p>用户与页面的交互会导致数据状态发生变化，数据状态变化，又需要通过UI表现出来。随着页面复杂度的提高，数据变化后要通知的UI组件也会变得越来越多。如果不对这一步进行解耦，这部分的代码会变得越来越冗余和复杂，对代码的可读性和可测试性都带来不良的影响。</p>\n<p>所以，我们需要对【数据变化】 -&gt; 【UI变化】这部分的逻辑进行解耦</p>","more":"<h2 id=\"观察者模式介绍\"><a href=\"#观察者模式介绍\" class=\"headerlink\" title=\"观察者模式介绍\"></a>观察者模式介绍</h2><p>观察者模式（Observer pattern）是一种管理对象及其行为和状态之间的关系的得力工具。</p>\n<p>用JavaScript的话来说，这种模式的实质就是对可以对程序中的某个对象的状态进行观察，并且在其发生改变时能够得到通知。</p>\n<p>所以，这个模式可以解决我们现在面对的问题：”对【数据变化】 -&gt; 【UI变化】这部分的逻辑进行解耦”</p>\n<p>观察者模式中存在两个角色：观察者和被观察者(又名订阅者和发布者)。下面是观察者模式的实现原理。</p>\n<h2 id=\"观察者模式实现原理\"><a href=\"#观察者模式实现原理\" class=\"headerlink\" title=\"观察者模式实现原理\"></a>观察者模式实现原理</h2><p>可以通过一个实例来了解观察者模式的运行原理。</p>\n<p>首先，建立一个描述观察者的类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.Update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，建立一个描述观察者队列的类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ObserverList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observerList = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.Add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.observerList.push(obj);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.Empty = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observerList = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.Count = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.observerList.length;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.Get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt; <span class=\"number\">-1</span> &amp;&amp; index &lt; <span class=\"keyword\">this</span>.observerList.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.observerList[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.Insert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pointer = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observerList.unshift(obj);</span><br><span class=\"line\">        pointer = index;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index === <span class=\"keyword\">this</span>.observerList.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observerList.push(obj);</span><br><span class=\"line\">        pointer = index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pointer;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.IndexOf = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, startIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = startIndex, pointer = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; <span class=\"keyword\">this</span>.observerList.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.observerList[i] === obj) &#123;</span><br><span class=\"line\">            pointer = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pointer;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ObserverList.prototype.RemoveAt = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observerList.shift();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index === <span class=\"keyword\">this</span>.observerList.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observerList.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Extend an object with an extension</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">extension, obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> extension) &#123;</span><br><span class=\"line\">        obj[key] = extension[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着，建立一个描述被观察者的类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Subject</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers = <span class=\"keyword\">new</span> ObserverList();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Subject.prototype.AddObserver = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">observer</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.Add(observer);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Subject.prototype.RemoveObserver = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">observer</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.RemoveAt(<span class=\"keyword\">this</span>.observers.IndexOf(observer, <span class=\"number\">0</span>));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Subject.prototype.Notify = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> observerCount = <span class=\"keyword\">this</span>.observers.Count();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; observerCount; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observers.Get(i).Update(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意这里Subject类的Notify方法。在观察者模式中，观察者可以观察到被观察者，原因就是：被观察者把观察者的引用存储起来，被观察者可以进行”通告”，对所有观察者进行调用(发送信息)。</p>\n</blockquote>\n<p>下面是一个具体的实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;button id=<span class=\"string\">\"addNewObserver\"</span>&gt;Add New Observer checkbox&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;input id=\"mainCheckbox\" type=\"checkbox\" /</span>&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"observersContainer\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"./observer-pattern.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"comment\">// 我们DOM 元素的引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> controlCheckbox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mainCheckbox\"</span>),</span><br><span class=\"line\">            addBtn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"addNewObserver\"</span>),</span><br><span class=\"line\">            container = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"observersContainer\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 具体的被观察者</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Subject 类扩展controlCheckbox 类</span></span><br><span class=\"line\">        extend(<span class=\"keyword\">new</span> Subject(), controlCheckbox);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//点击checkbox 将会触发对观察者的通知</span></span><br><span class=\"line\">        controlCheckbox[<span class=\"string\">\"onclick\"</span>] = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"controlCheckbox.Notify(controlCheckbox.checked)\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        addBtn[<span class=\"string\">\"onclick\"</span>] = AddNewObserver;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 具体的观察者</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AddNewObserver</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//建立一个新的用于增加的checkbox</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> check = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"input\"</span>);</span><br><span class=\"line\">            check.type = <span class=\"string\">\"checkbox\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 使用Observer 类扩展checkbox</span></span><br><span class=\"line\">            extend(<span class=\"keyword\">new</span> Observer(), check);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 使用定制的Update函数重载</span></span><br><span class=\"line\">            check.Update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.checked = value;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 增加新的观察者到我们主要的被观察者的观察者列表中</span></span><br><span class=\"line\">            controlCheckbox.AddObserver(check);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将元素添加到容器的最后</span></span><br><span class=\"line\">            container.appendChild(check);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，观察者模式使用方式简述完毕。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://book.douban.com/subject/26382780/\" target=\"_blank\" rel=\"noopener\">《JavaScript设计模式与开发实践》</a></p>\n<p><a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/\" target=\"_blank\" rel=\"noopener\">Learning JavaScript Design Patterns</a><br><a href=\"http://www.oschina.net/translate/learning-javascript-design-patterns#introduction\" target=\"_blank\" rel=\"noopener\">Learning JavaScript Design Patterns 中文版</a></p>"},{"title":"对\"数据变化->UI变化\"间的逻辑进行解耦(2)--发布/订阅模式介绍与简略使用","date":"2018-02-09T10:12:58.000Z","_content":"\n\"数据变化->UI变化\"间的逻辑解耦已经完成，显而易见，在web前端层面，被观察者通常是数据模型，观察者通常是web ui组件。\n\n在交互丰富的页面中（比如各种推广活动页），通常会有多个被观察者（每个ajax请求都对应一个被观察者），对应多个观察者（页面ui组件）。\n\n随着数据模型复杂度的提高，这种多对多的关系整理起来会越来越复杂（被观察者会被多个观察者观察，观察者自然也有可能观察多个被观察者），所以，我们需要对此进行解决。\n<escape><!-- more --></escape>\n\n## 发布/订阅模式介绍\n\n发布/订阅模式是观察者模式的变体。\n\n在观察者模式中，观察者需要到被观察中进行注册。\n\n在发布/订阅模式中，订阅者（观察者）不需要到发布者（被观察者）中注册，他们之间存在一个一个主题/事件频道。代码可以在频道中定义各种事件，发布者可以通过事件广播参数，订阅者可以通过事件接收参数。\n\n## 发布/订阅模式实现原理\n\n我们可以通过一个实例来了解发布/订阅模式的运行原理。\n\n```javascript\nfunction Publisher() {\n    this.topics = {};\n    this.subUid = -1;\n}\n\nPublisher.prototype.publish = function (topic, args) {\n\n    if (!this.topics[topic]) {\n        return false;\n    }\n\n    var subscribers = this.topics[topic],\n        len = subscribers ? subscribers.length : 0;\n\n    while (len--) {\n        subscribers[len].func(topic, args);\n    }\n\n    return this;\n};\n\nPublisher.prototype.subscribe = function (topic, func) {\n\n    if (!this.topics[topic]) {\n        this.topics[topic] = [];\n    }\n\n    var token = (++this.subUid).toString();\n    this.topics[topic].push({\n        token: token,\n        func: func\n    });\n    return token;\n};\n\nPublisher.prototype.unsubscribe = function (token) {\n    for (var m in this.topics) {\n        if (this.topics[m]) {\n            for (var i = 0, j = this.topics[m].length; i < j; i++) {\n                if (this.topics[m][i].token === token) {\n                    this.topics[m].splice(i, 1);\n                    return token;\n                }\n            }\n        }\n    }\n    return this;\n};\n\nvar Subscriber = function (name) {\n    this.name = name;\n}\n\nSubscriber.prototype.log = function (topic, message) {\n    console.log('I am ' + this.name + ', I receive message from ' + topic + ', the message is: ' + message);\n}\n\nvar publisher = new Publisher();\n\nvar subscriber1 = new Subscriber('subscriber1');\nvar subscriber2 = new Subscriber('subscriber2');\nvar subscriber3 = new Subscriber('subscriber3');\nvar subscriber4 = new Subscriber('subscriber4');\nvar subscriber5 = new Subscriber('subscriber5');\n\npublisher.subscribe('channer1', subscriber1.log.bind(subscriber1));\npublisher.subscribe('channer2', subscriber2.log.bind(subscriber2));\npublisher.subscribe('channer3', subscriber3.log.bind(subscriber3));\npublisher.subscribe('channer1', subscriber4.log.bind(subscriber4));\npublisher.subscribe('channer1', subscriber5.log.bind(subscriber5));\n\npublisher.publish('channer1', 'channer1 is big');\npublisher.publish('channer2', 'channer2 is not big');\npublisher.publish('channer3', 'channer3 is small');\n```\n\n发布/订阅模式使用方式简述完毕。\n\n## 参考\n\n[《JavaScript设计模式与开发实践》](https://book.douban.com/subject/26382780/)\n\n[Learning JavaScript Design Patterns](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)\n[Learning JavaScript Design Patterns 中文版](http://www.oschina.net/translate/learning-javascript-design-patterns#introduction)","source":"_posts/publisher-subscriber-pattern.md","raw":"---\ntitle: 对\"数据变化->UI变化\"间的逻辑进行解耦(2)--发布/订阅模式介绍与简略使用\ndate: 2018-02-09 18:12:58\ntags: [设计模式]\n---\n\n\"数据变化->UI变化\"间的逻辑解耦已经完成，显而易见，在web前端层面，被观察者通常是数据模型，观察者通常是web ui组件。\n\n在交互丰富的页面中（比如各种推广活动页），通常会有多个被观察者（每个ajax请求都对应一个被观察者），对应多个观察者（页面ui组件）。\n\n随着数据模型复杂度的提高，这种多对多的关系整理起来会越来越复杂（被观察者会被多个观察者观察，观察者自然也有可能观察多个被观察者），所以，我们需要对此进行解决。\n<escape><!-- more --></escape>\n\n## 发布/订阅模式介绍\n\n发布/订阅模式是观察者模式的变体。\n\n在观察者模式中，观察者需要到被观察中进行注册。\n\n在发布/订阅模式中，订阅者（观察者）不需要到发布者（被观察者）中注册，他们之间存在一个一个主题/事件频道。代码可以在频道中定义各种事件，发布者可以通过事件广播参数，订阅者可以通过事件接收参数。\n\n## 发布/订阅模式实现原理\n\n我们可以通过一个实例来了解发布/订阅模式的运行原理。\n\n```javascript\nfunction Publisher() {\n    this.topics = {};\n    this.subUid = -1;\n}\n\nPublisher.prototype.publish = function (topic, args) {\n\n    if (!this.topics[topic]) {\n        return false;\n    }\n\n    var subscribers = this.topics[topic],\n        len = subscribers ? subscribers.length : 0;\n\n    while (len--) {\n        subscribers[len].func(topic, args);\n    }\n\n    return this;\n};\n\nPublisher.prototype.subscribe = function (topic, func) {\n\n    if (!this.topics[topic]) {\n        this.topics[topic] = [];\n    }\n\n    var token = (++this.subUid).toString();\n    this.topics[topic].push({\n        token: token,\n        func: func\n    });\n    return token;\n};\n\nPublisher.prototype.unsubscribe = function (token) {\n    for (var m in this.topics) {\n        if (this.topics[m]) {\n            for (var i = 0, j = this.topics[m].length; i < j; i++) {\n                if (this.topics[m][i].token === token) {\n                    this.topics[m].splice(i, 1);\n                    return token;\n                }\n            }\n        }\n    }\n    return this;\n};\n\nvar Subscriber = function (name) {\n    this.name = name;\n}\n\nSubscriber.prototype.log = function (topic, message) {\n    console.log('I am ' + this.name + ', I receive message from ' + topic + ', the message is: ' + message);\n}\n\nvar publisher = new Publisher();\n\nvar subscriber1 = new Subscriber('subscriber1');\nvar subscriber2 = new Subscriber('subscriber2');\nvar subscriber3 = new Subscriber('subscriber3');\nvar subscriber4 = new Subscriber('subscriber4');\nvar subscriber5 = new Subscriber('subscriber5');\n\npublisher.subscribe('channer1', subscriber1.log.bind(subscriber1));\npublisher.subscribe('channer2', subscriber2.log.bind(subscriber2));\npublisher.subscribe('channer3', subscriber3.log.bind(subscriber3));\npublisher.subscribe('channer1', subscriber4.log.bind(subscriber4));\npublisher.subscribe('channer1', subscriber5.log.bind(subscriber5));\n\npublisher.publish('channer1', 'channer1 is big');\npublisher.publish('channer2', 'channer2 is not big');\npublisher.publish('channer3', 'channer3 is small');\n```\n\n发布/订阅模式使用方式简述完毕。\n\n## 参考\n\n[《JavaScript设计模式与开发实践》](https://book.douban.com/subject/26382780/)\n\n[Learning JavaScript Design Patterns](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)\n[Learning JavaScript Design Patterns 中文版](http://www.oschina.net/translate/learning-javascript-design-patterns#introduction)","slug":"publisher-subscriber-pattern","published":1,"updated":"2019-08-29T01:32:47.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4v7000tuaidykrd7ksi","content":"<p>“数据变化-&gt;UI变化”间的逻辑解耦已经完成，显而易见，在web前端层面，被观察者通常是数据模型，观察者通常是web ui组件。</p>\n<p>在交互丰富的页面中（比如各种推广活动页），通常会有多个被观察者（每个ajax请求都对应一个被观察者），对应多个观察者（页面ui组件）。</p>\n<p>随着数据模型复杂度的提高，这种多对多的关系整理起来会越来越复杂（被观察者会被多个观察者观察，观察者自然也有可能观察多个被观察者），所以，我们需要对此进行解决。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"发布-订阅模式介绍\"><a href=\"#发布-订阅模式介绍\" class=\"headerlink\" title=\"发布/订阅模式介绍\"></a>发布/订阅模式介绍</h2><p>发布/订阅模式是观察者模式的变体。</p>\n<p>在观察者模式中，观察者需要到被观察中进行注册。</p>\n<p>在发布/订阅模式中，订阅者（观察者）不需要到发布者（被观察者）中注册，他们之间存在一个一个主题/事件频道。代码可以在频道中定义各种事件，发布者可以通过事件广播参数，订阅者可以通过事件接收参数。</p>\n<h2 id=\"发布-订阅模式实现原理\"><a href=\"#发布-订阅模式实现原理\" class=\"headerlink\" title=\"发布/订阅模式实现原理\"></a>发布/订阅模式实现原理</h2><p>我们可以通过一个实例来了解发布/订阅模式的运行原理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Publisher</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.topics = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subUid = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Publisher.prototype.publish = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">topic, args</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.topics[topic]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> subscribers = <span class=\"keyword\">this</span>.topics[topic],</span><br><span class=\"line\">        len = subscribers ? subscribers.length : <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (len--) &#123;</span><br><span class=\"line\">        subscribers[len].func(topic, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Publisher.prototype.subscribe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">topic, func</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.topics[topic]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.topics[topic] = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> token = (++<span class=\"keyword\">this</span>.subUid).toString();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.topics[topic].push(&#123;</span><br><span class=\"line\">        token: token,</span><br><span class=\"line\">        func: func</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Publisher.prototype.unsubscribe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> m <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.topics) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.topics[m]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, j = <span class=\"keyword\">this</span>.topics[m].length; i &lt; j; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.topics[m][i].token === token) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.topics[m].splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Subscriber = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Subscriber.prototype.log = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">topic, message</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">', I receive message from '</span> + topic + <span class=\"string\">', the message is: '</span> + message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> publisher = <span class=\"keyword\">new</span> Publisher();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> subscriber1 = <span class=\"keyword\">new</span> Subscriber(<span class=\"string\">'subscriber1'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> subscriber2 = <span class=\"keyword\">new</span> Subscriber(<span class=\"string\">'subscriber2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> subscriber3 = <span class=\"keyword\">new</span> Subscriber(<span class=\"string\">'subscriber3'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> subscriber4 = <span class=\"keyword\">new</span> Subscriber(<span class=\"string\">'subscriber4'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> subscriber5 = <span class=\"keyword\">new</span> Subscriber(<span class=\"string\">'subscriber5'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">publisher.subscribe(<span class=\"string\">'channer1'</span>, subscriber1.log.bind(subscriber1));</span><br><span class=\"line\">publisher.subscribe(<span class=\"string\">'channer2'</span>, subscriber2.log.bind(subscriber2));</span><br><span class=\"line\">publisher.subscribe(<span class=\"string\">'channer3'</span>, subscriber3.log.bind(subscriber3));</span><br><span class=\"line\">publisher.subscribe(<span class=\"string\">'channer1'</span>, subscriber4.log.bind(subscriber4));</span><br><span class=\"line\">publisher.subscribe(<span class=\"string\">'channer1'</span>, subscriber5.log.bind(subscriber5));</span><br><span class=\"line\"></span><br><span class=\"line\">publisher.publish(<span class=\"string\">'channer1'</span>, <span class=\"string\">'channer1 is big'</span>);</span><br><span class=\"line\">publisher.publish(<span class=\"string\">'channer2'</span>, <span class=\"string\">'channer2 is not big'</span>);</span><br><span class=\"line\">publisher.publish(<span class=\"string\">'channer3'</span>, <span class=\"string\">'channer3 is small'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>发布/订阅模式使用方式简述完毕。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://book.douban.com/subject/26382780/\" target=\"_blank\" rel=\"noopener\">《JavaScript设计模式与开发实践》</a></p>\n<p><a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/\" target=\"_blank\" rel=\"noopener\">Learning JavaScript Design Patterns</a><br><a href=\"http://www.oschina.net/translate/learning-javascript-design-patterns#introduction\" target=\"_blank\" rel=\"noopener\">Learning JavaScript Design Patterns 中文版</a></p>\n","site":{"data":{}},"length":2771,"excerpt":"<p>“数据变化-&gt;UI变化”间的逻辑解耦已经完成，显而易见，在web前端层面，被观察者通常是数据模型，观察者通常是web ui组件。</p>\n<p>在交互丰富的页面中（比如各种推广活动页），通常会有多个被观察者（每个ajax请求都对应一个被观察者），对应多个观察者（页面ui组件）。</p>\n<p>随着数据模型复杂度的提高，这种多对多的关系整理起来会越来越复杂（被观察者会被多个观察者观察，观察者自然也有可能观察多个被观察者），所以，我们需要对此进行解决。</p>","more":"<h2 id=\"发布-订阅模式介绍\"><a href=\"#发布-订阅模式介绍\" class=\"headerlink\" title=\"发布/订阅模式介绍\"></a>发布/订阅模式介绍</h2><p>发布/订阅模式是观察者模式的变体。</p>\n<p>在观察者模式中，观察者需要到被观察中进行注册。</p>\n<p>在发布/订阅模式中，订阅者（观察者）不需要到发布者（被观察者）中注册，他们之间存在一个一个主题/事件频道。代码可以在频道中定义各种事件，发布者可以通过事件广播参数，订阅者可以通过事件接收参数。</p>\n<h2 id=\"发布-订阅模式实现原理\"><a href=\"#发布-订阅模式实现原理\" class=\"headerlink\" title=\"发布/订阅模式实现原理\"></a>发布/订阅模式实现原理</h2><p>我们可以通过一个实例来了解发布/订阅模式的运行原理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Publisher</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.topics = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subUid = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Publisher.prototype.publish = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">topic, args</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.topics[topic]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> subscribers = <span class=\"keyword\">this</span>.topics[topic],</span><br><span class=\"line\">        len = subscribers ? subscribers.length : <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (len--) &#123;</span><br><span class=\"line\">        subscribers[len].func(topic, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Publisher.prototype.subscribe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">topic, func</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.topics[topic]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.topics[topic] = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> token = (++<span class=\"keyword\">this</span>.subUid).toString();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.topics[topic].push(&#123;</span><br><span class=\"line\">        token: token,</span><br><span class=\"line\">        func: func</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Publisher.prototype.unsubscribe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> m <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.topics) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.topics[m]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, j = <span class=\"keyword\">this</span>.topics[m].length; i &lt; j; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.topics[m][i].token === token) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.topics[m].splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Subscriber = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Subscriber.prototype.log = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">topic, message</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">', I receive message from '</span> + topic + <span class=\"string\">', the message is: '</span> + message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> publisher = <span class=\"keyword\">new</span> Publisher();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> subscriber1 = <span class=\"keyword\">new</span> Subscriber(<span class=\"string\">'subscriber1'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> subscriber2 = <span class=\"keyword\">new</span> Subscriber(<span class=\"string\">'subscriber2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> subscriber3 = <span class=\"keyword\">new</span> Subscriber(<span class=\"string\">'subscriber3'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> subscriber4 = <span class=\"keyword\">new</span> Subscriber(<span class=\"string\">'subscriber4'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> subscriber5 = <span class=\"keyword\">new</span> Subscriber(<span class=\"string\">'subscriber5'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">publisher.subscribe(<span class=\"string\">'channer1'</span>, subscriber1.log.bind(subscriber1));</span><br><span class=\"line\">publisher.subscribe(<span class=\"string\">'channer2'</span>, subscriber2.log.bind(subscriber2));</span><br><span class=\"line\">publisher.subscribe(<span class=\"string\">'channer3'</span>, subscriber3.log.bind(subscriber3));</span><br><span class=\"line\">publisher.subscribe(<span class=\"string\">'channer1'</span>, subscriber4.log.bind(subscriber4));</span><br><span class=\"line\">publisher.subscribe(<span class=\"string\">'channer1'</span>, subscriber5.log.bind(subscriber5));</span><br><span class=\"line\"></span><br><span class=\"line\">publisher.publish(<span class=\"string\">'channer1'</span>, <span class=\"string\">'channer1 is big'</span>);</span><br><span class=\"line\">publisher.publish(<span class=\"string\">'channer2'</span>, <span class=\"string\">'channer2 is not big'</span>);</span><br><span class=\"line\">publisher.publish(<span class=\"string\">'channer3'</span>, <span class=\"string\">'channer3 is small'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>发布/订阅模式使用方式简述完毕。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://book.douban.com/subject/26382780/\" target=\"_blank\" rel=\"noopener\">《JavaScript设计模式与开发实践》</a></p>\n<p><a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/\" target=\"_blank\" rel=\"noopener\">Learning JavaScript Design Patterns</a><br><a href=\"http://www.oschina.net/translate/learning-javascript-design-patterns#introduction\" target=\"_blank\" rel=\"noopener\">Learning JavaScript Design Patterns 中文版</a></p>"},{"title":"redis PubSub","date":"2019-07-09T09:45:58.000Z","_content":"\nPublisherSubscriber，发布者订阅者模型，支持消息多播\n<escape><!-- more --></escape>\n\n![](/images/redis-PubSub/overview.png)","source":"_posts/redis-PubSub.md","raw":"---\ntitle: redis PubSub\ndate: 2019-07-09 17:45:58\ntags: [redis]\n---\n\nPublisherSubscriber，发布者订阅者模型，支持消息多播\n<escape><!-- more --></escape>\n\n![](/images/redis-PubSub/overview.png)","slug":"redis-PubSub","published":1,"updated":"2019-08-28T09:35:54.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4v9000vuaidgh1gkm4e","content":"<p>PublisherSubscriber，发布者订阅者模型，支持消息多播</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/redis-PubSub/overview.png\" alt></p>\n","site":{"data":{}},"length":35,"excerpt":"<p>PublisherSubscriber，发布者订阅者模型，支持消息多播</p>","more":"<p><img src=\"/images/redis-PubSub/overview.png\" alt></p>"},{"title":"redis 持久化","date":"2019-07-09T07:40:58.000Z","_content":"\nRedis 的数据全部在内存里，如果突然宕机，数据就会全部丢失，因此必须有一种机制来保证 Redis 的数据不会因为故障而丢失，这种机制就是 Redis 的持久化机制。\n<escape><!-- more --></escape>\n\n![](/images/redis-datapersistence/overview.png)","source":"_posts/redis-datapersistence.md","raw":"---\ntitle: redis 持久化\ndate: 2019-07-09 15:40:58\ntags: [redis]\n---\n\nRedis 的数据全部在内存里，如果突然宕机，数据就会全部丢失，因此必须有一种机制来保证 Redis 的数据不会因为故障而丢失，这种机制就是 Redis 的持久化机制。\n<escape><!-- more --></escape>\n\n![](/images/redis-datapersistence/overview.png)","slug":"redis-datapersistence","published":1,"updated":"2019-08-28T09:21:02.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4va000xuaidk8qfyw66","content":"<p>Redis 的数据全部在内存里，如果突然宕机，数据就会全部丢失，因此必须有一种机制来保证 Redis 的数据不会因为故障而丢失，这种机制就是 Redis 的持久化机制。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/redis-datapersistence/overview.png\" alt></p>\n","site":{"data":{}},"length":84,"excerpt":"<p>Redis 的数据全部在内存里，如果突然宕机，数据就会全部丢失，因此必须有一种机制来保证 Redis 的数据不会因为故障而丢失，这种机制就是 Redis 的持久化机制。</p>","more":"<p><img src=\"/images/redis-datapersistence/overview.png\" alt></p>"},{"title":"redis 线程io模型","date":"2019-07-07T07:30:58.000Z","_content":"\nredis 是个单线程程序\n<escape><!-- more --></escape>\n\n![](/images/redis-io/overview.png)","source":"_posts/redis-io.md","raw":"---\ntitle: redis 线程io模型\ndate: 2019-07-07 15:30:58\ntags: [redis]\n---\n\nredis 是个单线程程序\n<escape><!-- more --></escape>\n\n![](/images/redis-io/overview.png)","slug":"redis-io","published":1,"updated":"2019-08-28T08:10:25.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4vb0010uaidtqyobala","content":"<p>redis 是个单线程程序</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/redis-io/overview.png\" alt></p>\n","site":{"data":{}},"length":13,"excerpt":"<p>redis 是个单线程程序</p>","more":"<p><img src=\"/images/redis-io/overview.png\" alt></p>"},{"title":"redis 管道","date":"2019-07-09T08:32:58.000Z","_content":"\nRedis 管道 (Pipeline) 本身并不是 Redis 服务器直接提供的技术，这个技术本质上是由客户端提供的，跟服务器没有什么直接的关系。\n<escape><!-- more --></escape>\n\n![](/images/redis-pipe/overview.png)","source":"_posts/redis-pipe.md","raw":"---\ntitle: redis 管道\ndate: 2019-07-09 16:32:58\ntags: [redis]\n---\n\nRedis 管道 (Pipeline) 本身并不是 Redis 服务器直接提供的技术，这个技术本质上是由客户端提供的，跟服务器没有什么直接的关系。\n<escape><!-- more --></escape>\n\n![](/images/redis-pipe/overview.png)","slug":"redis-pipe","published":1,"updated":"2019-08-28T09:32:42.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4vd0012uaid2tcnzx0u","content":"<p>Redis 管道 (Pipeline) 本身并不是 Redis 服务器直接提供的技术，这个技术本质上是由客户端提供的，跟服务器没有什么直接的关系。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/redis-pipe/overview.png\" alt></p>\n","site":{"data":{}},"length":73,"excerpt":"<p>Redis 管道 (Pipeline) 本身并不是 Redis 服务器直接提供的技术，这个技术本质上是由客户端提供的，跟服务器没有什么直接的关系。</p>","more":"<p><img src=\"/images/redis-pipe/overview.png\" alt></p>"},{"title":"redis 通信协议","date":"2019-07-08T07:30:58.000Z","_content":"\nredis 通信协议：RESP(Redis Serialization Protocol)\n<escape><!-- more --></escape>\n\n![](/images/redis-protocol/overview.png)","source":"_posts/redis-protocol.md","raw":"---\ntitle: redis 通信协议\ndate: 2019-07-08 15:30:58\ntags: [redis]\n---\n\nredis 通信协议：RESP(Redis Serialization Protocol)\n<escape><!-- more --></escape>\n\n![](/images/redis-protocol/overview.png)","slug":"redis-protocol","published":1,"updated":"2019-08-28T08:11:14.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4ve0015uaidxy6ehyf6","content":"<p>redis 通信协议：RESP(Redis Serialization Protocol)</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/redis-protocol/overview.png\" alt></p>\n","site":{"data":{}},"length":45,"excerpt":"<p>redis 通信协议：RESP(Redis Serialization Protocol)</p>","more":"<p><img src=\"/images/redis-protocol/overview.png\" alt></p>"},{"title":"redis 事务","date":"2019-07-09T09:06:58.000Z","_content":"\nRedis 的事务使用非常简单，不同于关系数据库，我们无须理解那么多复杂的事务模型，就可以直接使用。不过也正是因为这种简单性，它的事务模型很不严格，这要求我们不能像使用关系数据库的事务一样来使用 Redis。\n<escape><!-- more --></escape>\n\n![](/images/redis-transaction/overview.png)","source":"_posts/redis-transaction.md","raw":"---\ntitle: redis 事务\ndate: 2019-07-09 17:06:58\ntags: [redis]\n---\n\nRedis 的事务使用非常简单，不同于关系数据库，我们无须理解那么多复杂的事务模型，就可以直接使用。不过也正是因为这种简单性，它的事务模型很不严格，这要求我们不能像使用关系数据库的事务一样来使用 Redis。\n<escape><!-- more --></escape>\n\n![](/images/redis-transaction/overview.png)","slug":"redis-transaction","published":1,"updated":"2019-08-28T09:34:48.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4vg0017uaidt50fyq6u","content":"<p>Redis 的事务使用非常简单，不同于关系数据库，我们无须理解那么多复杂的事务模型，就可以直接使用。不过也正是因为这种简单性，它的事务模型很不严格，这要求我们不能像使用关系数据库的事务一样来使用 Redis。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/redis-transaction/overview.png\" alt></p>\n","site":{"data":{}},"length":104,"excerpt":"<p>Redis 的事务使用非常简单，不同于关系数据库，我们无须理解那么多复杂的事务模型，就可以直接使用。不过也正是因为这种简单性，它的事务模型很不严格，这要求我们不能像使用关系数据库的事务一样来使用 Redis。</p>","more":"<p><img src=\"/images/redis-transaction/overview.png\" alt></p>"},{"title":"redis 主从同步","date":"2019-07-11T07:51:58.000Z","_content":"\n有了主从，当 master 挂掉的时候，运维让从库过来接管，服务就可以继续，否则 master 需要经过数据恢复和重启的过程，这就可能会拖很长的时间，影响线上业务的持续服务。\n<escape><!-- more --></escape>\n\n![](/images/redis-master-slave/overview.png)","source":"_posts/redis-master-slave.md","raw":"---\ntitle: redis 主从同步\ndate: 2019-07-11 15:51:58\ntags: [redis]\n---\n\n有了主从，当 master 挂掉的时候，运维让从库过来接管，服务就可以继续，否则 master 需要经过数据恢复和重启的过程，这就可能会拖很长的时间，影响线上业务的持续服务。\n<escape><!-- more --></escape>\n\n![](/images/redis-master-slave/overview.png)","slug":"redis-master-slave","published":1,"updated":"2019-08-28T09:42:28.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4vh001auaidnvcvua34","content":"<p>有了主从，当 master 挂掉的时候，运维让从库过来接管，服务就可以继续，否则 master 需要经过数据恢复和重启的过程，这就可能会拖很长的时间，影响线上业务的持续服务。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/redis-master-slave/overview.png\" alt></p>\n","site":{"data":{}},"length":87,"excerpt":"<p>有了主从，当 master 挂掉的时候，运维让从库过来接管，服务就可以继续，否则 master 需要经过数据恢复和重启的过程，这就可能会拖很长的时间，影响线上业务的持续服务。</p>","more":"<p><img src=\"/images/redis-master-slave/overview.png\" alt></p>"},{"title":"redis 小对象压缩","date":"2019-07-10T12:06:58.000Z","_content":"\nRedis 是一个非常耗费内存的数据库，它所有的数据都放在内存里。如果我们不注意节约使用内存，Redis 就会因为我们的无节制使用出现内存不足而崩溃。\n<escape><!-- more --></escape>\n\n![](/images/redis-ziplist/overview.png)","source":"_posts/redis-ziplist.md","raw":"---\ntitle: redis 小对象压缩\ndate: 2019-07-10 20:06:58\ntags: [redis]\n---\n\nRedis 是一个非常耗费内存的数据库，它所有的数据都放在内存里。如果我们不注意节约使用内存，Redis 就会因为我们的无节制使用出现内存不足而崩溃。\n<escape><!-- more --></escape>\n\n![](/images/redis-ziplist/overview.png)","slug":"redis-ziplist","published":1,"updated":"2019-08-28T09:39:22.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4vj001cuaidmfsksn3o","content":"<p>Redis 是一个非常耗费内存的数据库，它所有的数据都放在内存里。如果我们不注意节约使用内存，Redis 就会因为我们的无节制使用出现内存不足而崩溃。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/redis-ziplist/overview.png\" alt></p>\n","site":{"data":{}},"length":75,"excerpt":"<p>Redis 是一个非常耗费内存的数据库，它所有的数据都放在内存里。如果我们不注意节约使用内存，Redis 就会因为我们的无节制使用出现内存不足而崩溃。</p>","more":"<p><img src=\"/images/redis-ziplist/overview.png\" alt></p>"},{"title":"沟通技巧小结","date":"2019-03-20T01:44:58.000Z","_content":"\n沟通技巧：用事实说话，用数据说话，结论先行\n\n<escape><!-- more --></escape>\n\n![](/images/talking-tricks/627b34fc-4ab1-11e9-a331-525400a20cd4.png)\n\n## 引用\n\n[《靠谱-顶尖咨询师教你的工作基本功》](https://book.douban.com/subject/27021786/)","source":"_posts/talking-tricks.md","raw":"---\ntitle: 沟通技巧小结\ndate: 2019-03-20 09:44:58\ntags: [沟通技巧]\n---\n\n沟通技巧：用事实说话，用数据说话，结论先行\n\n<escape><!-- more --></escape>\n\n![](/images/talking-tricks/627b34fc-4ab1-11e9-a331-525400a20cd4.png)\n\n## 引用\n\n[《靠谱-顶尖咨询师教你的工作基本功》](https://book.douban.com/subject/27021786/)","slug":"talking-tricks","published":1,"updated":"2019-08-28T08:07:07.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4vk001fuaidjaxwxasi","content":"<p>沟通技巧：用事实说话，用数据说话，结论先行</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/talking-tricks/627b34fc-4ab1-11e9-a331-525400a20cd4.png\" alt></p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://book.douban.com/subject/27021786/\" target=\"_blank\" rel=\"noopener\">《靠谱-顶尖咨询师教你的工作基本功》</a></p>\n","site":{"data":{}},"length":41,"excerpt":"<p>沟通技巧：用事实说话，用数据说话，结论先行</p>","more":"<p><img src=\"/images/talking-tricks/627b34fc-4ab1-11e9-a331-525400a20cd4.png\" alt></p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://book.douban.com/subject/27021786/\" target=\"_blank\" rel=\"noopener\">《靠谱-顶尖咨询师教你的工作基本功》</a></p>"},{"title":"TCP/IP协议群和http协议","date":"2018-06-19T11:23:58.000Z","_content":"\n## 关系图:\n\nhttp协议在TCP/IP协议群中的位置:\n\n![](/images/tcp-ip-http/tcpip.png)\n\n\n<escape><!-- more --></escape>\n\nTCP/IP协议群的分层：\n\n![](/images/tcp-ip-http/tcpip1.png)\n\n其中，与HTTP关系密切的协议:\n\n|名称|分层结构|主要作用|作用描述|\n|---|---|---|---|\n|DNS服务|应用层|负责域名解析|根据域名查询IP地址，或根据IP地址反查域名|\n|TCP协议|传输层|确保可靠性|提供可靠的字节流服务|\n|IP协议|网络层|负责传输|把各种数据包传送给对方|\n\n## 几个协议的概述\n\n### DNS服务\n\n用户通常使用主机名或域名来访问对方的计算机，而不是直接通过 IP地址访问。因为与 IP 地址的一组纯数字相比，用字母配合数字的表示形式来指定计算机名更符合人类的记忆习惯。但要让计算机去理解名称，相对而言就变得困难了。因为计算机更擅长处理一长串数字。 \n\n为了解决上述的问题，DNS 服务应运而生。DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。\n\n### TCP协议\n\nTCP 协议为了更容易传送大数据，将大块数据分割成以报文段（segment）为单位的数据包进行管理。采用三次握手(three-way handshaking)策略，把数据包送出去后并确认是否成功送达(确保可靠性)。\n\n握手过程中使用了 TCP 的标志（flag） — SYN（synchronize） 和ACK（acknowledgement）。发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。 \n\n### IP协议\n\nIP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC地址（Media Access Control Address）。\n\n|名称|描述|\n|---|---|\n|IP 地址|指明了节点被分配到的地址，容易发生改变|\n|MAC 地址|是指网卡所属的固定地址，一般不会发生改变|\n\nIP 间的通讯依赖 MAC地址，而 IP地址可以和 MAC地址进行配对，并且通过ARP协议（Address Resolution Protocol）来解析地址，从而通过通信方的 IP地址反查出对应的 MAC地址。当主机A要与主机B通信时，ARP协议（地址解析协议）可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，MAC地址一旦确定，主机A就能向主机B发送IP通信了。\n\n## 这些协议在一次http请求中的作用\n\n![](/images/tcp-ip-http/tcpip3.png)\n\n## web页面性能优化与这几个协议的关系\n\nweb页面性能优化，主要是以下几个方向：\n\n1. 尽量合并请求，减少页面总请求数：在http 1.1 协议下，每次完成一个http请求，实际都是建立了一个tcp请求，然后又断开；每次建立tcp请求，都需要花点时间在‘3次握手’上；尽量合并请求，可以省下建立tcp请求时的多余耗时。\n1. 增加浏览器的同时请求数：资源处于不同域名下，可以增加浏览器的http同时请求数；这个主要是对浏览器的策略做出应对。\n1. 资源压缩：体积越小的资源，下载的时间越短。\n1. 缓存：除了对http请求响应的缓存，浏览器还有可能对dns的解析结果做缓存","source":"_posts/tcp-ip-http.md","raw":"---\ntitle: TCP/IP协议群和http协议\ndate: 2018-06-19 19:23:58\ntags: [http, tcp, ip]\n---\n\n## 关系图:\n\nhttp协议在TCP/IP协议群中的位置:\n\n![](/images/tcp-ip-http/tcpip.png)\n\n\n<escape><!-- more --></escape>\n\nTCP/IP协议群的分层：\n\n![](/images/tcp-ip-http/tcpip1.png)\n\n其中，与HTTP关系密切的协议:\n\n|名称|分层结构|主要作用|作用描述|\n|---|---|---|---|\n|DNS服务|应用层|负责域名解析|根据域名查询IP地址，或根据IP地址反查域名|\n|TCP协议|传输层|确保可靠性|提供可靠的字节流服务|\n|IP协议|网络层|负责传输|把各种数据包传送给对方|\n\n## 几个协议的概述\n\n### DNS服务\n\n用户通常使用主机名或域名来访问对方的计算机，而不是直接通过 IP地址访问。因为与 IP 地址的一组纯数字相比，用字母配合数字的表示形式来指定计算机名更符合人类的记忆习惯。但要让计算机去理解名称，相对而言就变得困难了。因为计算机更擅长处理一长串数字。 \n\n为了解决上述的问题，DNS 服务应运而生。DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。\n\n### TCP协议\n\nTCP 协议为了更容易传送大数据，将大块数据分割成以报文段（segment）为单位的数据包进行管理。采用三次握手(three-way handshaking)策略，把数据包送出去后并确认是否成功送达(确保可靠性)。\n\n握手过程中使用了 TCP 的标志（flag） — SYN（synchronize） 和ACK（acknowledgement）。发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。 \n\n### IP协议\n\nIP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC地址（Media Access Control Address）。\n\n|名称|描述|\n|---|---|\n|IP 地址|指明了节点被分配到的地址，容易发生改变|\n|MAC 地址|是指网卡所属的固定地址，一般不会发生改变|\n\nIP 间的通讯依赖 MAC地址，而 IP地址可以和 MAC地址进行配对，并且通过ARP协议（Address Resolution Protocol）来解析地址，从而通过通信方的 IP地址反查出对应的 MAC地址。当主机A要与主机B通信时，ARP协议（地址解析协议）可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，MAC地址一旦确定，主机A就能向主机B发送IP通信了。\n\n## 这些协议在一次http请求中的作用\n\n![](/images/tcp-ip-http/tcpip3.png)\n\n## web页面性能优化与这几个协议的关系\n\nweb页面性能优化，主要是以下几个方向：\n\n1. 尽量合并请求，减少页面总请求数：在http 1.1 协议下，每次完成一个http请求，实际都是建立了一个tcp请求，然后又断开；每次建立tcp请求，都需要花点时间在‘3次握手’上；尽量合并请求，可以省下建立tcp请求时的多余耗时。\n1. 增加浏览器的同时请求数：资源处于不同域名下，可以增加浏览器的http同时请求数；这个主要是对浏览器的策略做出应对。\n1. 资源压缩：体积越小的资源，下载的时间越短。\n1. 缓存：除了对http请求响应的缓存，浏览器还有可能对dns的解析结果做缓存","slug":"tcp-ip-http","published":1,"updated":"2019-08-28T08:07:11.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4vl001huaid2h3defgr","content":"<h2 id=\"关系图\"><a href=\"#关系图\" class=\"headerlink\" title=\"关系图:\"></a>关系图:</h2><p>http协议在TCP/IP协议群中的位置:</p>\n<p><img src=\"/images/tcp-ip-http/tcpip.png\" alt></p>\n<a id=\"more\"></a>\n\n<p>TCP/IP协议群的分层：</p>\n<p><img src=\"/images/tcp-ip-http/tcpip1.png\" alt></p>\n<p>其中，与HTTP关系密切的协议:</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>分层结构</th>\n<th>主要作用</th>\n<th>作用描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DNS服务</td>\n<td>应用层</td>\n<td>负责域名解析</td>\n<td>根据域名查询IP地址，或根据IP地址反查域名</td>\n</tr>\n<tr>\n<td>TCP协议</td>\n<td>传输层</td>\n<td>确保可靠性</td>\n<td>提供可靠的字节流服务</td>\n</tr>\n<tr>\n<td>IP协议</td>\n<td>网络层</td>\n<td>负责传输</td>\n<td>把各种数据包传送给对方</td>\n</tr>\n</tbody></table>\n<h2 id=\"几个协议的概述\"><a href=\"#几个协议的概述\" class=\"headerlink\" title=\"几个协议的概述\"></a>几个协议的概述</h2><h3 id=\"DNS服务\"><a href=\"#DNS服务\" class=\"headerlink\" title=\"DNS服务\"></a>DNS服务</h3><p>用户通常使用主机名或域名来访问对方的计算机，而不是直接通过 IP地址访问。因为与 IP 地址的一组纯数字相比，用字母配合数字的表示形式来指定计算机名更符合人类的记忆习惯。但要让计算机去理解名称，相对而言就变得困难了。因为计算机更擅长处理一长串数字。 </p>\n<p>为了解决上述的问题，DNS 服务应运而生。DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。</p>\n<h3 id=\"TCP协议\"><a href=\"#TCP协议\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h3><p>TCP 协议为了更容易传送大数据，将大块数据分割成以报文段（segment）为单位的数据包进行管理。采用三次握手(three-way handshaking)策略，把数据包送出去后并确认是否成功送达(确保可靠性)。</p>\n<p>握手过程中使用了 TCP 的标志（flag） — SYN（synchronize） 和ACK（acknowledgement）。发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。 </p>\n<h3 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a>IP协议</h3><p>IP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC地址（Media Access Control Address）。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IP 地址</td>\n<td>指明了节点被分配到的地址，容易发生改变</td>\n</tr>\n<tr>\n<td>MAC 地址</td>\n<td>是指网卡所属的固定地址，一般不会发生改变</td>\n</tr>\n</tbody></table>\n<p>IP 间的通讯依赖 MAC地址，而 IP地址可以和 MAC地址进行配对，并且通过ARP协议（Address Resolution Protocol）来解析地址，从而通过通信方的 IP地址反查出对应的 MAC地址。当主机A要与主机B通信时，ARP协议（地址解析协议）可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，MAC地址一旦确定，主机A就能向主机B发送IP通信了。</p>\n<h2 id=\"这些协议在一次http请求中的作用\"><a href=\"#这些协议在一次http请求中的作用\" class=\"headerlink\" title=\"这些协议在一次http请求中的作用\"></a>这些协议在一次http请求中的作用</h2><p><img src=\"/images/tcp-ip-http/tcpip3.png\" alt></p>\n<h2 id=\"web页面性能优化与这几个协议的关系\"><a href=\"#web页面性能优化与这几个协议的关系\" class=\"headerlink\" title=\"web页面性能优化与这几个协议的关系\"></a>web页面性能优化与这几个协议的关系</h2><p>web页面性能优化，主要是以下几个方向：</p>\n<ol>\n<li>尽量合并请求，减少页面总请求数：在http 1.1 协议下，每次完成一个http请求，实际都是建立了一个tcp请求，然后又断开；每次建立tcp请求，都需要花点时间在‘3次握手’上；尽量合并请求，可以省下建立tcp请求时的多余耗时。</li>\n<li>增加浏览器的同时请求数：资源处于不同域名下，可以增加浏览器的http同时请求数；这个主要是对浏览器的策略做出应对。</li>\n<li>资源压缩：体积越小的资源，下载的时间越短。</li>\n<li>缓存：除了对http请求响应的缓存，浏览器还有可能对dns的解析结果做缓存</li>\n</ol>\n","site":{"data":{}},"length":1296,"excerpt":"<h2 id=\"关系图\"><a href=\"#关系图\" class=\"headerlink\" title=\"关系图:\"></a>关系图:</h2><p>http协议在TCP/IP协议群中的位置:</p>\n<p><img src=\"/images/tcp-ip-http/tcpip.png\" alt></p>","more":"<p>TCP/IP协议群的分层：</p>\n<p><img src=\"/images/tcp-ip-http/tcpip1.png\" alt></p>\n<p>其中，与HTTP关系密切的协议:</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>分层结构</th>\n<th>主要作用</th>\n<th>作用描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DNS服务</td>\n<td>应用层</td>\n<td>负责域名解析</td>\n<td>根据域名查询IP地址，或根据IP地址反查域名</td>\n</tr>\n<tr>\n<td>TCP协议</td>\n<td>传输层</td>\n<td>确保可靠性</td>\n<td>提供可靠的字节流服务</td>\n</tr>\n<tr>\n<td>IP协议</td>\n<td>网络层</td>\n<td>负责传输</td>\n<td>把各种数据包传送给对方</td>\n</tr>\n</tbody></table>\n<h2 id=\"几个协议的概述\"><a href=\"#几个协议的概述\" class=\"headerlink\" title=\"几个协议的概述\"></a>几个协议的概述</h2><h3 id=\"DNS服务\"><a href=\"#DNS服务\" class=\"headerlink\" title=\"DNS服务\"></a>DNS服务</h3><p>用户通常使用主机名或域名来访问对方的计算机，而不是直接通过 IP地址访问。因为与 IP 地址的一组纯数字相比，用字母配合数字的表示形式来指定计算机名更符合人类的记忆习惯。但要让计算机去理解名称，相对而言就变得困难了。因为计算机更擅长处理一长串数字。 </p>\n<p>为了解决上述的问题，DNS 服务应运而生。DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。</p>\n<h3 id=\"TCP协议\"><a href=\"#TCP协议\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h3><p>TCP 协议为了更容易传送大数据，将大块数据分割成以报文段（segment）为单位的数据包进行管理。采用三次握手(three-way handshaking)策略，把数据包送出去后并确认是否成功送达(确保可靠性)。</p>\n<p>握手过程中使用了 TCP 的标志（flag） — SYN（synchronize） 和ACK（acknowledgement）。发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。 </p>\n<h3 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a>IP协议</h3><p>IP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC地址（Media Access Control Address）。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IP 地址</td>\n<td>指明了节点被分配到的地址，容易发生改变</td>\n</tr>\n<tr>\n<td>MAC 地址</td>\n<td>是指网卡所属的固定地址，一般不会发生改变</td>\n</tr>\n</tbody></table>\n<p>IP 间的通讯依赖 MAC地址，而 IP地址可以和 MAC地址进行配对，并且通过ARP协议（Address Resolution Protocol）来解析地址，从而通过通信方的 IP地址反查出对应的 MAC地址。当主机A要与主机B通信时，ARP协议（地址解析协议）可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，MAC地址一旦确定，主机A就能向主机B发送IP通信了。</p>\n<h2 id=\"这些协议在一次http请求中的作用\"><a href=\"#这些协议在一次http请求中的作用\" class=\"headerlink\" title=\"这些协议在一次http请求中的作用\"></a>这些协议在一次http请求中的作用</h2><p><img src=\"/images/tcp-ip-http/tcpip3.png\" alt></p>\n<h2 id=\"web页面性能优化与这几个协议的关系\"><a href=\"#web页面性能优化与这几个协议的关系\" class=\"headerlink\" title=\"web页面性能优化与这几个协议的关系\"></a>web页面性能优化与这几个协议的关系</h2><p>web页面性能优化，主要是以下几个方向：</p>\n<ol>\n<li>尽量合并请求，减少页面总请求数：在http 1.1 协议下，每次完成一个http请求，实际都是建立了一个tcp请求，然后又断开；每次建立tcp请求，都需要花点时间在‘3次握手’上；尽量合并请求，可以省下建立tcp请求时的多余耗时。</li>\n<li>增加浏览器的同时请求数：资源处于不同域名下，可以增加浏览器的http同时请求数；这个主要是对浏览器的策略做出应对。</li>\n<li>资源压缩：体积越小的资源，下载的时间越短。</li>\n<li>缓存：除了对http请求响应的缓存，浏览器还有可能对dns的解析结果做缓存</li>\n</ol>"},{"title":"vue.js@2.x 基础使用点提取","date":"2018-12-04T06:21:58.000Z","_content":"\n官方文档基础要点\n\n<escape><!-- more --></escape>\n\n![](/images/vuejs2.x-xmind/c533fcd2-f78c-11e8-aa9e-525400ac2e73.png)","source":"_posts/vuejs2.x-xmind.md","raw":"---\ntitle: vue.js@2.x 基础使用点提取\ndate: 2018-12-04 14:21:58\ntags: [vue.js]\n---\n\n官方文档基础要点\n\n<escape><!-- more --></escape>\n\n![](/images/vuejs2.x-xmind/c533fcd2-f78c-11e8-aa9e-525400ac2e73.png)","slug":"vuejs2.x-xmind","published":1,"updated":"2019-08-28T08:07:20.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4vm001juaidh4nkserg","content":"<p>官方文档基础要点</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/vuejs2.x-xmind/c533fcd2-f78c-11e8-aa9e-525400ac2e73.png\" alt></p>\n","site":{"data":{}},"length":8,"excerpt":"<p>官方文档基础要点</p>","more":"<p><img src=\"/images/vuejs2.x-xmind/c533fcd2-f78c-11e8-aa9e-525400ac2e73.png\" alt></p>"},{"title":"【译】display:content; 的工作方式","subtitle":"通过CSS的display属性，我们可以控制元素及其子元素在页面绘制时的表现。","cover":"/images/how-display-content-works/Group-3.png","date":"2018-04-03T03:16:45.000Z","author":"evanyan","_content":"\n正如我经常提到的那样，[文档树中的每个元素都是一个矩形盒子(盒模型)](https://bitsofco.de/controlling-the-box-model/)。一般来说，这个“矩形盒子”由两部分组成。首先我们有实际的盒子，它由边框，填充和边缘区域组成。其次，我们有盒子的内容-具体内容区域。\n\n![](/images/how-display-content-works/Group-3.png)\n<escape><!-- more --></escape>\n\n通过CSS的display属性，我们可以控制元素及其子元素在页面绘制时的表现。通过display:inline，我们可以将这个盒子放在其兄弟姐妹中，就像文本一样。通过display:table，我们可以欺骗盒子，使其表现的像table元素一样。\n\n对于display属性，有两个值可以控制元素是否构成盒子。none值将导致盒子与其内容不在页面上绘制。另一方面，新规则display:contents; 会令盒子周围的框会被完全省略，但其内容会被正常绘制。\n\n## 当你使用display:content;时会发生什么\n\n理解display: contents; 最简单的方法，就是想象元素的开始标签和结束标签被删除，只剩下内容。在[规范](https://www.w3.org/TR/css-display-3/#box-generation)中，它规定 -\n\n>For the purposes of box generation and layout, the element must be treated as if it had been replaced in the element tree by its contents\n\n例如下面的标签 -\n\n```html\n<div class=\"outer\">\n  I’m some content\n  <div class=\"inner\">I’m some inner content</div>\n</div>\n```\n\n和下面的样式 -\n\n```css\n.outer {\n  border: 2px solid lightcoral;\n  background-color: lightpink;\n  padding: 20px;\n}\n\n.inner {\n  background-color: #ffdb3a;\n  padding: 20px;\n}\n```\n\n通常情况下，我们期望在页面上绘制元素的方式会是这样 -\n\n![](/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.21.56-am.png)\n\n但是，如果我们将display: contents添加到.outer元素样式中，那么它将这样显示 -\n\n![](/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.23.20-am.png)\n\n从视觉上而言，上述结果与我们所期望的结果完全相同--元素的开始标签和结束标签被删除的话，的确会是这个样子。\n\n## 其他方面的表现\n\n这个CSS规则虽然看似简单，但有很多边界案例和特定行为需要注意。我们必须记住，display: contents; 规则仅仅会令页面在绘制元素时，不绘制它的‘框’，它不会对html文档中的标签有其他任何影响。\n\n### 对元素attribute的影响\n\n如果元素被其内容替换，那么对于应用于它的attribute意味着什么？由于这个替换只是可视化层面上的替换，html文档中，标签仍然存在，所以我们实际上仍然可以通过它的attribute来对元素进行选择、定位和交互。\n\n我们仍然可以通过它的ID来标识元素，例如，使用aria-labelledby对其进行引用。\n\n```html\n<div id=\"label\" style=\"display: contents;\">Label here!</div>\n<button aria-labelledby=\"label\"><button>\n```\n\n但是，我发现我们无法再使用元素id导航到元素。\n\n```html\n<div id=\"target\" style=\"display: contents;\">Target Content</div>\n\n<script>\n  window.location.hash = \"target\";\n  // => Nothing happens\n</script>\n```\n\n### 对javascript事件的影响\n\n正如我们刚刚介绍的，我们仍然可以定位使用 display: contents; 的元素。实际上，我们也可以定位使用 display: none; 的元素，但绑定在上面的事件永远不会被触发，因为我们无法和元素进行交互。但是，由于使用 display: contents; 的元素仍然可见，我们可以通过元素内容与其进行交互。\n\n例如，我们对一个元素设置点击事件，并打印this值。我们仍然可以获取.outer元素，因为它的标签仍然存在于文档中。\n\n```html\n<div class=\"outer\">I’m some content</div>\n\n<script>\n  document.querySelector(\".outer\").addEventListener(\"click\", function(event) {\n    console.log(this);\n    // => <div class=\"outer\"></div>\n  });\n</script>\n```\n\n### 对伪元素的影响\n\n使用 display: content; 的元素的伪元素被认为是其子元素的一部分，因此显示为正常。\n\n```html\n<style>\n  .outer { display: contents; }\n  .outer::before { content: \"Before\" }\n  .outer::after { content: \"After\" }\n</style>\n\n<div class=\"outer\">I’m some content</div>\n```\n\n上面的style标签会产生下面的样式 -\n\n![](/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.44.20-am.png)\n\n### 对from元素、img元素以及其他替换元素的影响\n\n>对于替换元素，请看这里: [替换元素（replaced element）与非替换元素(non-replaced element)](https://blog.csdn.net/ruoyiqing/article/details/39011487)\n\n当替换元素与from元素使用 display: contents; 时，他们会有不同的表现。\n\n#### 替换元素\n\n替换元素，比如img元素，其外观与盒模型由外部资源控制。试图删除这样的元素框并没有什么意义，因为程序不清楚此元素的盒模型是什么（此句的原文: Attempting to remove the box for elements like this doesn't really make sense because it isn't entirely clear what the \"box\" is.）。对于这些元素，display: contents 的功能与display: none完全相同。元素的整个框和内容都没有绘制在页面上。\n\n#### 表单元素\n\n从我们网页作者的角度来看，很多表单元素并不是由一个个“盒子”组成。但在背后，它们由一些较小的元件组成。与被替换的元素类似，删除这些元素的框没有意义，因为他们没有构成盒模型。因此，对于select，input和textarea等表单元素，display: contents的功能与display: none完全相同。\n\n> [full list of elements that display: contents works differenly fo](https://www.w3.org/TR/css-display-3/#unbox-html)\n\n### 对于按钮(button)和链接(link)的影响\n\n当涉及到display: contents时，button和a元素似乎都没有任何特殊的行为。然而，了解这条规则如何影响它们是有用的，因为这些影响可能不会立刻表现出来。\n\n#### 按钮\n\n按钮不是由其他框组成的表单元素之一。因此，display: contents; 将只删除按钮周围的框，而让按钮的内容正常显示。如果在表单中使用，单击按钮仍然会尝试提交表单，正如我们已经介绍的那样，按钮上的任何事件侦听都将正常运行。\n\n#### 链接\n\n对于链接，也是相同的情况。视觉层面上，元素周围的框会被删除，链接的内容会被保留。由于attribute通常不受此CSS规则的影响，因此该链接仍然可以正常运行，并可用于正常导航。\n\n## display: contents; 有何用处？\n\n在过去，我们必须以语义化和CSS样式化的方式来设计HTML。这导致我们要么包装了太多的元素，要么元素太少以至于需要启用兄弟元素选择器。那些需要使用兄弟元素选择器的情况，是引入CSS Grid Layout的重要原因。\n\n举个例子，我们来看这个布局 -\n\n![](/images/how-display-content-works/Screen-Shot-2018-03-27-at-10.27.27-am.png)\n\n我们有两张彼此相邻的“卡片”，每张都有一个标题，一个段落和一个页脚。我们想要的是每张卡内的每个部分都是相同的高度，而不管每个部分的内容如何（例如，第一张卡片的标题只有1行，而第二张卡片的标题有3行，但是第一张卡片的标题部分高度应该与第二张卡片相匹配）。\n\n我们可以使用CSS Grid来实现这种布局，但是我们需要每个“卡片”中的所有元素成为彼此的兄弟元素。所以，我们可能需要像这样布局我们的HTML -\n\n```html\n<div class=\"grid\">\n  <h2>This is a heading</h2>\n  <p>...</p>\n  <p>Footer stuff</p>\n    \n  <h2>This is a really really really super duper loooong heading</h2>\n  <p>...</p>\n  <p>Footer stuff</p>\n</div>\n```\n\n我们可以应用以下样式 -\n\n```css\n.grid {\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-rows: auto 1fr auto;\n  grid-template-columns: repeat(2, 1fr);\n  grid-column-gap: 20px;\n}\n```\n\n虽然这不是一个错误的构建文档方式，但通过article元素将每个元素分组可能更有意义。这时候就需要 display:contents; 出场了。我们有了两全的方案 - 通过有意义的语义化方式去组织元素，同时CSS也以合理的方式去完成布局。\n\n```html\n<div class=\"grid\">\n  <article style=\"display: contents;\">\n    <h2>This is a heading</h2>\n    <p>...</p>\n    <p>Footer stuff</p>\n  </article>\n  <article style=\"display: contents;\">\n    <h2>This is a really really really super duper loooong heading</h2>\n    <p>...</p>\n    <p>Footer stuff</p>\n  </article>\n</div>\n```\n\n使用与上面相同的CSS，我们可以实现我们想要的布局。\n\n## 浏览器兼容状况\n\n在撰写本文时，display:contents; 仅在两个主流浏览器中得到支持，其他支持很快就会到来。\n\n![](/images/how-display-content-works/caniuse.png)\n\n>2018年03月27日浏览器兼容状况\n\n因此，此功能目前仍应被视为渐进式增强功能，并应有适当的降级处理。\n\n```html\narticle {\n  display: grid;\n  grid-template-rows: 200px 1fr auto; /* e.g. Use a fixed height for the header */\n}\n\n@supports (display: contents) {\n  article { display: contents; }\n}\n```\n\n---\n\n原文: [How display: contents; Works](https://bitsofco.de/how-display-contents-works/)\n\n作者: [Ire Aderinokun](https://ireaderinokun.com/)\n\n译者: evanyan","source":"_posts/how-display-content-works.md","raw":"---\ntitle: 【译】display:content; 的工作方式\nsubtitle: 通过CSS的display属性，我们可以控制元素及其子元素在页面绘制时的表现。\ncover: /images/how-display-content-works/Group-3.png\ndate: 2018-04-03 11:16:45\ncategories: [翻译]\ntags: [css, html, 翻译]\nauthor: evanyan\n---\n\n正如我经常提到的那样，[文档树中的每个元素都是一个矩形盒子(盒模型)](https://bitsofco.de/controlling-the-box-model/)。一般来说，这个“矩形盒子”由两部分组成。首先我们有实际的盒子，它由边框，填充和边缘区域组成。其次，我们有盒子的内容-具体内容区域。\n\n![](/images/how-display-content-works/Group-3.png)\n<escape><!-- more --></escape>\n\n通过CSS的display属性，我们可以控制元素及其子元素在页面绘制时的表现。通过display:inline，我们可以将这个盒子放在其兄弟姐妹中，就像文本一样。通过display:table，我们可以欺骗盒子，使其表现的像table元素一样。\n\n对于display属性，有两个值可以控制元素是否构成盒子。none值将导致盒子与其内容不在页面上绘制。另一方面，新规则display:contents; 会令盒子周围的框会被完全省略，但其内容会被正常绘制。\n\n## 当你使用display:content;时会发生什么\n\n理解display: contents; 最简单的方法，就是想象元素的开始标签和结束标签被删除，只剩下内容。在[规范](https://www.w3.org/TR/css-display-3/#box-generation)中，它规定 -\n\n>For the purposes of box generation and layout, the element must be treated as if it had been replaced in the element tree by its contents\n\n例如下面的标签 -\n\n```html\n<div class=\"outer\">\n  I’m some content\n  <div class=\"inner\">I’m some inner content</div>\n</div>\n```\n\n和下面的样式 -\n\n```css\n.outer {\n  border: 2px solid lightcoral;\n  background-color: lightpink;\n  padding: 20px;\n}\n\n.inner {\n  background-color: #ffdb3a;\n  padding: 20px;\n}\n```\n\n通常情况下，我们期望在页面上绘制元素的方式会是这样 -\n\n![](/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.21.56-am.png)\n\n但是，如果我们将display: contents添加到.outer元素样式中，那么它将这样显示 -\n\n![](/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.23.20-am.png)\n\n从视觉上而言，上述结果与我们所期望的结果完全相同--元素的开始标签和结束标签被删除的话，的确会是这个样子。\n\n## 其他方面的表现\n\n这个CSS规则虽然看似简单，但有很多边界案例和特定行为需要注意。我们必须记住，display: contents; 规则仅仅会令页面在绘制元素时，不绘制它的‘框’，它不会对html文档中的标签有其他任何影响。\n\n### 对元素attribute的影响\n\n如果元素被其内容替换，那么对于应用于它的attribute意味着什么？由于这个替换只是可视化层面上的替换，html文档中，标签仍然存在，所以我们实际上仍然可以通过它的attribute来对元素进行选择、定位和交互。\n\n我们仍然可以通过它的ID来标识元素，例如，使用aria-labelledby对其进行引用。\n\n```html\n<div id=\"label\" style=\"display: contents;\">Label here!</div>\n<button aria-labelledby=\"label\"><button>\n```\n\n但是，我发现我们无法再使用元素id导航到元素。\n\n```html\n<div id=\"target\" style=\"display: contents;\">Target Content</div>\n\n<script>\n  window.location.hash = \"target\";\n  // => Nothing happens\n</script>\n```\n\n### 对javascript事件的影响\n\n正如我们刚刚介绍的，我们仍然可以定位使用 display: contents; 的元素。实际上，我们也可以定位使用 display: none; 的元素，但绑定在上面的事件永远不会被触发，因为我们无法和元素进行交互。但是，由于使用 display: contents; 的元素仍然可见，我们可以通过元素内容与其进行交互。\n\n例如，我们对一个元素设置点击事件，并打印this值。我们仍然可以获取.outer元素，因为它的标签仍然存在于文档中。\n\n```html\n<div class=\"outer\">I’m some content</div>\n\n<script>\n  document.querySelector(\".outer\").addEventListener(\"click\", function(event) {\n    console.log(this);\n    // => <div class=\"outer\"></div>\n  });\n</script>\n```\n\n### 对伪元素的影响\n\n使用 display: content; 的元素的伪元素被认为是其子元素的一部分，因此显示为正常。\n\n```html\n<style>\n  .outer { display: contents; }\n  .outer::before { content: \"Before\" }\n  .outer::after { content: \"After\" }\n</style>\n\n<div class=\"outer\">I’m some content</div>\n```\n\n上面的style标签会产生下面的样式 -\n\n![](/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.44.20-am.png)\n\n### 对from元素、img元素以及其他替换元素的影响\n\n>对于替换元素，请看这里: [替换元素（replaced element）与非替换元素(non-replaced element)](https://blog.csdn.net/ruoyiqing/article/details/39011487)\n\n当替换元素与from元素使用 display: contents; 时，他们会有不同的表现。\n\n#### 替换元素\n\n替换元素，比如img元素，其外观与盒模型由外部资源控制。试图删除这样的元素框并没有什么意义，因为程序不清楚此元素的盒模型是什么（此句的原文: Attempting to remove the box for elements like this doesn't really make sense because it isn't entirely clear what the \"box\" is.）。对于这些元素，display: contents 的功能与display: none完全相同。元素的整个框和内容都没有绘制在页面上。\n\n#### 表单元素\n\n从我们网页作者的角度来看，很多表单元素并不是由一个个“盒子”组成。但在背后，它们由一些较小的元件组成。与被替换的元素类似，删除这些元素的框没有意义，因为他们没有构成盒模型。因此，对于select，input和textarea等表单元素，display: contents的功能与display: none完全相同。\n\n> [full list of elements that display: contents works differenly fo](https://www.w3.org/TR/css-display-3/#unbox-html)\n\n### 对于按钮(button)和链接(link)的影响\n\n当涉及到display: contents时，button和a元素似乎都没有任何特殊的行为。然而，了解这条规则如何影响它们是有用的，因为这些影响可能不会立刻表现出来。\n\n#### 按钮\n\n按钮不是由其他框组成的表单元素之一。因此，display: contents; 将只删除按钮周围的框，而让按钮的内容正常显示。如果在表单中使用，单击按钮仍然会尝试提交表单，正如我们已经介绍的那样，按钮上的任何事件侦听都将正常运行。\n\n#### 链接\n\n对于链接，也是相同的情况。视觉层面上，元素周围的框会被删除，链接的内容会被保留。由于attribute通常不受此CSS规则的影响，因此该链接仍然可以正常运行，并可用于正常导航。\n\n## display: contents; 有何用处？\n\n在过去，我们必须以语义化和CSS样式化的方式来设计HTML。这导致我们要么包装了太多的元素，要么元素太少以至于需要启用兄弟元素选择器。那些需要使用兄弟元素选择器的情况，是引入CSS Grid Layout的重要原因。\n\n举个例子，我们来看这个布局 -\n\n![](/images/how-display-content-works/Screen-Shot-2018-03-27-at-10.27.27-am.png)\n\n我们有两张彼此相邻的“卡片”，每张都有一个标题，一个段落和一个页脚。我们想要的是每张卡内的每个部分都是相同的高度，而不管每个部分的内容如何（例如，第一张卡片的标题只有1行，而第二张卡片的标题有3行，但是第一张卡片的标题部分高度应该与第二张卡片相匹配）。\n\n我们可以使用CSS Grid来实现这种布局，但是我们需要每个“卡片”中的所有元素成为彼此的兄弟元素。所以，我们可能需要像这样布局我们的HTML -\n\n```html\n<div class=\"grid\">\n  <h2>This is a heading</h2>\n  <p>...</p>\n  <p>Footer stuff</p>\n    \n  <h2>This is a really really really super duper loooong heading</h2>\n  <p>...</p>\n  <p>Footer stuff</p>\n</div>\n```\n\n我们可以应用以下样式 -\n\n```css\n.grid {\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-rows: auto 1fr auto;\n  grid-template-columns: repeat(2, 1fr);\n  grid-column-gap: 20px;\n}\n```\n\n虽然这不是一个错误的构建文档方式，但通过article元素将每个元素分组可能更有意义。这时候就需要 display:contents; 出场了。我们有了两全的方案 - 通过有意义的语义化方式去组织元素，同时CSS也以合理的方式去完成布局。\n\n```html\n<div class=\"grid\">\n  <article style=\"display: contents;\">\n    <h2>This is a heading</h2>\n    <p>...</p>\n    <p>Footer stuff</p>\n  </article>\n  <article style=\"display: contents;\">\n    <h2>This is a really really really super duper loooong heading</h2>\n    <p>...</p>\n    <p>Footer stuff</p>\n  </article>\n</div>\n```\n\n使用与上面相同的CSS，我们可以实现我们想要的布局。\n\n## 浏览器兼容状况\n\n在撰写本文时，display:contents; 仅在两个主流浏览器中得到支持，其他支持很快就会到来。\n\n![](/images/how-display-content-works/caniuse.png)\n\n>2018年03月27日浏览器兼容状况\n\n因此，此功能目前仍应被视为渐进式增强功能，并应有适当的降级处理。\n\n```html\narticle {\n  display: grid;\n  grid-template-rows: 200px 1fr auto; /* e.g. Use a fixed height for the header */\n}\n\n@supports (display: contents) {\n  article { display: contents; }\n}\n```\n\n---\n\n原文: [How display: contents; Works](https://bitsofco.de/how-display-contents-works/)\n\n作者: [Ire Aderinokun](https://ireaderinokun.com/)\n\n译者: evanyan","slug":"how-display-content-works","published":1,"updated":"2019-08-29T02:31:37.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4yj0026uaid80sgsaui","content":"<p>正如我经常提到的那样，<a href=\"https://bitsofco.de/controlling-the-box-model/\" target=\"_blank\" rel=\"noopener\">文档树中的每个元素都是一个矩形盒子(盒模型)</a>。一般来说，这个“矩形盒子”由两部分组成。首先我们有实际的盒子，它由边框，填充和边缘区域组成。其次，我们有盒子的内容-具体内容区域。</p>\n<p><img src=\"/images/how-display-content-works/Group-3.png\" alt></p>\n<a id=\"more\"></a>\n\n<p>通过CSS的display属性，我们可以控制元素及其子元素在页面绘制时的表现。通过display:inline，我们可以将这个盒子放在其兄弟姐妹中，就像文本一样。通过display:table，我们可以欺骗盒子，使其表现的像table元素一样。</p>\n<p>对于display属性，有两个值可以控制元素是否构成盒子。none值将导致盒子与其内容不在页面上绘制。另一方面，新规则display:contents; 会令盒子周围的框会被完全省略，但其内容会被正常绘制。</p>\n<h2 id=\"当你使用display-content-时会发生什么\"><a href=\"#当你使用display-content-时会发生什么\" class=\"headerlink\" title=\"当你使用display:content;时会发生什么\"></a>当你使用display:content;时会发生什么</h2><p>理解display: contents; 最简单的方法，就是想象元素的开始标签和结束标签被删除，只剩下内容。在<a href=\"https://www.w3.org/TR/css-display-3/#box-generation\" target=\"_blank\" rel=\"noopener\">规范</a>中，它规定 -</p>\n<blockquote>\n<p>For the purposes of box generation and layout, the element must be treated as if it had been replaced in the element tree by its contents</p>\n</blockquote>\n<p>例如下面的标签 -</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span></span><br><span class=\"line\">  I’m some content</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span>I’m some inner content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>和下面的样式 -</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid lightcoral;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightpink;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffdb3a</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下，我们期望在页面上绘制元素的方式会是这样 -</p>\n<p><img src=\"/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.21.56-am.png\" alt></p>\n<p>但是，如果我们将display: contents添加到.outer元素样式中，那么它将这样显示 -</p>\n<p><img src=\"/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.23.20-am.png\" alt></p>\n<p>从视觉上而言，上述结果与我们所期望的结果完全相同–元素的开始标签和结束标签被删除的话，的确会是这个样子。</p>\n<h2 id=\"其他方面的表现\"><a href=\"#其他方面的表现\" class=\"headerlink\" title=\"其他方面的表现\"></a>其他方面的表现</h2><p>这个CSS规则虽然看似简单，但有很多边界案例和特定行为需要注意。我们必须记住，display: contents; 规则仅仅会令页面在绘制元素时，不绘制它的‘框’，它不会对html文档中的标签有其他任何影响。</p>\n<h3 id=\"对元素attribute的影响\"><a href=\"#对元素attribute的影响\" class=\"headerlink\" title=\"对元素attribute的影响\"></a>对元素attribute的影响</h3><p>如果元素被其内容替换，那么对于应用于它的attribute意味着什么？由于这个替换只是可视化层面上的替换，html文档中，标签仍然存在，所以我们实际上仍然可以通过它的attribute来对元素进行选择、定位和交互。</p>\n<p>我们仍然可以通过它的ID来标识元素，例如，使用aria-labelledby对其进行引用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"label\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: contents;\"</span>&gt;</span>Label here!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">aria-labelledby</span>=<span class=\"string\">\"label\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是，我发现我们无法再使用元素id导航到元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: contents;\"</span>&gt;</span>Target Content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.location.hash = <span class=\"string\">\"target\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// =&gt; Nothing happens</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对javascript事件的影响\"><a href=\"#对javascript事件的影响\" class=\"headerlink\" title=\"对javascript事件的影响\"></a>对javascript事件的影响</h3><p>正如我们刚刚介绍的，我们仍然可以定位使用 display: contents; 的元素。实际上，我们也可以定位使用 display: none; 的元素，但绑定在上面的事件永远不会被触发，因为我们无法和元素进行交互。但是，由于使用 display: contents; 的元素仍然可见，我们可以通过元素内容与其进行交互。</p>\n<p>例如，我们对一个元素设置点击事件，并打印this值。我们仍然可以获取.outer元素，因为它的标签仍然存在于文档中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span>I’m some content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\".outer\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span></span><br><span class=\"line\"><span class=\"xml\">    // =&gt; <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对伪元素的影响\"><a href=\"#对伪元素的影响\" class=\"headerlink\" title=\"对伪元素的影响\"></a>对伪元素的影响</h3><p>使用 display: content; 的元素的伪元素被认为是其子元素的一部分，因此显示为正常。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.outer</span> &#123; <span class=\"attribute\">display</span>: contents; &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.outer</span><span class=\"selector-pseudo\">::before</span> &#123; <span class=\"attribute\">content</span>: <span class=\"string\">\"Before\"</span> &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.outer</span><span class=\"selector-pseudo\">::after</span> &#123; <span class=\"attribute\">content</span>: <span class=\"string\">\"After\"</span> &#125;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span>I’m some content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的style标签会产生下面的样式 -</p>\n<p><img src=\"/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.44.20-am.png\" alt></p>\n<h3 id=\"对from元素、img元素以及其他替换元素的影响\"><a href=\"#对from元素、img元素以及其他替换元素的影响\" class=\"headerlink\" title=\"对from元素、img元素以及其他替换元素的影响\"></a>对from元素、img元素以及其他替换元素的影响</h3><blockquote>\n<p>对于替换元素，请看这里: <a href=\"https://blog.csdn.net/ruoyiqing/article/details/39011487\" target=\"_blank\" rel=\"noopener\">替换元素（replaced element）与非替换元素(non-replaced element)</a></p>\n</blockquote>\n<p>当替换元素与from元素使用 display: contents; 时，他们会有不同的表现。</p>\n<h4 id=\"替换元素\"><a href=\"#替换元素\" class=\"headerlink\" title=\"替换元素\"></a>替换元素</h4><p>替换元素，比如img元素，其外观与盒模型由外部资源控制。试图删除这样的元素框并没有什么意义，因为程序不清楚此元素的盒模型是什么（此句的原文: Attempting to remove the box for elements like this doesn’t really make sense because it isn’t entirely clear what the “box” is.）。对于这些元素，display: contents 的功能与display: none完全相同。元素的整个框和内容都没有绘制在页面上。</p>\n<h4 id=\"表单元素\"><a href=\"#表单元素\" class=\"headerlink\" title=\"表单元素\"></a>表单元素</h4><p>从我们网页作者的角度来看，很多表单元素并不是由一个个“盒子”组成。但在背后，它们由一些较小的元件组成。与被替换的元素类似，删除这些元素的框没有意义，因为他们没有构成盒模型。因此，对于select，input和textarea等表单元素，display: contents的功能与display: none完全相同。</p>\n<blockquote>\n<p><a href=\"https://www.w3.org/TR/css-display-3/#unbox-html\" target=\"_blank\" rel=\"noopener\">full list of elements that display: contents works differenly fo</a></p>\n</blockquote>\n<h3 id=\"对于按钮-button-和链接-link-的影响\"><a href=\"#对于按钮-button-和链接-link-的影响\" class=\"headerlink\" title=\"对于按钮(button)和链接(link)的影响\"></a>对于按钮(button)和链接(link)的影响</h3><p>当涉及到display: contents时，button和a元素似乎都没有任何特殊的行为。然而，了解这条规则如何影响它们是有用的，因为这些影响可能不会立刻表现出来。</p>\n<h4 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h4><p>按钮不是由其他框组成的表单元素之一。因此，display: contents; 将只删除按钮周围的框，而让按钮的内容正常显示。如果在表单中使用，单击按钮仍然会尝试提交表单，正如我们已经介绍的那样，按钮上的任何事件侦听都将正常运行。</p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p>对于链接，也是相同的情况。视觉层面上，元素周围的框会被删除，链接的内容会被保留。由于attribute通常不受此CSS规则的影响，因此该链接仍然可以正常运行，并可用于正常导航。</p>\n<h2 id=\"display-contents-有何用处？\"><a href=\"#display-contents-有何用处？\" class=\"headerlink\" title=\"display: contents; 有何用处？\"></a>display: contents; 有何用处？</h2><p>在过去，我们必须以语义化和CSS样式化的方式来设计HTML。这导致我们要么包装了太多的元素，要么元素太少以至于需要启用兄弟元素选择器。那些需要使用兄弟元素选择器的情况，是引入CSS Grid Layout的重要原因。</p>\n<p>举个例子，我们来看这个布局 -</p>\n<p><img src=\"/images/how-display-content-works/Screen-Shot-2018-03-27-at-10.27.27-am.png\" alt></p>\n<p>我们有两张彼此相邻的“卡片”，每张都有一个标题，一个段落和一个页脚。我们想要的是每张卡内的每个部分都是相同的高度，而不管每个部分的内容如何（例如，第一张卡片的标题只有1行，而第二张卡片的标题有3行，但是第一张卡片的标题部分高度应该与第二张卡片相匹配）。</p>\n<p>我们可以使用CSS Grid来实现这种布局，但是我们需要每个“卡片”中的所有元素成为彼此的兄弟元素。所以，我们可能需要像这样布局我们的HTML -</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is a heading<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Footer stuff<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is a really really really super duper loooong heading<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Footer stuff<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以应用以下样式 -</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.grid</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-auto-flow</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: auto <span class=\"number\">1</span>fr auto;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(2, 1fr);</span><br><span class=\"line\">  <span class=\"attribute\">grid-column-gap</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然这不是一个错误的构建文档方式，但通过article元素将每个元素分组可能更有意义。这时候就需要 display:contents; 出场了。我们有了两全的方案 - 通过有意义的语义化方式去组织元素，同时CSS也以合理的方式去完成布局。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: contents;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is a heading<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Footer stuff<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: contents;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is a really really really super duper loooong heading<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Footer stuff<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用与上面相同的CSS，我们可以实现我们想要的布局。</p>\n<h2 id=\"浏览器兼容状况\"><a href=\"#浏览器兼容状况\" class=\"headerlink\" title=\"浏览器兼容状况\"></a>浏览器兼容状况</h2><p>在撰写本文时，display:contents; 仅在两个主流浏览器中得到支持，其他支持很快就会到来。</p>\n<p><img src=\"/images/how-display-content-works/caniuse.png\" alt></p>\n<blockquote>\n<p>2018年03月27日浏览器兼容状况</p>\n</blockquote>\n<p>因此，此功能目前仍应被视为渐进式增强功能，并应有适当的降级处理。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">article &#123;</span><br><span class=\"line\">  display: grid;</span><br><span class=\"line\">  grid-template-rows: 200px 1fr auto; /* e.g. Use a fixed height for the header */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@supports (display: contents) &#123;</span><br><span class=\"line\">  article &#123; display: contents; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>原文: <a href=\"https://bitsofco.de/how-display-contents-works/\" target=\"_blank\" rel=\"noopener\">How display: contents; Works</a></p>\n<p>作者: <a href=\"https://ireaderinokun.com/\" target=\"_blank\" rel=\"noopener\">Ire Aderinokun</a></p>\n<p>译者: evanyan</p>\n","site":{"data":{}},"length":5069,"excerpt":"<p>正如我经常提到的那样，<a href=\"https://bitsofco.de/controlling-the-box-model/\" target=\"_blank\" rel=\"noopener\">文档树中的每个元素都是一个矩形盒子(盒模型)</a>。一般来说，这个“矩形盒子”由两部分组成。首先我们有实际的盒子，它由边框，填充和边缘区域组成。其次，我们有盒子的内容-具体内容区域。</p>\n<p><img src=\"/images/how-display-content-works/Group-3.png\" alt></p>","more":"<p>通过CSS的display属性，我们可以控制元素及其子元素在页面绘制时的表现。通过display:inline，我们可以将这个盒子放在其兄弟姐妹中，就像文本一样。通过display:table，我们可以欺骗盒子，使其表现的像table元素一样。</p>\n<p>对于display属性，有两个值可以控制元素是否构成盒子。none值将导致盒子与其内容不在页面上绘制。另一方面，新规则display:contents; 会令盒子周围的框会被完全省略，但其内容会被正常绘制。</p>\n<h2 id=\"当你使用display-content-时会发生什么\"><a href=\"#当你使用display-content-时会发生什么\" class=\"headerlink\" title=\"当你使用display:content;时会发生什么\"></a>当你使用display:content;时会发生什么</h2><p>理解display: contents; 最简单的方法，就是想象元素的开始标签和结束标签被删除，只剩下内容。在<a href=\"https://www.w3.org/TR/css-display-3/#box-generation\" target=\"_blank\" rel=\"noopener\">规范</a>中，它规定 -</p>\n<blockquote>\n<p>For the purposes of box generation and layout, the element must be treated as if it had been replaced in the element tree by its contents</p>\n</blockquote>\n<p>例如下面的标签 -</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span></span><br><span class=\"line\">  I’m some content</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span>I’m some inner content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>和下面的样式 -</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid lightcoral;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightpink;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffdb3a</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下，我们期望在页面上绘制元素的方式会是这样 -</p>\n<p><img src=\"/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.21.56-am.png\" alt></p>\n<p>但是，如果我们将display: contents添加到.outer元素样式中，那么它将这样显示 -</p>\n<p><img src=\"/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.23.20-am.png\" alt></p>\n<p>从视觉上而言，上述结果与我们所期望的结果完全相同–元素的开始标签和结束标签被删除的话，的确会是这个样子。</p>\n<h2 id=\"其他方面的表现\"><a href=\"#其他方面的表现\" class=\"headerlink\" title=\"其他方面的表现\"></a>其他方面的表现</h2><p>这个CSS规则虽然看似简单，但有很多边界案例和特定行为需要注意。我们必须记住，display: contents; 规则仅仅会令页面在绘制元素时，不绘制它的‘框’，它不会对html文档中的标签有其他任何影响。</p>\n<h3 id=\"对元素attribute的影响\"><a href=\"#对元素attribute的影响\" class=\"headerlink\" title=\"对元素attribute的影响\"></a>对元素attribute的影响</h3><p>如果元素被其内容替换，那么对于应用于它的attribute意味着什么？由于这个替换只是可视化层面上的替换，html文档中，标签仍然存在，所以我们实际上仍然可以通过它的attribute来对元素进行选择、定位和交互。</p>\n<p>我们仍然可以通过它的ID来标识元素，例如，使用aria-labelledby对其进行引用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"label\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: contents;\"</span>&gt;</span>Label here!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">aria-labelledby</span>=<span class=\"string\">\"label\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是，我发现我们无法再使用元素id导航到元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: contents;\"</span>&gt;</span>Target Content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.location.hash = <span class=\"string\">\"target\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// =&gt; Nothing happens</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对javascript事件的影响\"><a href=\"#对javascript事件的影响\" class=\"headerlink\" title=\"对javascript事件的影响\"></a>对javascript事件的影响</h3><p>正如我们刚刚介绍的，我们仍然可以定位使用 display: contents; 的元素。实际上，我们也可以定位使用 display: none; 的元素，但绑定在上面的事件永远不会被触发，因为我们无法和元素进行交互。但是，由于使用 display: contents; 的元素仍然可见，我们可以通过元素内容与其进行交互。</p>\n<p>例如，我们对一个元素设置点击事件，并打印this值。我们仍然可以获取.outer元素，因为它的标签仍然存在于文档中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span>I’m some content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\".outer\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span></span><br><span class=\"line\"><span class=\"xml\">    // =&gt; <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对伪元素的影响\"><a href=\"#对伪元素的影响\" class=\"headerlink\" title=\"对伪元素的影响\"></a>对伪元素的影响</h3><p>使用 display: content; 的元素的伪元素被认为是其子元素的一部分，因此显示为正常。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.outer</span> &#123; <span class=\"attribute\">display</span>: contents; &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.outer</span><span class=\"selector-pseudo\">::before</span> &#123; <span class=\"attribute\">content</span>: <span class=\"string\">\"Before\"</span> &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.outer</span><span class=\"selector-pseudo\">::after</span> &#123; <span class=\"attribute\">content</span>: <span class=\"string\">\"After\"</span> &#125;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span>I’m some content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的style标签会产生下面的样式 -</p>\n<p><img src=\"/images/how-display-content-works/Screen-Shot-2018-03-27-at-9.44.20-am.png\" alt></p>\n<h3 id=\"对from元素、img元素以及其他替换元素的影响\"><a href=\"#对from元素、img元素以及其他替换元素的影响\" class=\"headerlink\" title=\"对from元素、img元素以及其他替换元素的影响\"></a>对from元素、img元素以及其他替换元素的影响</h3><blockquote>\n<p>对于替换元素，请看这里: <a href=\"https://blog.csdn.net/ruoyiqing/article/details/39011487\" target=\"_blank\" rel=\"noopener\">替换元素（replaced element）与非替换元素(non-replaced element)</a></p>\n</blockquote>\n<p>当替换元素与from元素使用 display: contents; 时，他们会有不同的表现。</p>\n<h4 id=\"替换元素\"><a href=\"#替换元素\" class=\"headerlink\" title=\"替换元素\"></a>替换元素</h4><p>替换元素，比如img元素，其外观与盒模型由外部资源控制。试图删除这样的元素框并没有什么意义，因为程序不清楚此元素的盒模型是什么（此句的原文: Attempting to remove the box for elements like this doesn’t really make sense because it isn’t entirely clear what the “box” is.）。对于这些元素，display: contents 的功能与display: none完全相同。元素的整个框和内容都没有绘制在页面上。</p>\n<h4 id=\"表单元素\"><a href=\"#表单元素\" class=\"headerlink\" title=\"表单元素\"></a>表单元素</h4><p>从我们网页作者的角度来看，很多表单元素并不是由一个个“盒子”组成。但在背后，它们由一些较小的元件组成。与被替换的元素类似，删除这些元素的框没有意义，因为他们没有构成盒模型。因此，对于select，input和textarea等表单元素，display: contents的功能与display: none完全相同。</p>\n<blockquote>\n<p><a href=\"https://www.w3.org/TR/css-display-3/#unbox-html\" target=\"_blank\" rel=\"noopener\">full list of elements that display: contents works differenly fo</a></p>\n</blockquote>\n<h3 id=\"对于按钮-button-和链接-link-的影响\"><a href=\"#对于按钮-button-和链接-link-的影响\" class=\"headerlink\" title=\"对于按钮(button)和链接(link)的影响\"></a>对于按钮(button)和链接(link)的影响</h3><p>当涉及到display: contents时，button和a元素似乎都没有任何特殊的行为。然而，了解这条规则如何影响它们是有用的，因为这些影响可能不会立刻表现出来。</p>\n<h4 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h4><p>按钮不是由其他框组成的表单元素之一。因此，display: contents; 将只删除按钮周围的框，而让按钮的内容正常显示。如果在表单中使用，单击按钮仍然会尝试提交表单，正如我们已经介绍的那样，按钮上的任何事件侦听都将正常运行。</p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p>对于链接，也是相同的情况。视觉层面上，元素周围的框会被删除，链接的内容会被保留。由于attribute通常不受此CSS规则的影响，因此该链接仍然可以正常运行，并可用于正常导航。</p>\n<h2 id=\"display-contents-有何用处？\"><a href=\"#display-contents-有何用处？\" class=\"headerlink\" title=\"display: contents; 有何用处？\"></a>display: contents; 有何用处？</h2><p>在过去，我们必须以语义化和CSS样式化的方式来设计HTML。这导致我们要么包装了太多的元素，要么元素太少以至于需要启用兄弟元素选择器。那些需要使用兄弟元素选择器的情况，是引入CSS Grid Layout的重要原因。</p>\n<p>举个例子，我们来看这个布局 -</p>\n<p><img src=\"/images/how-display-content-works/Screen-Shot-2018-03-27-at-10.27.27-am.png\" alt></p>\n<p>我们有两张彼此相邻的“卡片”，每张都有一个标题，一个段落和一个页脚。我们想要的是每张卡内的每个部分都是相同的高度，而不管每个部分的内容如何（例如，第一张卡片的标题只有1行，而第二张卡片的标题有3行，但是第一张卡片的标题部分高度应该与第二张卡片相匹配）。</p>\n<p>我们可以使用CSS Grid来实现这种布局，但是我们需要每个“卡片”中的所有元素成为彼此的兄弟元素。所以，我们可能需要像这样布局我们的HTML -</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is a heading<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Footer stuff<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is a really really really super duper loooong heading<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Footer stuff<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以应用以下样式 -</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.grid</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-auto-flow</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: auto <span class=\"number\">1</span>fr auto;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(2, 1fr);</span><br><span class=\"line\">  <span class=\"attribute\">grid-column-gap</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然这不是一个错误的构建文档方式，但通过article元素将每个元素分组可能更有意义。这时候就需要 display:contents; 出场了。我们有了两全的方案 - 通过有意义的语义化方式去组织元素，同时CSS也以合理的方式去完成布局。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: contents;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is a heading<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Footer stuff<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: contents;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is a really really really super duper loooong heading<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Footer stuff<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用与上面相同的CSS，我们可以实现我们想要的布局。</p>\n<h2 id=\"浏览器兼容状况\"><a href=\"#浏览器兼容状况\" class=\"headerlink\" title=\"浏览器兼容状况\"></a>浏览器兼容状况</h2><p>在撰写本文时，display:contents; 仅在两个主流浏览器中得到支持，其他支持很快就会到来。</p>\n<p><img src=\"/images/how-display-content-works/caniuse.png\" alt></p>\n<blockquote>\n<p>2018年03月27日浏览器兼容状况</p>\n</blockquote>\n<p>因此，此功能目前仍应被视为渐进式增强功能，并应有适当的降级处理。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">article &#123;</span><br><span class=\"line\">  display: grid;</span><br><span class=\"line\">  grid-template-rows: 200px 1fr auto; /* e.g. Use a fixed height for the header */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@supports (display: contents) &#123;</span><br><span class=\"line\">  article &#123; display: contents; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>原文: <a href=\"https://bitsofco.de/how-display-contents-works/\" target=\"_blank\" rel=\"noopener\">How display: contents; Works</a></p>\n<p>作者: <a href=\"https://ireaderinokun.com/\" target=\"_blank\" rel=\"noopener\">Ire Aderinokun</a></p>\n<p>译者: evanyan</p>"},{"title":"【译】如何让CSS动画更自然","subtitle":"设计师负责设计，程序员负责编码。他们间互不干涉。","cover":"/images/making-css-animations-feel-natural/cover.png","date":"2018-06-08T11:30:58.000Z","author":"evanyan","_content":"在过去，设计师负责设计，程序员负责编码。他们间互不干涉。但随着CSS中transitions和animations的到来，设计和编码的界限模糊了。设计师描述设计，而程序员把设计师的描述翻译成具体代码--这种合作模式不再像过去那么简单。为了高效地协作，设计师必须懂点代码，而程序员必须懂点设计。\n<escape><!-- more --></escape>\n\n举个例子，假设一位设计师要求开发人员实现一个如下所示的盒子反弹动画，在没有跨界知识和通用标准表述的情况下，设计师和程序员的沟通会有少许信息丢失。程序员没有足够的信息去了解设计师的意图，设计师也不知道他们到底可以选择什么。这样的沟通会有信息缺失，你最后完成的效果可能是下面这样的：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 1' src='//codepen.io/pulpexploder/embed/apxRbK/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/apxRbK/'>Bouncing Box 1</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n这样的效果并不会令人兴奋。虽然这已经符合动画效果的基本标准，但我们绝对可以做得更好。\n\n首先要看的是animation-timing-function属性。在上面的例子中，我们对此属性赋值linear，这意味着盒子以相同的速度不断运动。在某些情况下，这是可取的；然而，在现实世界中，运动通常不是线性的。\n\n一个简单的解决方法是改变animation-timing-function属性。这使得每个动画的开始部分和结束部分比中间部分稍慢，这会令一些动画更自然。以下是启用了缓动功能的方块：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 2' src='//codepen.io/pulpexploder/embed/bgJmde/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/bgJmde/'>Bouncing Box 2</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n这只是一个小小的改进，所以我们仍有很多工作要做。同一时间内一次又一次地出现相同的动画，令方块看起来仍然机械又僵硬。在反弹之间增加一点点延迟，可让动画看起来更自然些：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 3' src='//codepen.io/pulpexploder/embed/YNMJXb/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/YNMJXb/'>Bouncing Box 3</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n现在这个动画看起来就像盒子自己在跳跃，而不是简单地被上下移动。跳跃之间有一点蓄力和停滞，模仿了活着的生物做同样的事情时会有的表现。尽管我们没有提供盒子跳跃的设计参考，但我们都对生物跳跃的表现有很好的了解。我们知道真实跳跃是什么样子，通过模仿，动画可以更自然。我们可以做更多的事情来让这种感觉变得更加突出。\n\n如果你看动画片，你会注意到一些现实生活中的动作往往会被夸大、漫画化。做得好的话，这些动作就像在真实世界中一样自然，还带了些特有的魅力和个性。\n\n在这个阶段，设计师和开发者之间的合作是至关重要的 -- 但许多设计师可能都不知道这些选择的存在，所以得提醒开发人员将这些选择提供给设计人员。\n\n通过在方块上添加一些轻微的变形，我们可以令动画丰满许多：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 4' src='//codepen.io/pulpexploder/embed/YNMJyb/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/YNMJyb/'>Bouncing Box 4</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n现在，盒子是一个活着的角色。仍有很多事情需要调整，但这已经比原来的动画更进一步 -- 以一种非常好的方式。\n\n现在我们更进一步，在跳跃结束时添加一点反弹：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 5' src='//codepen.io/pulpexploder/embed/MJRPKE/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/MJRPKE/'>Bouncing Box 5</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n第二次反弹让盒子看起来更有活着的感觉，但似乎仍然缺失了些东西。与其他成熟动画相比，这个反弹看起来很僵硬。我们需要再添加一点扭动：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 6' src='//codepen.io/pulpexploder/embed/QdPZNp/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/QdPZNp/'>Bouncing Box 6</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n最终的微妙变形使得反弹看起来更加自然。总体而言，第一个例子中我们的基本线性反弹有了巨大的改善。\n\n这正是我们正在寻找的东西，但我们仍可以用定制的三次Bézier曲线进一步调整移动速率：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 7' src='//codepen.io/pulpexploder/embed/ypYXwb/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/ypYXwb/'>Bouncing Box 7</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n如果设计人员和开发人员不都了解基本的动画原理和控制方式，那就不可能做出生动的动画。这篇文章只是抓住了这两个领域一些浅显的地方。如果您是网页设计师或与设计师合作的网页开发人员，我强烈建议您阅读这两个领域的内容。\n\n对于动画原则，奥利约翰斯顿和弗兰克托马斯的《The Illusion of Life: Disney Animation》是一本伟大的入门书籍。学会关于动画原则的通用语言后，设计人员和开发人员之间的沟通和协作将变得更加容易。\n\n对于CSS动画的控制和变化，其可能性几乎是无止境的，因为延迟和计时很容易调整。如前所述，如果您不喜欢现成的易用的定时功能，则可以使用cubic-bezier()来创建自己的定时功能。您还可以对动画做出调整，使其更接近于漫画或更接近于现实。重要的是，设计师和开发人员都要考虑这些变化，而不是盲目地沟通且不考虑用户体验。互相共享知识和互相协作可以将简单的动画变成很棒的动画。\n\n\n原文：[https://css-tricks.com/making-css-animations-feel-natural/](https://css-tricks.com/making-css-animations-feel-natural/)\n\n作者：[Brandon Gregory](https://css-tricks.com/author/brandongregory/)\n\n译者：[evanyan](https://futu.im/author/evanyan)","source":"_posts/making-css-animations-feel-natural.md","raw":"---\ntitle: 【译】如何让CSS动画更自然\nsubtitle: 设计师负责设计，程序员负责编码。他们间互不干涉。\ncover: /images/making-css-animations-feel-natural/cover.png\ndate: 2018-06-08 19:30:58\ncategories: [翻译]\nauthor: evanyan\ntags: [css, html, 翻译]\n---\n在过去，设计师负责设计，程序员负责编码。他们间互不干涉。但随着CSS中transitions和animations的到来，设计和编码的界限模糊了。设计师描述设计，而程序员把设计师的描述翻译成具体代码--这种合作模式不再像过去那么简单。为了高效地协作，设计师必须懂点代码，而程序员必须懂点设计。\n<escape><!-- more --></escape>\n\n举个例子，假设一位设计师要求开发人员实现一个如下所示的盒子反弹动画，在没有跨界知识和通用标准表述的情况下，设计师和程序员的沟通会有少许信息丢失。程序员没有足够的信息去了解设计师的意图，设计师也不知道他们到底可以选择什么。这样的沟通会有信息缺失，你最后完成的效果可能是下面这样的：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 1' src='//codepen.io/pulpexploder/embed/apxRbK/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/apxRbK/'>Bouncing Box 1</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n这样的效果并不会令人兴奋。虽然这已经符合动画效果的基本标准，但我们绝对可以做得更好。\n\n首先要看的是animation-timing-function属性。在上面的例子中，我们对此属性赋值linear，这意味着盒子以相同的速度不断运动。在某些情况下，这是可取的；然而，在现实世界中，运动通常不是线性的。\n\n一个简单的解决方法是改变animation-timing-function属性。这使得每个动画的开始部分和结束部分比中间部分稍慢，这会令一些动画更自然。以下是启用了缓动功能的方块：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 2' src='//codepen.io/pulpexploder/embed/bgJmde/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/bgJmde/'>Bouncing Box 2</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n这只是一个小小的改进，所以我们仍有很多工作要做。同一时间内一次又一次地出现相同的动画，令方块看起来仍然机械又僵硬。在反弹之间增加一点点延迟，可让动画看起来更自然些：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 3' src='//codepen.io/pulpexploder/embed/YNMJXb/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/YNMJXb/'>Bouncing Box 3</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n现在这个动画看起来就像盒子自己在跳跃，而不是简单地被上下移动。跳跃之间有一点蓄力和停滞，模仿了活着的生物做同样的事情时会有的表现。尽管我们没有提供盒子跳跃的设计参考，但我们都对生物跳跃的表现有很好的了解。我们知道真实跳跃是什么样子，通过模仿，动画可以更自然。我们可以做更多的事情来让这种感觉变得更加突出。\n\n如果你看动画片，你会注意到一些现实生活中的动作往往会被夸大、漫画化。做得好的话，这些动作就像在真实世界中一样自然，还带了些特有的魅力和个性。\n\n在这个阶段，设计师和开发者之间的合作是至关重要的 -- 但许多设计师可能都不知道这些选择的存在，所以得提醒开发人员将这些选择提供给设计人员。\n\n通过在方块上添加一些轻微的变形，我们可以令动画丰满许多：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 4' src='//codepen.io/pulpexploder/embed/YNMJyb/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/YNMJyb/'>Bouncing Box 4</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n现在，盒子是一个活着的角色。仍有很多事情需要调整，但这已经比原来的动画更进一步 -- 以一种非常好的方式。\n\n现在我们更进一步，在跳跃结束时添加一点反弹：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 5' src='//codepen.io/pulpexploder/embed/MJRPKE/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/MJRPKE/'>Bouncing Box 5</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n第二次反弹让盒子看起来更有活着的感觉，但似乎仍然缺失了些东西。与其他成熟动画相比，这个反弹看起来很僵硬。我们需要再添加一点扭动：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 6' src='//codepen.io/pulpexploder/embed/QdPZNp/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/QdPZNp/'>Bouncing Box 6</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n最终的微妙变形使得反弹看起来更加自然。总体而言，第一个例子中我们的基本线性反弹有了巨大的改善。\n\n这正是我们正在寻找的东西，但我们仍可以用定制的三次Bézier曲线进一步调整移动速率：\n\n<iframe height='450' scrolling='no' title='Bouncing Box 7' src='//codepen.io/pulpexploder/embed/ypYXwb/?height=265&theme-id=dark&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pulpexploder/pen/ypYXwb/'>Bouncing Box 7</a> by Brandon Gregory (<a href='https://codepen.io/pulpexploder'>@pulpexploder</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n如果设计人员和开发人员不都了解基本的动画原理和控制方式，那就不可能做出生动的动画。这篇文章只是抓住了这两个领域一些浅显的地方。如果您是网页设计师或与设计师合作的网页开发人员，我强烈建议您阅读这两个领域的内容。\n\n对于动画原则，奥利约翰斯顿和弗兰克托马斯的《The Illusion of Life: Disney Animation》是一本伟大的入门书籍。学会关于动画原则的通用语言后，设计人员和开发人员之间的沟通和协作将变得更加容易。\n\n对于CSS动画的控制和变化，其可能性几乎是无止境的，因为延迟和计时很容易调整。如前所述，如果您不喜欢现成的易用的定时功能，则可以使用cubic-bezier()来创建自己的定时功能。您还可以对动画做出调整，使其更接近于漫画或更接近于现实。重要的是，设计师和开发人员都要考虑这些变化，而不是盲目地沟通且不考虑用户体验。互相共享知识和互相协作可以将简单的动画变成很棒的动画。\n\n\n原文：[https://css-tricks.com/making-css-animations-feel-natural/](https://css-tricks.com/making-css-animations-feel-natural/)\n\n作者：[Brandon Gregory](https://css-tricks.com/author/brandongregory/)\n\n译者：[evanyan](https://futu.im/author/evanyan)","slug":"making-css-animations-feel-natural","published":1,"updated":"2019-08-29T02:31:20.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4yk0027uaidzytr21g6","content":"<p>在过去，设计师负责设计，程序员负责编码。他们间互不干涉。但随着CSS中transitions和animations的到来，设计和编码的界限模糊了。设计师描述设计，而程序员把设计师的描述翻译成具体代码–这种合作模式不再像过去那么简单。为了高效地协作，设计师必须懂点代码，而程序员必须懂点设计。</p>\n<a id=\"more\"></a>\n\n<p>举个例子，假设一位设计师要求开发人员实现一个如下所示的盒子反弹动画，在没有跨界知识和通用标准表述的情况下，设计师和程序员的沟通会有少许信息丢失。程序员没有足够的信息去了解设计师的意图，设计师也不知道他们到底可以选择什么。这样的沟通会有信息缺失，你最后完成的效果可能是下面这样的：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 1\" src=\"//codepen.io/pulpexploder/embed/apxRbK/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/apxRbK/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 1</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>这样的效果并不会令人兴奋。虽然这已经符合动画效果的基本标准，但我们绝对可以做得更好。</p>\n<p>首先要看的是animation-timing-function属性。在上面的例子中，我们对此属性赋值linear，这意味着盒子以相同的速度不断运动。在某些情况下，这是可取的；然而，在现实世界中，运动通常不是线性的。</p>\n<p>一个简单的解决方法是改变animation-timing-function属性。这使得每个动画的开始部分和结束部分比中间部分稍慢，这会令一些动画更自然。以下是启用了缓动功能的方块：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 2\" src=\"//codepen.io/pulpexploder/embed/bgJmde/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/bgJmde/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 2</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>这只是一个小小的改进，所以我们仍有很多工作要做。同一时间内一次又一次地出现相同的动画，令方块看起来仍然机械又僵硬。在反弹之间增加一点点延迟，可让动画看起来更自然些：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 3\" src=\"//codepen.io/pulpexploder/embed/YNMJXb/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/YNMJXb/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 3</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>现在这个动画看起来就像盒子自己在跳跃，而不是简单地被上下移动。跳跃之间有一点蓄力和停滞，模仿了活着的生物做同样的事情时会有的表现。尽管我们没有提供盒子跳跃的设计参考，但我们都对生物跳跃的表现有很好的了解。我们知道真实跳跃是什么样子，通过模仿，动画可以更自然。我们可以做更多的事情来让这种感觉变得更加突出。</p>\n<p>如果你看动画片，你会注意到一些现实生活中的动作往往会被夸大、漫画化。做得好的话，这些动作就像在真实世界中一样自然，还带了些特有的魅力和个性。</p>\n<p>在这个阶段，设计师和开发者之间的合作是至关重要的 – 但许多设计师可能都不知道这些选择的存在，所以得提醒开发人员将这些选择提供给设计人员。</p>\n<p>通过在方块上添加一些轻微的变形，我们可以令动画丰满许多：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 4\" src=\"//codepen.io/pulpexploder/embed/YNMJyb/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/YNMJyb/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 4</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>现在，盒子是一个活着的角色。仍有很多事情需要调整，但这已经比原来的动画更进一步 – 以一种非常好的方式。</p>\n<p>现在我们更进一步，在跳跃结束时添加一点反弹：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 5\" src=\"//codepen.io/pulpexploder/embed/MJRPKE/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/MJRPKE/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 5</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>第二次反弹让盒子看起来更有活着的感觉，但似乎仍然缺失了些东西。与其他成熟动画相比，这个反弹看起来很僵硬。我们需要再添加一点扭动：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 6\" src=\"//codepen.io/pulpexploder/embed/QdPZNp/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/QdPZNp/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 6</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>最终的微妙变形使得反弹看起来更加自然。总体而言，第一个例子中我们的基本线性反弹有了巨大的改善。</p>\n<p>这正是我们正在寻找的东西，但我们仍可以用定制的三次Bézier曲线进一步调整移动速率：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 7\" src=\"//codepen.io/pulpexploder/embed/ypYXwb/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/ypYXwb/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 7</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>如果设计人员和开发人员不都了解基本的动画原理和控制方式，那就不可能做出生动的动画。这篇文章只是抓住了这两个领域一些浅显的地方。如果您是网页设计师或与设计师合作的网页开发人员，我强烈建议您阅读这两个领域的内容。</p>\n<p>对于动画原则，奥利约翰斯顿和弗兰克托马斯的《The Illusion of Life: Disney Animation》是一本伟大的入门书籍。学会关于动画原则的通用语言后，设计人员和开发人员之间的沟通和协作将变得更加容易。</p>\n<p>对于CSS动画的控制和变化，其可能性几乎是无止境的，因为延迟和计时很容易调整。如前所述，如果您不喜欢现成的易用的定时功能，则可以使用cubic-bezier()来创建自己的定时功能。您还可以对动画做出调整，使其更接近于漫画或更接近于现实。重要的是，设计师和开发人员都要考虑这些变化，而不是盲目地沟通且不考虑用户体验。互相共享知识和互相协作可以将简单的动画变成很棒的动画。</p>\n<p>原文：<a href=\"https://css-tricks.com/making-css-animations-feel-natural/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/making-css-animations-feel-natural/</a></p>\n<p>作者：<a href=\"https://css-tricks.com/author/brandongregory/\" target=\"_blank\" rel=\"noopener\">Brandon Gregory</a></p>\n<p>译者：<a href=\"https://futu.im/author/evanyan\" target=\"_blank\" rel=\"noopener\">evanyan</a></p>\n","site":{"data":{}},"length":2153,"excerpt":"<p>在过去，设计师负责设计，程序员负责编码。他们间互不干涉。但随着CSS中transitions和animations的到来，设计和编码的界限模糊了。设计师描述设计，而程序员把设计师的描述翻译成具体代码–这种合作模式不再像过去那么简单。为了高效地协作，设计师必须懂点代码，而程序员必须懂点设计。</p>","more":"<p>举个例子，假设一位设计师要求开发人员实现一个如下所示的盒子反弹动画，在没有跨界知识和通用标准表述的情况下，设计师和程序员的沟通会有少许信息丢失。程序员没有足够的信息去了解设计师的意图，设计师也不知道他们到底可以选择什么。这样的沟通会有信息缺失，你最后完成的效果可能是下面这样的：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 1\" src=\"//codepen.io/pulpexploder/embed/apxRbK/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/apxRbK/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 1</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>这样的效果并不会令人兴奋。虽然这已经符合动画效果的基本标准，但我们绝对可以做得更好。</p>\n<p>首先要看的是animation-timing-function属性。在上面的例子中，我们对此属性赋值linear，这意味着盒子以相同的速度不断运动。在某些情况下，这是可取的；然而，在现实世界中，运动通常不是线性的。</p>\n<p>一个简单的解决方法是改变animation-timing-function属性。这使得每个动画的开始部分和结束部分比中间部分稍慢，这会令一些动画更自然。以下是启用了缓动功能的方块：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 2\" src=\"//codepen.io/pulpexploder/embed/bgJmde/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/bgJmde/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 2</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>这只是一个小小的改进，所以我们仍有很多工作要做。同一时间内一次又一次地出现相同的动画，令方块看起来仍然机械又僵硬。在反弹之间增加一点点延迟，可让动画看起来更自然些：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 3\" src=\"//codepen.io/pulpexploder/embed/YNMJXb/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/YNMJXb/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 3</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>现在这个动画看起来就像盒子自己在跳跃，而不是简单地被上下移动。跳跃之间有一点蓄力和停滞，模仿了活着的生物做同样的事情时会有的表现。尽管我们没有提供盒子跳跃的设计参考，但我们都对生物跳跃的表现有很好的了解。我们知道真实跳跃是什么样子，通过模仿，动画可以更自然。我们可以做更多的事情来让这种感觉变得更加突出。</p>\n<p>如果你看动画片，你会注意到一些现实生活中的动作往往会被夸大、漫画化。做得好的话，这些动作就像在真实世界中一样自然，还带了些特有的魅力和个性。</p>\n<p>在这个阶段，设计师和开发者之间的合作是至关重要的 – 但许多设计师可能都不知道这些选择的存在，所以得提醒开发人员将这些选择提供给设计人员。</p>\n<p>通过在方块上添加一些轻微的变形，我们可以令动画丰满许多：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 4\" src=\"//codepen.io/pulpexploder/embed/YNMJyb/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/YNMJyb/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 4</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>现在，盒子是一个活着的角色。仍有很多事情需要调整，但这已经比原来的动画更进一步 – 以一种非常好的方式。</p>\n<p>现在我们更进一步，在跳跃结束时添加一点反弹：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 5\" src=\"//codepen.io/pulpexploder/embed/MJRPKE/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/MJRPKE/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 5</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>第二次反弹让盒子看起来更有活着的感觉，但似乎仍然缺失了些东西。与其他成熟动画相比，这个反弹看起来很僵硬。我们需要再添加一点扭动：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 6\" src=\"//codepen.io/pulpexploder/embed/QdPZNp/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/QdPZNp/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 6</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>最终的微妙变形使得反弹看起来更加自然。总体而言，第一个例子中我们的基本线性反弹有了巨大的改善。</p>\n<p>这正是我们正在寻找的东西，但我们仍可以用定制的三次Bézier曲线进一步调整移动速率：</p>\n<iframe height=\"450\" scrolling=\"no\" title=\"Bouncing Box 7\" src=\"//codepen.io/pulpexploder/embed/ypYXwb/?height=265&theme-id=dark&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pulpexploder/pen/ypYXwb/\" target=\"_blank\" rel=\"noopener\">Bouncing Box 7</a> by Brandon Gregory (<a href=\"https://codepen.io/pulpexploder\" target=\"_blank\" rel=\"noopener\">@pulpexploder</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>如果设计人员和开发人员不都了解基本的动画原理和控制方式，那就不可能做出生动的动画。这篇文章只是抓住了这两个领域一些浅显的地方。如果您是网页设计师或与设计师合作的网页开发人员，我强烈建议您阅读这两个领域的内容。</p>\n<p>对于动画原则，奥利约翰斯顿和弗兰克托马斯的《The Illusion of Life: Disney Animation》是一本伟大的入门书籍。学会关于动画原则的通用语言后，设计人员和开发人员之间的沟通和协作将变得更加容易。</p>\n<p>对于CSS动画的控制和变化，其可能性几乎是无止境的，因为延迟和计时很容易调整。如前所述，如果您不喜欢现成的易用的定时功能，则可以使用cubic-bezier()来创建自己的定时功能。您还可以对动画做出调整，使其更接近于漫画或更接近于现实。重要的是，设计师和开发人员都要考虑这些变化，而不是盲目地沟通且不考虑用户体验。互相共享知识和互相协作可以将简单的动画变成很棒的动画。</p>\n<p>原文：<a href=\"https://css-tricks.com/making-css-animations-feel-natural/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/making-css-animations-feel-natural/</a></p>\n<p>作者：<a href=\"https://css-tricks.com/author/brandongregory/\" target=\"_blank\" rel=\"noopener\">Brandon Gregory</a></p>\n<p>译者：<a href=\"https://futu.im/author/evanyan\" target=\"_blank\" rel=\"noopener\">evanyan</a></p>"},{"title":"前端组件测试构建指引","date":"2017-06-06T08:27:58.000Z","_content":"\n![](/images/test-guide/test_run.gif)\n\n<escape><!-- more --></escape>\n\n## 背景\n1. 前端组件被业务依赖，需要保证其可靠性\n2. 前端组件需要迭代，则完整、可靠的测试用例可保证迭代安全\n3. 良好的测试可以让开发人员在开发时不再关注测试，提高工作效率\n\n##  对业务代码的要求\n要构建良好的测试，对被测代码也有一定的要求。\n1. 保持代码短小精悍，命令型代码块（do something）和查询型代码块（get something）需要分割至不同的函数\n2. 使用代码校验工具，比如eslint\n3. 圈复杂度，又称代码分支，也就是代码中if else的数量，尽量少于5，有助于提升测试覆盖率\n4. 不出现重复代码\n5. 代码需要注释\n\n## 测试工具选型\n\n### 测试框架选型：\n1. Qunit\n2. jasmine\n3. mocha\n\n前端组件的使用场景中，有大量的异步操作。上述3个测试框架，只有mocha可以很方便地进行异步测试。所以，测试框架使用mocha。\n\n### 断言库选型：\n1. better-assert，C-style TDD 断言库\n2. should.js，BDD 风格断言库\n3. expect.js， 追求极简的 BDD 风格断言库，基于 should.js 简化\n4. chai， BDD/TDD 双模 ，同时支持 should / expect / assert 三种风格的断言库强大插件机制\n\ngoogle mocha的使用教程，断言库都是chai，所以。。。。。。\n\n### 代码覆盖率工具\n1. istanbul\n2. 。。。\n\njavascript的代码覆盖率工具中，istanbul流行度最高。\n\n### UI测试模式选型：\n1. casperjs+phantomjs，phantomjs是无界面浏览器，casperjs对phantomjs api进行了提高易用性的封装\n2. Selenium 1，会起一个服务，开发人员给这个服务发布任务，服务会通过给浏览器注入javascript的方式驱动浏览器\n3. webdriver，直接调用浏览器自动化的本地接口，驱动浏览器；可以直接在浏览器中运行。\n4. Selenium 2，集成了webdriver。UI测试时会启动一个服务，开发人员给这个服务发布任务，服务会通过webdriver驱动浏览器\n5. chrome的headless模式，就是chrome的无界面模式，可以通过其自身暴露的api进行驱动，也可以通过webdriver驱动。\n\nchrome的headless模式发布后，phantomjs的作者已经宣布不再维护phantomjs。第一个方案否决。\nchrome的headless模式目前才发布两个月，还没有多少实践案例，鉴于其可通过webdriver驱动，暂时观察之。\nwebdriver已被w3c标准化，各大浏览器都已实现其标准。这种驱动浏览器的方式，使用十分广泛，实践案例很多。\nSelenium 和 webdriver 目前是合并趋势。\n综上，使用第四方案。对应至node.js平台，使用selenium-webdriver模块和selenium服务进行通信。 \n\n### 和selenium服务通信的工具选型\n1. selenium-webdriver，社区活跃，在npm上看到下载量最高\n2. webdriverIO，api比selenium-webdriver友好，但配套测试工具配置起来比selenium-webdriver的要麻烦，npm下载量是selenium-webdriver的0.1倍\n3. WD.js，没用过，npm下载量同样是selenium-webdriver的0.1倍。\nselenium-webdriver的下载量最高，则在搜索具体问题的解决方案时，出来的信息应该也是最多的。此处选择selenium-webdriver。\n\n\n## 测试的基本概念\n我们可以构建一个简单的项目，在这个过程中了解测试的基本概念\n```\nmkdir fe_tests_example\ncd fe_tests_example\nnpm init\nnpm install -g mocha\nnpm install mocha chai --save\n```\n建立文件 ./utils/add.js\n```\nmodule.exports = function(a, b) {\n    return a + b;\n};\n```\n建立文件 ./tests/add.test.js\n```\nvar expect = require('chai').expect;\n\nvar add = require('../utils/add');\n\ndescribe('add 方法测试', function() {\n    it('2+2=4', function() {\n        expect(add(2, 2)).to.be.equal(4);\n    });\n    it('5+6=11', function() {\n        expect(add(5, 6)).to.be.equal(11);\n    });\n    it('0+(-2)=-2', function() {\n        expect(add(0, -2)).to.be.equal(-2);\n    });\n});\n```\n运行指令\n```\nmocha tests\\*.js\n```\n可以看到\n```\nD:\\work\\fe_tests_example (master) (fe_tests_example@1.0.0)\nλ mocha tests\\*.js\n\n\n  add 方法测试\n    √ 2+2=4\n    √ 5+6=11\n    √ 0+(-2)=-2\n\n\n  3 passing (21ms)\n```\n这就是一次单元测试。\n\n其中，add.test.js是测试脚本，一个个it代码块就是一个个测试用例。\n\n接下来是在浏览器环境下进行单元测试：\n首先\n```\nmocha init fe_unit_tests\n```\n可以看到项目下多了个 fe_unit_tests文件夹\n![](/images/test-guide/index.jpg)\n\n建立fe_unit_tests/add.js文件\n```\nfunction add(a, b) {\n    return a + b;\n};\n```\n\n修改 fe_unit_tests/tests.js文件：\n```\nvar expect = chai.expect;\n\ndescribe('add 方法测试', function() {\n    it('2+2=4', function() {\n        expect(add(2, 2)).to.be.equal(4);\n    });\n    it('5+6=11', function() {\n        expect(add(5, 6)).to.be.equal(11);\n    });\n    it('0+(-2)=-2', function() {\n        expect(add(0, -2)).to.be.equal(-2);\n    });\n});\n```\n修改 fe_unit_tests/index.html文件\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Mocha</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"mocha.css\" />\n  </head>\n  <body>\n    <div id=\"mocha\"></div>\n    <script src=\"mocha.js\"></script>\n    <script src=\"http://chaijs.com/chai.js\"></script>\n    <script>mocha.setup('bdd');</script>\n    <script src=\"add.js\"></script>\n    <script src=\"tests.js\"></script>\n    <script>\n      mocha.run();\n    </script>\n  </body>\n</html>\n```\n\n这就是浏览器环境下的单元测试\n\n## UI测试\n我们将继续通过实例项目来了解UI测试\n\n下载最新的[JDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html)，安装之。\n下载最新的[selenium](http://selenium-release.storage.googleapis.com/index.html)，一个jar包，不用安装。\n运行 selenium服务\n```\njava -jar selenium-server-standalone-2.45.0.jar\n```\n可以看到\n```\nλ java -jar selenium-server-standalone-3.4.0.jar\n15:15:07.198 INFO - Selenium build info: version: '3.4.0', revision: 'unknown'\n15:15:07.200 INFO - Launching a standalone Selenium Server\n2017-06-06 15:15:07.250:INFO::main: Logging initialized @549ms to org.seleniumhq.jetty9.util.log.StdErrLog\n15:15:07.345 INFO - Driver class not found: com.opera.core.systems.OperaDriver\n15:15:07.349 INFO - Driver provider com.opera.core.systems.OperaDriver registration is skipped:\nUnable to create new instances on this machine.\n15:15:07.350 INFO - Driver class not found: com.opera.core.systems.OperaDriver\n15:15:07.351 INFO - Driver provider com.opera.core.systems.OperaDriver is not registered\n15:15:07.352 INFO - Driver provider org.openqa.selenium.safari.SafariDriver registration is skipped:\n registration capabilities Capabilities [{browserName=safari, version=, platform=MAC}] does not match the current platform VISTA\n2017-06-06 15:15:07.453:INFO:osjs.Server:main: jetty-9.4.3.v20170317\n2017-06-06 15:15:07.521:INFO:osjsh.ContextHandler:main: Started o.s.j.s.ServletContextHandler@28d25987{/,null,AVAILABLE}\n2017-06-06 15:15:07.900:INFO:osjs.AbstractConnector:main: Started ServerConnector@3f49dace{HTTP/1.1,[http/1.1]}{0.0.0.0:4444}\n2017-06-06 15:15:07.901:INFO:osjs.Server:main: Started @1200ms\n15:15:07.901 INFO - Selenium Server is up and running\n```\n\n下载对应的浏览器驱动\n\n| browser |  component|  \n| :-------- | --------:| \n| Chrome | [chromedriver(.exe)](http://chromedriver.storage.googleapis.com/index.html) | \n| Internet Explorer | [IEDriverServer.exe](http://selenium-release.storage.googleapis.com/index.html) | \n| Edge | [MicrosoftWebDriver.msi](http://go.microsoft.com/fwlink/?LinkId=619687) | \n| Firefox 47+ | [geckodriver(.exe)](https://github.com/mozilla/geckodriver/releases/) | \n| PhantomJS | [phantomjs(.exe)](http://phantomjs.org/) | \n| Opera | [operadriver(.exe)](https://github.com/operasoftware/operachromiumdriver/releases) | \n| Safari | [safaridriver](https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28) |  \n\n在这里，我下载了chrome、firefox、ie的驱动，和刚才下好的selenium jar包放入同一个文件夹。\n\n这里有需要注意的几个点：\n1. chrome的驱动，最新的是2.2X那些，2.4是很老的版本。\n2. IE的webdriver驱动IE失败的话，尝试下修改注册表：注册表（regedit）中，32位系统寻找 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Internet Explorer\\Main\\FeatureControl\\FEATURE_BFCACHE ，64位系统寻找HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Internet\nExplorer\\Main\\FeatureControl\\FEATURE_BFCACHE ，FEATURE_BFCACHE项不一定存在，不存在就创建之。然后在这个项里面，创建一个DWORD值，name为 iexplore.exe， value为0。\n\nps:上面是自行安装配置使用selenium服务的方法。还可以通过工具包对selenium进行安装配置使用，具体请看[ui-h5-dialog组件test分支的test_guide.md](http://gitlab.futunn.com/webpackage/ui-h5-dialog/blob/test/test_guide.md)\n\n接下来，回到 fe_tests_example项目中\n```\nnpm install selenium-webdriver --save\n```\n\n建立 ui_tests/test1.js文件\n```\nvar webdriver = require('selenium-webdriver'),\n    By = webdriver.By,\n    until = webdriver.until,\n    test = require('selenium-webdriver/testing');\n\ntest.describe('百度搜索测试1,firefox浏览器', function() {\n    this.timeout(15000);\n    var driver;\n\n    test.before(function() {\n        driver = new webdriver.Builder().forBrowser('firefox').usingServer('http://localhost:4444/wd/hub').build();\n    });\n\n    test.it('搜索node.js', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('node.js');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('node.js_百度搜索'), 10000);\n    });\n\n    test.it('搜索jquery', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('jquery');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('jquery_百度搜索'), 10000);\n    });\n\n    test.it('搜索angular', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('angular');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('angular_百度搜索'), 10000);\n    });\n\n    test.after(function() {\n        driver.quit();\n    });\n});\n```\n\n建立 ui_tests/test2.js文件\n```\nvar webdriver = require('selenium-webdriver'),\n    By = webdriver.By,\n    until = webdriver.until,\n    test = require('selenium-webdriver/testing');\n\ntest.describe('百度搜索测试2,chrome浏览器', function() {\n    this.timeout(15000);\n    var driver;\n\n    test.before(function() {\n        driver = new webdriver.Builder().forBrowser('chrome').usingServer('http://localhost:4444/wd/hub').build();\n    });\n\n    test.it('搜索sublime', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('sublime');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('sublime_百度搜索'), 10000);\n    });\n\n    test.it('搜索webstorm', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('webstorm');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('webstorm_百度搜索'), 10000);\n    });\n\n    test.it('搜索atom', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('atom');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('atom_百度搜索'), 10000);\n    });\n\n    test.after(function() {\n        driver.quit();\n    });\n});\n```\n\n建立 ui_tests/test3.js文件\n```\nvar webdriver = require('selenium-webdriver'),\n    By = webdriver.By,\n    until = webdriver.until,\n    test = require('selenium-webdriver/testing');\n\ntest.describe('百度搜索测试3,ie测试', function() {\n    this.timeout(15000);\n    var driver;\n\n    test.before(function() {\n        driver = new webdriver.Builder().forBrowser('internet explorer').usingServer('http://localhost:4444/wd/hub').build();\n    });\n\n    test.it('搜索webdriver', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('webdriver');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('webdriver_百度搜索'), 10000);\n    });\n\n    test.it('搜索selenium', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('selenium');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('selenium_百度搜索'), 10000);\n    });\n\n    test.it('搜索mocha', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('mocha');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('mocha_百度搜索'), 10000);\n    });\n\n    test.after(function() {\n        driver.quit();\n    });\n});\n```\n\n然后\n```\n$ mocha .\\ui_tests\\*.js\n```\n\n可以看到\n\n![](/images/test-guide/test_run.gif)\n\n以上就是一次完整的UI测试。\n\n## 测试覆盖率\n\n测试覆盖率是针对单元测试的指标，他有下面几个维度：\n\n 1. 行覆盖率（line coverage）：是否每一行都执行了？\n 2. 函数覆盖率（function coverage）：是否每个函数都调用了？\n 3. 分支覆盖率（branch coverage）：是否每个if代码块都执行了？\n 4. 语句覆盖率（statement coverage）：是否每个语句都执行了？\n\n我们来实践一下。\n\n```\nnpm install istanbul --save\n```\n\n建立utils/ifElseTest.js文件\n```\nmodule.exports = function(a) {\n    if (a < 10) {\n        return 666;\n    } else if (a >= 10 && a < 20) {\n        return 777;\n    } else {\n        return 888;\n    }\n};\n\n```\n\n建立test/ifElseTest.test.js文件\n```\nvar expect = require('chai').expect;\n\nvar ifElseTest = require('../utils/ifElseTest');\n\ndescribe('ifElseTest 方法测试', function() {\n    it('expect(ifElseTest(5)).to.be.equal(666);', function() {\n        expect(ifElseTest(5)).to.be.equal(666);\n    });\n    it('expect(ifElseTest(6)).to.be.equal(666);', function() {\n        expect(ifElseTest(6)).to.be.equal(666);\n    });\n    it('expect(ifElseTest(17)).to.be.equal(777);', function() {\n        expect(ifElseTest(17)).to.be.equal(777);\n    });\n});\n```\n\n改写 package.json中的scripts部分:\n```\n{\n  \"name\": \"fe_tests_example\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"mocha ./test/*.js\",\n    \"test-cov\": \"./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"http://gitlab.futunn.com/evanyan/fe_tests_example.git\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"chai\": \"^4.0.2\",\n    \"mocha\": \"^3.4.2\",\n    \"selenium-webdriver\": \"^3.4.0\",\n    \"istanbul\": \"^0.4.5\"\n  }\n}\n```\n\n然后:\n```\nnpm run test-cov\n```\n可以看到：\n\n```\nλ npm run test-cov\n\n> fe_tests_example@1.0.0 test-cov D:\\work\\fe_tests_example\n> istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js\n\n\n\n  add 方法测试\n    √ 2+2=4\n    √ 5+6=11\n    √ 0+(-2)=-2\n\n  ifElseTest 方法测试\n    √ expect(ifElseTest(5)).to.be.equal(666);\n    √ expect(ifElseTest(6)).to.be.equal(666);\n    √ expect(ifElseTest(17)).to.be.equal(777);\n\n\n  6 passing (199ms)\n\n=============================================================================\nWriting coverage object [D:\\work\\fe_tests_example\\coverage\\coverage.json]\nWriting coverage reports at [D:\\work\\fe_tests_example\\coverage]\n=============================================================================\n\n=============================== Coverage summary ===============================\nStatements   : 87.5% ( 7/8 )\nBranches     : 83.33% ( 5/6 )\nFunctions    : 100% ( 2/2 )\nLines        : 87.5% ( 7/8 )\n================================================================================\n```\n\n此时项目中生成了 coverage文件夹，打开coverage/lcov-report/index.html，可以看到：\n![](/images/test-guide/71873817.jpg)\n\n可以看到，ifElseTest.js中，其中有一个if-else代码块没有被测到。\n我们改写一下 ifElseTest.test.js文件：\n```\nvar expect = require('chai').expect;\n\nvar ifElseTest = require('../utils/ifElseTest');\n\ndescribe('ifElseTest 方法测试', function() {\n    it('expect(ifElseTest(5)).to.be.equal(666);', function() {\n        expect(ifElseTest(5)).to.be.equal(666);\n    });\n    it('expect(ifElseTest(6)).to.be.equal(666);', function() {\n        expect(ifElseTest(6)).to.be.equal(666);\n    });\n    it('expect(ifElseTest(17)).to.be.equal(777);', function() {\n        expect(ifElseTest(17)).to.be.equal(777);\n    });\n    it('expect(ifElseTest(88)).to.be.equal(888);', function() {\n        expect(ifElseTest(88)).to.be.equal(888);\n    });\n});\n```\n\n然后\n```\nnpm run test-cov\n```\n可以看到：\n```\nλ npm run test-cov\n\n> fe_tests_example@1.0.0 test-cov D:\\work\\fe_tests_example\n> istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js\n\n\n\n  add 方法测试\n    √ 2+2=4\n    √ 5+6=11\n    √ 0+(-2)=-2\n\n  ifElseTest 方法测试\n    √ expect(ifElseTest(5)).to.be.equal(666);\n    √ expect(ifElseTest(6)).to.be.equal(666);\n    √ expect(ifElseTest(17)).to.be.equal(777);\n    √ expect(ifElseTest(88)).to.be.equal(888);\n\n\n  7 passing (50ms)\n\n=============================================================================\nWriting coverage object [D:\\work\\fe_tests_example\\coverage\\coverage.json]\nWriting coverage reports at [D:\\work\\fe_tests_example\\coverage]\n=============================================================================\n\n=============================== Coverage summary ===============================\nStatements   : 100% ( 8/8 )\nBranches     : 100% ( 6/6 )\nFunctions    : 100% ( 2/2 )\nLines        : 100% ( 8/8 )\n================================================================================\n```\n\n![](http://oqt9zb1sq.bkt.clouddn.com/17-7-12/61203301.jpg)\n\n可以看到测试覆盖率达到100%，被测代码的每一行都被测到。\n\n## 具体实践的一些建议\n\n1. 所有测试代码，都应该放在test文件夹中\n2. 单元测试测逻辑部分，被测代码的测试覆盖率尽量达到100%；端对端测试测试主要流程是否能跑通，针对前端ui组件，还有查看组件在不同浏览器下表现的任务。所以，单元测试的测试量应该比端对端测试大很多。\n3. 单元测试只测逻辑部分代码，io操作、dom操作的代码不纳入单元测试范畴中。\n4. io操作、dom操作的测试由端对端测试来完成。\n\n## 参考\n\n[mocha api 文档](http://mochajs.org/)\n[chai api文档](http://chaijs.com/api/bdd/ \"chai api doc\")\n[selenium-webdriver api文档](http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/)\n","source":"_posts/test-guide.md","raw":"---\ntitle: 前端组件测试构建指引\ndate: 2017-06-06 16:27:58\ntags: [测试, 自动化]\n---\n\n![](/images/test-guide/test_run.gif)\n\n<escape><!-- more --></escape>\n\n## 背景\n1. 前端组件被业务依赖，需要保证其可靠性\n2. 前端组件需要迭代，则完整、可靠的测试用例可保证迭代安全\n3. 良好的测试可以让开发人员在开发时不再关注测试，提高工作效率\n\n##  对业务代码的要求\n要构建良好的测试，对被测代码也有一定的要求。\n1. 保持代码短小精悍，命令型代码块（do something）和查询型代码块（get something）需要分割至不同的函数\n2. 使用代码校验工具，比如eslint\n3. 圈复杂度，又称代码分支，也就是代码中if else的数量，尽量少于5，有助于提升测试覆盖率\n4. 不出现重复代码\n5. 代码需要注释\n\n## 测试工具选型\n\n### 测试框架选型：\n1. Qunit\n2. jasmine\n3. mocha\n\n前端组件的使用场景中，有大量的异步操作。上述3个测试框架，只有mocha可以很方便地进行异步测试。所以，测试框架使用mocha。\n\n### 断言库选型：\n1. better-assert，C-style TDD 断言库\n2. should.js，BDD 风格断言库\n3. expect.js， 追求极简的 BDD 风格断言库，基于 should.js 简化\n4. chai， BDD/TDD 双模 ，同时支持 should / expect / assert 三种风格的断言库强大插件机制\n\ngoogle mocha的使用教程，断言库都是chai，所以。。。。。。\n\n### 代码覆盖率工具\n1. istanbul\n2. 。。。\n\njavascript的代码覆盖率工具中，istanbul流行度最高。\n\n### UI测试模式选型：\n1. casperjs+phantomjs，phantomjs是无界面浏览器，casperjs对phantomjs api进行了提高易用性的封装\n2. Selenium 1，会起一个服务，开发人员给这个服务发布任务，服务会通过给浏览器注入javascript的方式驱动浏览器\n3. webdriver，直接调用浏览器自动化的本地接口，驱动浏览器；可以直接在浏览器中运行。\n4. Selenium 2，集成了webdriver。UI测试时会启动一个服务，开发人员给这个服务发布任务，服务会通过webdriver驱动浏览器\n5. chrome的headless模式，就是chrome的无界面模式，可以通过其自身暴露的api进行驱动，也可以通过webdriver驱动。\n\nchrome的headless模式发布后，phantomjs的作者已经宣布不再维护phantomjs。第一个方案否决。\nchrome的headless模式目前才发布两个月，还没有多少实践案例，鉴于其可通过webdriver驱动，暂时观察之。\nwebdriver已被w3c标准化，各大浏览器都已实现其标准。这种驱动浏览器的方式，使用十分广泛，实践案例很多。\nSelenium 和 webdriver 目前是合并趋势。\n综上，使用第四方案。对应至node.js平台，使用selenium-webdriver模块和selenium服务进行通信。 \n\n### 和selenium服务通信的工具选型\n1. selenium-webdriver，社区活跃，在npm上看到下载量最高\n2. webdriverIO，api比selenium-webdriver友好，但配套测试工具配置起来比selenium-webdriver的要麻烦，npm下载量是selenium-webdriver的0.1倍\n3. WD.js，没用过，npm下载量同样是selenium-webdriver的0.1倍。\nselenium-webdriver的下载量最高，则在搜索具体问题的解决方案时，出来的信息应该也是最多的。此处选择selenium-webdriver。\n\n\n## 测试的基本概念\n我们可以构建一个简单的项目，在这个过程中了解测试的基本概念\n```\nmkdir fe_tests_example\ncd fe_tests_example\nnpm init\nnpm install -g mocha\nnpm install mocha chai --save\n```\n建立文件 ./utils/add.js\n```\nmodule.exports = function(a, b) {\n    return a + b;\n};\n```\n建立文件 ./tests/add.test.js\n```\nvar expect = require('chai').expect;\n\nvar add = require('../utils/add');\n\ndescribe('add 方法测试', function() {\n    it('2+2=4', function() {\n        expect(add(2, 2)).to.be.equal(4);\n    });\n    it('5+6=11', function() {\n        expect(add(5, 6)).to.be.equal(11);\n    });\n    it('0+(-2)=-2', function() {\n        expect(add(0, -2)).to.be.equal(-2);\n    });\n});\n```\n运行指令\n```\nmocha tests\\*.js\n```\n可以看到\n```\nD:\\work\\fe_tests_example (master) (fe_tests_example@1.0.0)\nλ mocha tests\\*.js\n\n\n  add 方法测试\n    √ 2+2=4\n    √ 5+6=11\n    √ 0+(-2)=-2\n\n\n  3 passing (21ms)\n```\n这就是一次单元测试。\n\n其中，add.test.js是测试脚本，一个个it代码块就是一个个测试用例。\n\n接下来是在浏览器环境下进行单元测试：\n首先\n```\nmocha init fe_unit_tests\n```\n可以看到项目下多了个 fe_unit_tests文件夹\n![](/images/test-guide/index.jpg)\n\n建立fe_unit_tests/add.js文件\n```\nfunction add(a, b) {\n    return a + b;\n};\n```\n\n修改 fe_unit_tests/tests.js文件：\n```\nvar expect = chai.expect;\n\ndescribe('add 方法测试', function() {\n    it('2+2=4', function() {\n        expect(add(2, 2)).to.be.equal(4);\n    });\n    it('5+6=11', function() {\n        expect(add(5, 6)).to.be.equal(11);\n    });\n    it('0+(-2)=-2', function() {\n        expect(add(0, -2)).to.be.equal(-2);\n    });\n});\n```\n修改 fe_unit_tests/index.html文件\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Mocha</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"mocha.css\" />\n  </head>\n  <body>\n    <div id=\"mocha\"></div>\n    <script src=\"mocha.js\"></script>\n    <script src=\"http://chaijs.com/chai.js\"></script>\n    <script>mocha.setup('bdd');</script>\n    <script src=\"add.js\"></script>\n    <script src=\"tests.js\"></script>\n    <script>\n      mocha.run();\n    </script>\n  </body>\n</html>\n```\n\n这就是浏览器环境下的单元测试\n\n## UI测试\n我们将继续通过实例项目来了解UI测试\n\n下载最新的[JDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html)，安装之。\n下载最新的[selenium](http://selenium-release.storage.googleapis.com/index.html)，一个jar包，不用安装。\n运行 selenium服务\n```\njava -jar selenium-server-standalone-2.45.0.jar\n```\n可以看到\n```\nλ java -jar selenium-server-standalone-3.4.0.jar\n15:15:07.198 INFO - Selenium build info: version: '3.4.0', revision: 'unknown'\n15:15:07.200 INFO - Launching a standalone Selenium Server\n2017-06-06 15:15:07.250:INFO::main: Logging initialized @549ms to org.seleniumhq.jetty9.util.log.StdErrLog\n15:15:07.345 INFO - Driver class not found: com.opera.core.systems.OperaDriver\n15:15:07.349 INFO - Driver provider com.opera.core.systems.OperaDriver registration is skipped:\nUnable to create new instances on this machine.\n15:15:07.350 INFO - Driver class not found: com.opera.core.systems.OperaDriver\n15:15:07.351 INFO - Driver provider com.opera.core.systems.OperaDriver is not registered\n15:15:07.352 INFO - Driver provider org.openqa.selenium.safari.SafariDriver registration is skipped:\n registration capabilities Capabilities [{browserName=safari, version=, platform=MAC}] does not match the current platform VISTA\n2017-06-06 15:15:07.453:INFO:osjs.Server:main: jetty-9.4.3.v20170317\n2017-06-06 15:15:07.521:INFO:osjsh.ContextHandler:main: Started o.s.j.s.ServletContextHandler@28d25987{/,null,AVAILABLE}\n2017-06-06 15:15:07.900:INFO:osjs.AbstractConnector:main: Started ServerConnector@3f49dace{HTTP/1.1,[http/1.1]}{0.0.0.0:4444}\n2017-06-06 15:15:07.901:INFO:osjs.Server:main: Started @1200ms\n15:15:07.901 INFO - Selenium Server is up and running\n```\n\n下载对应的浏览器驱动\n\n| browser |  component|  \n| :-------- | --------:| \n| Chrome | [chromedriver(.exe)](http://chromedriver.storage.googleapis.com/index.html) | \n| Internet Explorer | [IEDriverServer.exe](http://selenium-release.storage.googleapis.com/index.html) | \n| Edge | [MicrosoftWebDriver.msi](http://go.microsoft.com/fwlink/?LinkId=619687) | \n| Firefox 47+ | [geckodriver(.exe)](https://github.com/mozilla/geckodriver/releases/) | \n| PhantomJS | [phantomjs(.exe)](http://phantomjs.org/) | \n| Opera | [operadriver(.exe)](https://github.com/operasoftware/operachromiumdriver/releases) | \n| Safari | [safaridriver](https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28) |  \n\n在这里，我下载了chrome、firefox、ie的驱动，和刚才下好的selenium jar包放入同一个文件夹。\n\n这里有需要注意的几个点：\n1. chrome的驱动，最新的是2.2X那些，2.4是很老的版本。\n2. IE的webdriver驱动IE失败的话，尝试下修改注册表：注册表（regedit）中，32位系统寻找 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Internet Explorer\\Main\\FeatureControl\\FEATURE_BFCACHE ，64位系统寻找HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Internet\nExplorer\\Main\\FeatureControl\\FEATURE_BFCACHE ，FEATURE_BFCACHE项不一定存在，不存在就创建之。然后在这个项里面，创建一个DWORD值，name为 iexplore.exe， value为0。\n\nps:上面是自行安装配置使用selenium服务的方法。还可以通过工具包对selenium进行安装配置使用，具体请看[ui-h5-dialog组件test分支的test_guide.md](http://gitlab.futunn.com/webpackage/ui-h5-dialog/blob/test/test_guide.md)\n\n接下来，回到 fe_tests_example项目中\n```\nnpm install selenium-webdriver --save\n```\n\n建立 ui_tests/test1.js文件\n```\nvar webdriver = require('selenium-webdriver'),\n    By = webdriver.By,\n    until = webdriver.until,\n    test = require('selenium-webdriver/testing');\n\ntest.describe('百度搜索测试1,firefox浏览器', function() {\n    this.timeout(15000);\n    var driver;\n\n    test.before(function() {\n        driver = new webdriver.Builder().forBrowser('firefox').usingServer('http://localhost:4444/wd/hub').build();\n    });\n\n    test.it('搜索node.js', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('node.js');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('node.js_百度搜索'), 10000);\n    });\n\n    test.it('搜索jquery', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('jquery');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('jquery_百度搜索'), 10000);\n    });\n\n    test.it('搜索angular', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('angular');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('angular_百度搜索'), 10000);\n    });\n\n    test.after(function() {\n        driver.quit();\n    });\n});\n```\n\n建立 ui_tests/test2.js文件\n```\nvar webdriver = require('selenium-webdriver'),\n    By = webdriver.By,\n    until = webdriver.until,\n    test = require('selenium-webdriver/testing');\n\ntest.describe('百度搜索测试2,chrome浏览器', function() {\n    this.timeout(15000);\n    var driver;\n\n    test.before(function() {\n        driver = new webdriver.Builder().forBrowser('chrome').usingServer('http://localhost:4444/wd/hub').build();\n    });\n\n    test.it('搜索sublime', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('sublime');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('sublime_百度搜索'), 10000);\n    });\n\n    test.it('搜索webstorm', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('webstorm');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('webstorm_百度搜索'), 10000);\n    });\n\n    test.it('搜索atom', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('atom');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('atom_百度搜索'), 10000);\n    });\n\n    test.after(function() {\n        driver.quit();\n    });\n});\n```\n\n建立 ui_tests/test3.js文件\n```\nvar webdriver = require('selenium-webdriver'),\n    By = webdriver.By,\n    until = webdriver.until,\n    test = require('selenium-webdriver/testing');\n\ntest.describe('百度搜索测试3,ie测试', function() {\n    this.timeout(15000);\n    var driver;\n\n    test.before(function() {\n        driver = new webdriver.Builder().forBrowser('internet explorer').usingServer('http://localhost:4444/wd/hub').build();\n    });\n\n    test.it('搜索webdriver', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('webdriver');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('webdriver_百度搜索'), 10000);\n    });\n\n    test.it('搜索selenium', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('selenium');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('selenium_百度搜索'), 10000);\n    });\n\n    test.it('搜索mocha', function() {\n        driver.get('http://www.baidu.com');\n        driver.findElement(By.name('wd')).sendKeys('mocha');\n        driver.findElement(By.id('su')).click();\n        driver.wait(until.titleIs('mocha_百度搜索'), 10000);\n    });\n\n    test.after(function() {\n        driver.quit();\n    });\n});\n```\n\n然后\n```\n$ mocha .\\ui_tests\\*.js\n```\n\n可以看到\n\n![](/images/test-guide/test_run.gif)\n\n以上就是一次完整的UI测试。\n\n## 测试覆盖率\n\n测试覆盖率是针对单元测试的指标，他有下面几个维度：\n\n 1. 行覆盖率（line coverage）：是否每一行都执行了？\n 2. 函数覆盖率（function coverage）：是否每个函数都调用了？\n 3. 分支覆盖率（branch coverage）：是否每个if代码块都执行了？\n 4. 语句覆盖率（statement coverage）：是否每个语句都执行了？\n\n我们来实践一下。\n\n```\nnpm install istanbul --save\n```\n\n建立utils/ifElseTest.js文件\n```\nmodule.exports = function(a) {\n    if (a < 10) {\n        return 666;\n    } else if (a >= 10 && a < 20) {\n        return 777;\n    } else {\n        return 888;\n    }\n};\n\n```\n\n建立test/ifElseTest.test.js文件\n```\nvar expect = require('chai').expect;\n\nvar ifElseTest = require('../utils/ifElseTest');\n\ndescribe('ifElseTest 方法测试', function() {\n    it('expect(ifElseTest(5)).to.be.equal(666);', function() {\n        expect(ifElseTest(5)).to.be.equal(666);\n    });\n    it('expect(ifElseTest(6)).to.be.equal(666);', function() {\n        expect(ifElseTest(6)).to.be.equal(666);\n    });\n    it('expect(ifElseTest(17)).to.be.equal(777);', function() {\n        expect(ifElseTest(17)).to.be.equal(777);\n    });\n});\n```\n\n改写 package.json中的scripts部分:\n```\n{\n  \"name\": \"fe_tests_example\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"mocha ./test/*.js\",\n    \"test-cov\": \"./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"http://gitlab.futunn.com/evanyan/fe_tests_example.git\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"chai\": \"^4.0.2\",\n    \"mocha\": \"^3.4.2\",\n    \"selenium-webdriver\": \"^3.4.0\",\n    \"istanbul\": \"^0.4.5\"\n  }\n}\n```\n\n然后:\n```\nnpm run test-cov\n```\n可以看到：\n\n```\nλ npm run test-cov\n\n> fe_tests_example@1.0.0 test-cov D:\\work\\fe_tests_example\n> istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js\n\n\n\n  add 方法测试\n    √ 2+2=4\n    √ 5+6=11\n    √ 0+(-2)=-2\n\n  ifElseTest 方法测试\n    √ expect(ifElseTest(5)).to.be.equal(666);\n    √ expect(ifElseTest(6)).to.be.equal(666);\n    √ expect(ifElseTest(17)).to.be.equal(777);\n\n\n  6 passing (199ms)\n\n=============================================================================\nWriting coverage object [D:\\work\\fe_tests_example\\coverage\\coverage.json]\nWriting coverage reports at [D:\\work\\fe_tests_example\\coverage]\n=============================================================================\n\n=============================== Coverage summary ===============================\nStatements   : 87.5% ( 7/8 )\nBranches     : 83.33% ( 5/6 )\nFunctions    : 100% ( 2/2 )\nLines        : 87.5% ( 7/8 )\n================================================================================\n```\n\n此时项目中生成了 coverage文件夹，打开coverage/lcov-report/index.html，可以看到：\n![](/images/test-guide/71873817.jpg)\n\n可以看到，ifElseTest.js中，其中有一个if-else代码块没有被测到。\n我们改写一下 ifElseTest.test.js文件：\n```\nvar expect = require('chai').expect;\n\nvar ifElseTest = require('../utils/ifElseTest');\n\ndescribe('ifElseTest 方法测试', function() {\n    it('expect(ifElseTest(5)).to.be.equal(666);', function() {\n        expect(ifElseTest(5)).to.be.equal(666);\n    });\n    it('expect(ifElseTest(6)).to.be.equal(666);', function() {\n        expect(ifElseTest(6)).to.be.equal(666);\n    });\n    it('expect(ifElseTest(17)).to.be.equal(777);', function() {\n        expect(ifElseTest(17)).to.be.equal(777);\n    });\n    it('expect(ifElseTest(88)).to.be.equal(888);', function() {\n        expect(ifElseTest(88)).to.be.equal(888);\n    });\n});\n```\n\n然后\n```\nnpm run test-cov\n```\n可以看到：\n```\nλ npm run test-cov\n\n> fe_tests_example@1.0.0 test-cov D:\\work\\fe_tests_example\n> istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js\n\n\n\n  add 方法测试\n    √ 2+2=4\n    √ 5+6=11\n    √ 0+(-2)=-2\n\n  ifElseTest 方法测试\n    √ expect(ifElseTest(5)).to.be.equal(666);\n    √ expect(ifElseTest(6)).to.be.equal(666);\n    √ expect(ifElseTest(17)).to.be.equal(777);\n    √ expect(ifElseTest(88)).to.be.equal(888);\n\n\n  7 passing (50ms)\n\n=============================================================================\nWriting coverage object [D:\\work\\fe_tests_example\\coverage\\coverage.json]\nWriting coverage reports at [D:\\work\\fe_tests_example\\coverage]\n=============================================================================\n\n=============================== Coverage summary ===============================\nStatements   : 100% ( 8/8 )\nBranches     : 100% ( 6/6 )\nFunctions    : 100% ( 2/2 )\nLines        : 100% ( 8/8 )\n================================================================================\n```\n\n![](http://oqt9zb1sq.bkt.clouddn.com/17-7-12/61203301.jpg)\n\n可以看到测试覆盖率达到100%，被测代码的每一行都被测到。\n\n## 具体实践的一些建议\n\n1. 所有测试代码，都应该放在test文件夹中\n2. 单元测试测逻辑部分，被测代码的测试覆盖率尽量达到100%；端对端测试测试主要流程是否能跑通，针对前端ui组件，还有查看组件在不同浏览器下表现的任务。所以，单元测试的测试量应该比端对端测试大很多。\n3. 单元测试只测逻辑部分代码，io操作、dom操作的代码不纳入单元测试范畴中。\n4. io操作、dom操作的测试由端对端测试来完成。\n\n## 参考\n\n[mocha api 文档](http://mochajs.org/)\n[chai api文档](http://chaijs.com/api/bdd/ \"chai api doc\")\n[selenium-webdriver api文档](http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/)\n","slug":"test-guide","published":1,"updated":"2019-08-28T08:07:16.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzwat4zk002kuaid3sg10zsy","content":"<p><img src=\"/images/test-guide/test_run.gif\" alt></p>\n<a id=\"more\"></a>\n\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ol>\n<li>前端组件被业务依赖，需要保证其可靠性</li>\n<li>前端组件需要迭代，则完整、可靠的测试用例可保证迭代安全</li>\n<li>良好的测试可以让开发人员在开发时不再关注测试，提高工作效率</li>\n</ol>\n<h2 id=\"对业务代码的要求\"><a href=\"#对业务代码的要求\" class=\"headerlink\" title=\"对业务代码的要求\"></a>对业务代码的要求</h2><p>要构建良好的测试，对被测代码也有一定的要求。</p>\n<ol>\n<li>保持代码短小精悍，命令型代码块（do something）和查询型代码块（get something）需要分割至不同的函数</li>\n<li>使用代码校验工具，比如eslint</li>\n<li>圈复杂度，又称代码分支，也就是代码中if else的数量，尽量少于5，有助于提升测试覆盖率</li>\n<li>不出现重复代码</li>\n<li>代码需要注释</li>\n</ol>\n<h2 id=\"测试工具选型\"><a href=\"#测试工具选型\" class=\"headerlink\" title=\"测试工具选型\"></a>测试工具选型</h2><h3 id=\"测试框架选型：\"><a href=\"#测试框架选型：\" class=\"headerlink\" title=\"测试框架选型：\"></a>测试框架选型：</h3><ol>\n<li>Qunit</li>\n<li>jasmine</li>\n<li>mocha</li>\n</ol>\n<p>前端组件的使用场景中，有大量的异步操作。上述3个测试框架，只有mocha可以很方便地进行异步测试。所以，测试框架使用mocha。</p>\n<h3 id=\"断言库选型：\"><a href=\"#断言库选型：\" class=\"headerlink\" title=\"断言库选型：\"></a>断言库选型：</h3><ol>\n<li>better-assert，C-style TDD 断言库</li>\n<li>should.js，BDD 风格断言库</li>\n<li>expect.js， 追求极简的 BDD 风格断言库，基于 should.js 简化</li>\n<li>chai， BDD/TDD 双模 ，同时支持 should / expect / assert 三种风格的断言库强大插件机制</li>\n</ol>\n<p>google mocha的使用教程，断言库都是chai，所以。。。。。。</p>\n<h3 id=\"代码覆盖率工具\"><a href=\"#代码覆盖率工具\" class=\"headerlink\" title=\"代码覆盖率工具\"></a>代码覆盖率工具</h3><ol>\n<li>istanbul</li>\n<li>。。。</li>\n</ol>\n<p>javascript的代码覆盖率工具中，istanbul流行度最高。</p>\n<h3 id=\"UI测试模式选型：\"><a href=\"#UI测试模式选型：\" class=\"headerlink\" title=\"UI测试模式选型：\"></a>UI测试模式选型：</h3><ol>\n<li>casperjs+phantomjs，phantomjs是无界面浏览器，casperjs对phantomjs api进行了提高易用性的封装</li>\n<li>Selenium 1，会起一个服务，开发人员给这个服务发布任务，服务会通过给浏览器注入javascript的方式驱动浏览器</li>\n<li>webdriver，直接调用浏览器自动化的本地接口，驱动浏览器；可以直接在浏览器中运行。</li>\n<li>Selenium 2，集成了webdriver。UI测试时会启动一个服务，开发人员给这个服务发布任务，服务会通过webdriver驱动浏览器</li>\n<li>chrome的headless模式，就是chrome的无界面模式，可以通过其自身暴露的api进行驱动，也可以通过webdriver驱动。</li>\n</ol>\n<p>chrome的headless模式发布后，phantomjs的作者已经宣布不再维护phantomjs。第一个方案否决。<br>chrome的headless模式目前才发布两个月，还没有多少实践案例，鉴于其可通过webdriver驱动，暂时观察之。<br>webdriver已被w3c标准化，各大浏览器都已实现其标准。这种驱动浏览器的方式，使用十分广泛，实践案例很多。<br>Selenium 和 webdriver 目前是合并趋势。<br>综上，使用第四方案。对应至node.js平台，使用selenium-webdriver模块和selenium服务进行通信。 </p>\n<h3 id=\"和selenium服务通信的工具选型\"><a href=\"#和selenium服务通信的工具选型\" class=\"headerlink\" title=\"和selenium服务通信的工具选型\"></a>和selenium服务通信的工具选型</h3><ol>\n<li>selenium-webdriver，社区活跃，在npm上看到下载量最高</li>\n<li>webdriverIO，api比selenium-webdriver友好，但配套测试工具配置起来比selenium-webdriver的要麻烦，npm下载量是selenium-webdriver的0.1倍</li>\n<li>WD.js，没用过，npm下载量同样是selenium-webdriver的0.1倍。<br>selenium-webdriver的下载量最高，则在搜索具体问题的解决方案时，出来的信息应该也是最多的。此处选择selenium-webdriver。</li>\n</ol>\n<h2 id=\"测试的基本概念\"><a href=\"#测试的基本概念\" class=\"headerlink\" title=\"测试的基本概念\"></a>测试的基本概念</h2><p>我们可以构建一个简单的项目，在这个过程中了解测试的基本概念</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir fe_tests_example</span><br><span class=\"line\">cd fe_tests_example</span><br><span class=\"line\">npm init</span><br><span class=\"line\">npm install -g mocha</span><br><span class=\"line\">npm install mocha chai --save</span><br></pre></td></tr></table></figure>\n\n<p>建立文件 ./utils/add.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(a, b) &#123;</span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>建立文件 ./tests/add.test.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var expect = require(&apos;chai&apos;).expect;</span><br><span class=\"line\"></span><br><span class=\"line\">var add = require(&apos;../utils/add&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;add 方法测试&apos;, function() &#123;</span><br><span class=\"line\">    it(&apos;2+2=4&apos;, function() &#123;</span><br><span class=\"line\">        expect(add(2, 2)).to.be.equal(4);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;5+6=11&apos;, function() &#123;</span><br><span class=\"line\">        expect(add(5, 6)).to.be.equal(11);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;0+(-2)=-2&apos;, function() &#123;</span><br><span class=\"line\">        expect(add(0, -2)).to.be.equal(-2);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>运行指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mocha tests\\*.js</span><br></pre></td></tr></table></figure>\n\n<p>可以看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\work\\fe_tests_example (master) (fe_tests_example@1.0.0)</span><br><span class=\"line\">λ mocha tests\\*.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  add 方法测试</span><br><span class=\"line\">    √ 2+2=4</span><br><span class=\"line\">    √ 5+6=11</span><br><span class=\"line\">    √ 0+(-2)=-2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  3 passing (21ms)</span><br></pre></td></tr></table></figure>\n\n<p>这就是一次单元测试。</p>\n<p>其中，add.test.js是测试脚本，一个个it代码块就是一个个测试用例。</p>\n<p>接下来是在浏览器环境下进行单元测试：<br>首先</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mocha init fe_unit_tests</span><br></pre></td></tr></table></figure>\n\n<p>可以看到项目下多了个 fe_unit_tests文件夹<br><img src=\"/images/test-guide/index.jpg\" alt></p>\n<p>建立fe_unit_tests/add.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>修改 fe_unit_tests/tests.js文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var expect = chai.expect;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;add 方法测试&apos;, function() &#123;</span><br><span class=\"line\">    it(&apos;2+2=4&apos;, function() &#123;</span><br><span class=\"line\">        expect(add(2, 2)).to.be.equal(4);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;5+6=11&apos;, function() &#123;</span><br><span class=\"line\">        expect(add(5, 6)).to.be.equal(11);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;0+(-2)=-2&apos;, function() &#123;</span><br><span class=\"line\">        expect(add(0, -2)).to.be.equal(-2);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>修改 fe_unit_tests/index.html文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Mocha&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;mocha.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mocha&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;mocha.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;http://chaijs.com/chai.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;mocha.setup(&apos;bdd&apos;);&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;add.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;tests.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      mocha.run();</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这就是浏览器环境下的单元测试</p>\n<h2 id=\"UI测试\"><a href=\"#UI测试\" class=\"headerlink\" title=\"UI测试\"></a>UI测试</h2><p>我们将继续通过实例项目来了解UI测试</p>\n<p>下载最新的<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">JDK</a>，安装之。<br>下载最新的<a href=\"http://selenium-release.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"noopener\">selenium</a>，一个jar包，不用安装。<br>运行 selenium服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar selenium-server-standalone-2.45.0.jar</span><br></pre></td></tr></table></figure>\n\n<p>可以看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">λ java -jar selenium-server-standalone-3.4.0.jar</span><br><span class=\"line\">15:15:07.198 INFO - Selenium build info: version: &apos;3.4.0&apos;, revision: &apos;unknown&apos;</span><br><span class=\"line\">15:15:07.200 INFO - Launching a standalone Selenium Server</span><br><span class=\"line\">2017-06-06 15:15:07.250:INFO::main: Logging initialized @549ms to org.seleniumhq.jetty9.util.log.StdErrLog</span><br><span class=\"line\">15:15:07.345 INFO - Driver class not found: com.opera.core.systems.OperaDriver</span><br><span class=\"line\">15:15:07.349 INFO - Driver provider com.opera.core.systems.OperaDriver registration is skipped:</span><br><span class=\"line\">Unable to create new instances on this machine.</span><br><span class=\"line\">15:15:07.350 INFO - Driver class not found: com.opera.core.systems.OperaDriver</span><br><span class=\"line\">15:15:07.351 INFO - Driver provider com.opera.core.systems.OperaDriver is not registered</span><br><span class=\"line\">15:15:07.352 INFO - Driver provider org.openqa.selenium.safari.SafariDriver registration is skipped:</span><br><span class=\"line\"> registration capabilities Capabilities [&#123;browserName=safari, version=, platform=MAC&#125;] does not match the current platform VISTA</span><br><span class=\"line\">2017-06-06 15:15:07.453:INFO:osjs.Server:main: jetty-9.4.3.v20170317</span><br><span class=\"line\">2017-06-06 15:15:07.521:INFO:osjsh.ContextHandler:main: Started o.s.j.s.ServletContextHandler@28d25987&#123;/,null,AVAILABLE&#125;</span><br><span class=\"line\">2017-06-06 15:15:07.900:INFO:osjs.AbstractConnector:main: Started ServerConnector@3f49dace&#123;HTTP/1.1,[http/1.1]&#125;&#123;0.0.0.0:4444&#125;</span><br><span class=\"line\">2017-06-06 15:15:07.901:INFO:osjs.Server:main: Started @1200ms</span><br><span class=\"line\">15:15:07.901 INFO - Selenium Server is up and running</span><br></pre></td></tr></table></figure>\n\n<p>下载对应的浏览器驱动</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">browser</th>\n<th align=\"right\">component</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Chrome</td>\n<td align=\"right\"><a href=\"http://chromedriver.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"noopener\">chromedriver(.exe)</a></td>\n</tr>\n<tr>\n<td align=\"left\">Internet Explorer</td>\n<td align=\"right\"><a href=\"http://selenium-release.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"noopener\">IEDriverServer.exe</a></td>\n</tr>\n<tr>\n<td align=\"left\">Edge</td>\n<td align=\"right\"><a href=\"http://go.microsoft.com/fwlink/?LinkId=619687\" target=\"_blank\" rel=\"noopener\">MicrosoftWebDriver.msi</a></td>\n</tr>\n<tr>\n<td align=\"left\">Firefox 47+</td>\n<td align=\"right\"><a href=\"https://github.com/mozilla/geckodriver/releases/\" target=\"_blank\" rel=\"noopener\">geckodriver(.exe)</a></td>\n</tr>\n<tr>\n<td align=\"left\">PhantomJS</td>\n<td align=\"right\"><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">phantomjs(.exe)</a></td>\n</tr>\n<tr>\n<td align=\"left\">Opera</td>\n<td align=\"right\"><a href=\"https://github.com/operasoftware/operachromiumdriver/releases\" target=\"_blank\" rel=\"noopener\">operadriver(.exe)</a></td>\n</tr>\n<tr>\n<td align=\"left\">Safari</td>\n<td align=\"right\"><a href=\"https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28\" target=\"_blank\" rel=\"noopener\">safaridriver</a></td>\n</tr>\n</tbody></table>\n<p>在这里，我下载了chrome、firefox、ie的驱动，和刚才下好的selenium jar包放入同一个文件夹。</p>\n<p>这里有需要注意的几个点：</p>\n<ol>\n<li>chrome的驱动，最新的是2.2X那些，2.4是很老的版本。</li>\n<li>IE的webdriver驱动IE失败的话，尝试下修改注册表：注册表（regedit）中，32位系统寻找 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Internet Explorer\\Main\\FeatureControl\\FEATURE_BFCACHE ，64位系统寻找HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Internet<br>Explorer\\Main\\FeatureControl\\FEATURE_BFCACHE ，FEATURE_BFCACHE项不一定存在，不存在就创建之。然后在这个项里面，创建一个DWORD值，name为 iexplore.exe， value为0。</li>\n</ol>\n<p>ps:上面是自行安装配置使用selenium服务的方法。还可以通过工具包对selenium进行安装配置使用，具体请看<a href=\"http://gitlab.futunn.com/webpackage/ui-h5-dialog/blob/test/test_guide.md\" target=\"_blank\" rel=\"noopener\">ui-h5-dialog组件test分支的test_guide.md</a></p>\n<p>接下来，回到 fe_tests_example项目中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install selenium-webdriver --save</span><br></pre></td></tr></table></figure>\n\n<p>建立 ui_tests/test1.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webdriver = require(&apos;selenium-webdriver&apos;),</span><br><span class=\"line\">    By = webdriver.By,</span><br><span class=\"line\">    until = webdriver.until,</span><br><span class=\"line\">    test = require(&apos;selenium-webdriver/testing&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">test.describe(&apos;百度搜索测试1,firefox浏览器&apos;, function() &#123;</span><br><span class=\"line\">    this.timeout(15000);</span><br><span class=\"line\">    var driver;</span><br><span class=\"line\"></span><br><span class=\"line\">    test.before(function() &#123;</span><br><span class=\"line\">        driver = new webdriver.Builder().forBrowser(&apos;firefox&apos;).usingServer(&apos;http://localhost:4444/wd/hub&apos;).build();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索node.js&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;node.js&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;node.js_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索jquery&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;jquery&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;jquery_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索angular&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;angular&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;angular_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.after(function() &#123;</span><br><span class=\"line\">        driver.quit();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>建立 ui_tests/test2.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webdriver = require(&apos;selenium-webdriver&apos;),</span><br><span class=\"line\">    By = webdriver.By,</span><br><span class=\"line\">    until = webdriver.until,</span><br><span class=\"line\">    test = require(&apos;selenium-webdriver/testing&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">test.describe(&apos;百度搜索测试2,chrome浏览器&apos;, function() &#123;</span><br><span class=\"line\">    this.timeout(15000);</span><br><span class=\"line\">    var driver;</span><br><span class=\"line\"></span><br><span class=\"line\">    test.before(function() &#123;</span><br><span class=\"line\">        driver = new webdriver.Builder().forBrowser(&apos;chrome&apos;).usingServer(&apos;http://localhost:4444/wd/hub&apos;).build();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索sublime&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;sublime&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;sublime_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索webstorm&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;webstorm&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;webstorm_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索atom&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;atom&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;atom_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.after(function() &#123;</span><br><span class=\"line\">        driver.quit();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>建立 ui_tests/test3.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webdriver = require(&apos;selenium-webdriver&apos;),</span><br><span class=\"line\">    By = webdriver.By,</span><br><span class=\"line\">    until = webdriver.until,</span><br><span class=\"line\">    test = require(&apos;selenium-webdriver/testing&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">test.describe(&apos;百度搜索测试3,ie测试&apos;, function() &#123;</span><br><span class=\"line\">    this.timeout(15000);</span><br><span class=\"line\">    var driver;</span><br><span class=\"line\"></span><br><span class=\"line\">    test.before(function() &#123;</span><br><span class=\"line\">        driver = new webdriver.Builder().forBrowser(&apos;internet explorer&apos;).usingServer(&apos;http://localhost:4444/wd/hub&apos;).build();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索webdriver&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;webdriver&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;webdriver_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索selenium&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;selenium&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;selenium_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索mocha&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;mocha&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;mocha_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.after(function() &#123;</span><br><span class=\"line\">        driver.quit();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha .\\ui_tests\\*.js</span><br></pre></td></tr></table></figure>\n\n<p>可以看到</p>\n<p><img src=\"/images/test-guide/test_run.gif\" alt></p>\n<p>以上就是一次完整的UI测试。</p>\n<h2 id=\"测试覆盖率\"><a href=\"#测试覆盖率\" class=\"headerlink\" title=\"测试覆盖率\"></a>测试覆盖率</h2><p>测试覆盖率是针对单元测试的指标，他有下面几个维度：</p>\n<ol>\n<li>行覆盖率（line coverage）：是否每一行都执行了？</li>\n<li>函数覆盖率（function coverage）：是否每个函数都调用了？</li>\n<li>分支覆盖率（branch coverage）：是否每个if代码块都执行了？</li>\n<li>语句覆盖率（statement coverage）：是否每个语句都执行了？</li>\n</ol>\n<p>我们来实践一下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install istanbul --save</span><br></pre></td></tr></table></figure>\n\n<p>建立utils/ifElseTest.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(a) &#123;</span><br><span class=\"line\">    if (a &lt; 10) &#123;</span><br><span class=\"line\">        return 666;</span><br><span class=\"line\">    &#125; else if (a &gt;= 10 &amp;&amp; a &lt; 20) &#123;</span><br><span class=\"line\">        return 777;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return 888;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>建立test/ifElseTest.test.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var expect = require(&apos;chai&apos;).expect;</span><br><span class=\"line\"></span><br><span class=\"line\">var ifElseTest = require(&apos;../utils/ifElseTest&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;ifElseTest 方法测试&apos;, function() &#123;</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(5)).to.be.equal(666);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(5)).to.be.equal(666);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(6)).to.be.equal(666);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(6)).to.be.equal(666);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(17)).to.be.equal(777);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(17)).to.be.equal(777);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>改写 package.json中的scripts部分:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;fe_tests_example&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;mocha ./test/*.js&quot;,</span><br><span class=\"line\">    &quot;test-cov&quot;: &quot;./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;repository&quot;: &#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;git&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;http://gitlab.futunn.com/evanyan/fe_tests_example.git&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;chai&quot;: &quot;^4.0.2&quot;,</span><br><span class=\"line\">    &quot;mocha&quot;: &quot;^3.4.2&quot;,</span><br><span class=\"line\">    &quot;selenium-webdriver&quot;: &quot;^3.4.0&quot;,</span><br><span class=\"line\">    &quot;istanbul&quot;: &quot;^0.4.5&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run test-cov</span><br></pre></td></tr></table></figure>\n\n<p>可以看到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">λ npm run test-cov</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; fe_tests_example@1.0.0 test-cov D:\\work\\fe_tests_example</span><br><span class=\"line\">&gt; istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  add 方法测试</span><br><span class=\"line\">    √ 2+2=4</span><br><span class=\"line\">    √ 5+6=11</span><br><span class=\"line\">    √ 0+(-2)=-2</span><br><span class=\"line\"></span><br><span class=\"line\">  ifElseTest 方法测试</span><br><span class=\"line\">    √ expect(ifElseTest(5)).to.be.equal(666);</span><br><span class=\"line\">    √ expect(ifElseTest(6)).to.be.equal(666);</span><br><span class=\"line\">    √ expect(ifElseTest(17)).to.be.equal(777);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  6 passing (199ms)</span><br><span class=\"line\"></span><br><span class=\"line\">=============================================================================</span><br><span class=\"line\">Writing coverage object [D:\\work\\fe_tests_example\\coverage\\coverage.json]</span><br><span class=\"line\">Writing coverage reports at [D:\\work\\fe_tests_example\\coverage]</span><br><span class=\"line\">=============================================================================</span><br><span class=\"line\"></span><br><span class=\"line\">=============================== Coverage summary ===============================</span><br><span class=\"line\">Statements   : 87.5% ( 7/8 )</span><br><span class=\"line\">Branches     : 83.33% ( 5/6 )</span><br><span class=\"line\">Functions    : 100% ( 2/2 )</span><br><span class=\"line\">Lines        : 87.5% ( 7/8 )</span><br><span class=\"line\">================================================================================</span><br></pre></td></tr></table></figure>\n\n<p>此时项目中生成了 coverage文件夹，打开coverage/lcov-report/index.html，可以看到：<br><img src=\"/images/test-guide/71873817.jpg\" alt></p>\n<p>可以看到，ifElseTest.js中，其中有一个if-else代码块没有被测到。<br>我们改写一下 ifElseTest.test.js文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var expect = require(&apos;chai&apos;).expect;</span><br><span class=\"line\"></span><br><span class=\"line\">var ifElseTest = require(&apos;../utils/ifElseTest&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;ifElseTest 方法测试&apos;, function() &#123;</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(5)).to.be.equal(666);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(5)).to.be.equal(666);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(6)).to.be.equal(666);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(6)).to.be.equal(666);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(17)).to.be.equal(777);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(17)).to.be.equal(777);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(88)).to.be.equal(888);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(88)).to.be.equal(888);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run test-cov</span><br></pre></td></tr></table></figure>\n\n<p>可以看到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">λ npm run test-cov</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; fe_tests_example@1.0.0 test-cov D:\\work\\fe_tests_example</span><br><span class=\"line\">&gt; istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  add 方法测试</span><br><span class=\"line\">    √ 2+2=4</span><br><span class=\"line\">    √ 5+6=11</span><br><span class=\"line\">    √ 0+(-2)=-2</span><br><span class=\"line\"></span><br><span class=\"line\">  ifElseTest 方法测试</span><br><span class=\"line\">    √ expect(ifElseTest(5)).to.be.equal(666);</span><br><span class=\"line\">    √ expect(ifElseTest(6)).to.be.equal(666);</span><br><span class=\"line\">    √ expect(ifElseTest(17)).to.be.equal(777);</span><br><span class=\"line\">    √ expect(ifElseTest(88)).to.be.equal(888);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  7 passing (50ms)</span><br><span class=\"line\"></span><br><span class=\"line\">=============================================================================</span><br><span class=\"line\">Writing coverage object [D:\\work\\fe_tests_example\\coverage\\coverage.json]</span><br><span class=\"line\">Writing coverage reports at [D:\\work\\fe_tests_example\\coverage]</span><br><span class=\"line\">=============================================================================</span><br><span class=\"line\"></span><br><span class=\"line\">=============================== Coverage summary ===============================</span><br><span class=\"line\">Statements   : 100% ( 8/8 )</span><br><span class=\"line\">Branches     : 100% ( 6/6 )</span><br><span class=\"line\">Functions    : 100% ( 2/2 )</span><br><span class=\"line\">Lines        : 100% ( 8/8 )</span><br><span class=\"line\">================================================================================</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://oqt9zb1sq.bkt.clouddn.com/17-7-12/61203301.jpg\" alt></p>\n<p>可以看到测试覆盖率达到100%，被测代码的每一行都被测到。</p>\n<h2 id=\"具体实践的一些建议\"><a href=\"#具体实践的一些建议\" class=\"headerlink\" title=\"具体实践的一些建议\"></a>具体实践的一些建议</h2><ol>\n<li>所有测试代码，都应该放在test文件夹中</li>\n<li>单元测试测逻辑部分，被测代码的测试覆盖率尽量达到100%；端对端测试测试主要流程是否能跑通，针对前端ui组件，还有查看组件在不同浏览器下表现的任务。所以，单元测试的测试量应该比端对端测试大很多。</li>\n<li>单元测试只测逻辑部分代码，io操作、dom操作的代码不纳入单元测试范畴中。</li>\n<li>io操作、dom操作的测试由端对端测试来完成。</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"noopener\">mocha api 文档</a><br><a href=\"http://chaijs.com/api/bdd/\" title=\"chai api doc\" target=\"_blank\" rel=\"noopener\">chai api文档</a><br><a href=\"http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/\" target=\"_blank\" rel=\"noopener\">selenium-webdriver api文档</a></p>\n","site":{"data":{}},"length":16163,"excerpt":"<p><img src=\"/images/test-guide/test_run.gif\" alt></p>","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ol>\n<li>前端组件被业务依赖，需要保证其可靠性</li>\n<li>前端组件需要迭代，则完整、可靠的测试用例可保证迭代安全</li>\n<li>良好的测试可以让开发人员在开发时不再关注测试，提高工作效率</li>\n</ol>\n<h2 id=\"对业务代码的要求\"><a href=\"#对业务代码的要求\" class=\"headerlink\" title=\"对业务代码的要求\"></a>对业务代码的要求</h2><p>要构建良好的测试，对被测代码也有一定的要求。</p>\n<ol>\n<li>保持代码短小精悍，命令型代码块（do something）和查询型代码块（get something）需要分割至不同的函数</li>\n<li>使用代码校验工具，比如eslint</li>\n<li>圈复杂度，又称代码分支，也就是代码中if else的数量，尽量少于5，有助于提升测试覆盖率</li>\n<li>不出现重复代码</li>\n<li>代码需要注释</li>\n</ol>\n<h2 id=\"测试工具选型\"><a href=\"#测试工具选型\" class=\"headerlink\" title=\"测试工具选型\"></a>测试工具选型</h2><h3 id=\"测试框架选型：\"><a href=\"#测试框架选型：\" class=\"headerlink\" title=\"测试框架选型：\"></a>测试框架选型：</h3><ol>\n<li>Qunit</li>\n<li>jasmine</li>\n<li>mocha</li>\n</ol>\n<p>前端组件的使用场景中，有大量的异步操作。上述3个测试框架，只有mocha可以很方便地进行异步测试。所以，测试框架使用mocha。</p>\n<h3 id=\"断言库选型：\"><a href=\"#断言库选型：\" class=\"headerlink\" title=\"断言库选型：\"></a>断言库选型：</h3><ol>\n<li>better-assert，C-style TDD 断言库</li>\n<li>should.js，BDD 风格断言库</li>\n<li>expect.js， 追求极简的 BDD 风格断言库，基于 should.js 简化</li>\n<li>chai， BDD/TDD 双模 ，同时支持 should / expect / assert 三种风格的断言库强大插件机制</li>\n</ol>\n<p>google mocha的使用教程，断言库都是chai，所以。。。。。。</p>\n<h3 id=\"代码覆盖率工具\"><a href=\"#代码覆盖率工具\" class=\"headerlink\" title=\"代码覆盖率工具\"></a>代码覆盖率工具</h3><ol>\n<li>istanbul</li>\n<li>。。。</li>\n</ol>\n<p>javascript的代码覆盖率工具中，istanbul流行度最高。</p>\n<h3 id=\"UI测试模式选型：\"><a href=\"#UI测试模式选型：\" class=\"headerlink\" title=\"UI测试模式选型：\"></a>UI测试模式选型：</h3><ol>\n<li>casperjs+phantomjs，phantomjs是无界面浏览器，casperjs对phantomjs api进行了提高易用性的封装</li>\n<li>Selenium 1，会起一个服务，开发人员给这个服务发布任务，服务会通过给浏览器注入javascript的方式驱动浏览器</li>\n<li>webdriver，直接调用浏览器自动化的本地接口，驱动浏览器；可以直接在浏览器中运行。</li>\n<li>Selenium 2，集成了webdriver。UI测试时会启动一个服务，开发人员给这个服务发布任务，服务会通过webdriver驱动浏览器</li>\n<li>chrome的headless模式，就是chrome的无界面模式，可以通过其自身暴露的api进行驱动，也可以通过webdriver驱动。</li>\n</ol>\n<p>chrome的headless模式发布后，phantomjs的作者已经宣布不再维护phantomjs。第一个方案否决。<br>chrome的headless模式目前才发布两个月，还没有多少实践案例，鉴于其可通过webdriver驱动，暂时观察之。<br>webdriver已被w3c标准化，各大浏览器都已实现其标准。这种驱动浏览器的方式，使用十分广泛，实践案例很多。<br>Selenium 和 webdriver 目前是合并趋势。<br>综上，使用第四方案。对应至node.js平台，使用selenium-webdriver模块和selenium服务进行通信。 </p>\n<h3 id=\"和selenium服务通信的工具选型\"><a href=\"#和selenium服务通信的工具选型\" class=\"headerlink\" title=\"和selenium服务通信的工具选型\"></a>和selenium服务通信的工具选型</h3><ol>\n<li>selenium-webdriver，社区活跃，在npm上看到下载量最高</li>\n<li>webdriverIO，api比selenium-webdriver友好，但配套测试工具配置起来比selenium-webdriver的要麻烦，npm下载量是selenium-webdriver的0.1倍</li>\n<li>WD.js，没用过，npm下载量同样是selenium-webdriver的0.1倍。<br>selenium-webdriver的下载量最高，则在搜索具体问题的解决方案时，出来的信息应该也是最多的。此处选择selenium-webdriver。</li>\n</ol>\n<h2 id=\"测试的基本概念\"><a href=\"#测试的基本概念\" class=\"headerlink\" title=\"测试的基本概念\"></a>测试的基本概念</h2><p>我们可以构建一个简单的项目，在这个过程中了解测试的基本概念</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir fe_tests_example</span><br><span class=\"line\">cd fe_tests_example</span><br><span class=\"line\">npm init</span><br><span class=\"line\">npm install -g mocha</span><br><span class=\"line\">npm install mocha chai --save</span><br></pre></td></tr></table></figure>\n\n<p>建立文件 ./utils/add.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(a, b) &#123;</span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>建立文件 ./tests/add.test.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var expect = require(&apos;chai&apos;).expect;</span><br><span class=\"line\"></span><br><span class=\"line\">var add = require(&apos;../utils/add&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;add 方法测试&apos;, function() &#123;</span><br><span class=\"line\">    it(&apos;2+2=4&apos;, function() &#123;</span><br><span class=\"line\">        expect(add(2, 2)).to.be.equal(4);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;5+6=11&apos;, function() &#123;</span><br><span class=\"line\">        expect(add(5, 6)).to.be.equal(11);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;0+(-2)=-2&apos;, function() &#123;</span><br><span class=\"line\">        expect(add(0, -2)).to.be.equal(-2);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>运行指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mocha tests\\*.js</span><br></pre></td></tr></table></figure>\n\n<p>可以看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\work\\fe_tests_example (master) (fe_tests_example@1.0.0)</span><br><span class=\"line\">λ mocha tests\\*.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  add 方法测试</span><br><span class=\"line\">    √ 2+2=4</span><br><span class=\"line\">    √ 5+6=11</span><br><span class=\"line\">    √ 0+(-2)=-2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  3 passing (21ms)</span><br></pre></td></tr></table></figure>\n\n<p>这就是一次单元测试。</p>\n<p>其中，add.test.js是测试脚本，一个个it代码块就是一个个测试用例。</p>\n<p>接下来是在浏览器环境下进行单元测试：<br>首先</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mocha init fe_unit_tests</span><br></pre></td></tr></table></figure>\n\n<p>可以看到项目下多了个 fe_unit_tests文件夹<br><img src=\"/images/test-guide/index.jpg\" alt></p>\n<p>建立fe_unit_tests/add.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>修改 fe_unit_tests/tests.js文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var expect = chai.expect;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;add 方法测试&apos;, function() &#123;</span><br><span class=\"line\">    it(&apos;2+2=4&apos;, function() &#123;</span><br><span class=\"line\">        expect(add(2, 2)).to.be.equal(4);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;5+6=11&apos;, function() &#123;</span><br><span class=\"line\">        expect(add(5, 6)).to.be.equal(11);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;0+(-2)=-2&apos;, function() &#123;</span><br><span class=\"line\">        expect(add(0, -2)).to.be.equal(-2);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>修改 fe_unit_tests/index.html文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Mocha&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;mocha.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mocha&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;mocha.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;http://chaijs.com/chai.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;mocha.setup(&apos;bdd&apos;);&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;add.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;tests.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      mocha.run();</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这就是浏览器环境下的单元测试</p>\n<h2 id=\"UI测试\"><a href=\"#UI测试\" class=\"headerlink\" title=\"UI测试\"></a>UI测试</h2><p>我们将继续通过实例项目来了解UI测试</p>\n<p>下载最新的<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">JDK</a>，安装之。<br>下载最新的<a href=\"http://selenium-release.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"noopener\">selenium</a>，一个jar包，不用安装。<br>运行 selenium服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar selenium-server-standalone-2.45.0.jar</span><br></pre></td></tr></table></figure>\n\n<p>可以看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">λ java -jar selenium-server-standalone-3.4.0.jar</span><br><span class=\"line\">15:15:07.198 INFO - Selenium build info: version: &apos;3.4.0&apos;, revision: &apos;unknown&apos;</span><br><span class=\"line\">15:15:07.200 INFO - Launching a standalone Selenium Server</span><br><span class=\"line\">2017-06-06 15:15:07.250:INFO::main: Logging initialized @549ms to org.seleniumhq.jetty9.util.log.StdErrLog</span><br><span class=\"line\">15:15:07.345 INFO - Driver class not found: com.opera.core.systems.OperaDriver</span><br><span class=\"line\">15:15:07.349 INFO - Driver provider com.opera.core.systems.OperaDriver registration is skipped:</span><br><span class=\"line\">Unable to create new instances on this machine.</span><br><span class=\"line\">15:15:07.350 INFO - Driver class not found: com.opera.core.systems.OperaDriver</span><br><span class=\"line\">15:15:07.351 INFO - Driver provider com.opera.core.systems.OperaDriver is not registered</span><br><span class=\"line\">15:15:07.352 INFO - Driver provider org.openqa.selenium.safari.SafariDriver registration is skipped:</span><br><span class=\"line\"> registration capabilities Capabilities [&#123;browserName=safari, version=, platform=MAC&#125;] does not match the current platform VISTA</span><br><span class=\"line\">2017-06-06 15:15:07.453:INFO:osjs.Server:main: jetty-9.4.3.v20170317</span><br><span class=\"line\">2017-06-06 15:15:07.521:INFO:osjsh.ContextHandler:main: Started o.s.j.s.ServletContextHandler@28d25987&#123;/,null,AVAILABLE&#125;</span><br><span class=\"line\">2017-06-06 15:15:07.900:INFO:osjs.AbstractConnector:main: Started ServerConnector@3f49dace&#123;HTTP/1.1,[http/1.1]&#125;&#123;0.0.0.0:4444&#125;</span><br><span class=\"line\">2017-06-06 15:15:07.901:INFO:osjs.Server:main: Started @1200ms</span><br><span class=\"line\">15:15:07.901 INFO - Selenium Server is up and running</span><br></pre></td></tr></table></figure>\n\n<p>下载对应的浏览器驱动</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">browser</th>\n<th align=\"right\">component</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Chrome</td>\n<td align=\"right\"><a href=\"http://chromedriver.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"noopener\">chromedriver(.exe)</a></td>\n</tr>\n<tr>\n<td align=\"left\">Internet Explorer</td>\n<td align=\"right\"><a href=\"http://selenium-release.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"noopener\">IEDriverServer.exe</a></td>\n</tr>\n<tr>\n<td align=\"left\">Edge</td>\n<td align=\"right\"><a href=\"http://go.microsoft.com/fwlink/?LinkId=619687\" target=\"_blank\" rel=\"noopener\">MicrosoftWebDriver.msi</a></td>\n</tr>\n<tr>\n<td align=\"left\">Firefox 47+</td>\n<td align=\"right\"><a href=\"https://github.com/mozilla/geckodriver/releases/\" target=\"_blank\" rel=\"noopener\">geckodriver(.exe)</a></td>\n</tr>\n<tr>\n<td align=\"left\">PhantomJS</td>\n<td align=\"right\"><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">phantomjs(.exe)</a></td>\n</tr>\n<tr>\n<td align=\"left\">Opera</td>\n<td align=\"right\"><a href=\"https://github.com/operasoftware/operachromiumdriver/releases\" target=\"_blank\" rel=\"noopener\">operadriver(.exe)</a></td>\n</tr>\n<tr>\n<td align=\"left\">Safari</td>\n<td align=\"right\"><a href=\"https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28\" target=\"_blank\" rel=\"noopener\">safaridriver</a></td>\n</tr>\n</tbody></table>\n<p>在这里，我下载了chrome、firefox、ie的驱动，和刚才下好的selenium jar包放入同一个文件夹。</p>\n<p>这里有需要注意的几个点：</p>\n<ol>\n<li>chrome的驱动，最新的是2.2X那些，2.4是很老的版本。</li>\n<li>IE的webdriver驱动IE失败的话，尝试下修改注册表：注册表（regedit）中，32位系统寻找 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Internet Explorer\\Main\\FeatureControl\\FEATURE_BFCACHE ，64位系统寻找HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Internet<br>Explorer\\Main\\FeatureControl\\FEATURE_BFCACHE ，FEATURE_BFCACHE项不一定存在，不存在就创建之。然后在这个项里面，创建一个DWORD值，name为 iexplore.exe， value为0。</li>\n</ol>\n<p>ps:上面是自行安装配置使用selenium服务的方法。还可以通过工具包对selenium进行安装配置使用，具体请看<a href=\"http://gitlab.futunn.com/webpackage/ui-h5-dialog/blob/test/test_guide.md\" target=\"_blank\" rel=\"noopener\">ui-h5-dialog组件test分支的test_guide.md</a></p>\n<p>接下来，回到 fe_tests_example项目中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install selenium-webdriver --save</span><br></pre></td></tr></table></figure>\n\n<p>建立 ui_tests/test1.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webdriver = require(&apos;selenium-webdriver&apos;),</span><br><span class=\"line\">    By = webdriver.By,</span><br><span class=\"line\">    until = webdriver.until,</span><br><span class=\"line\">    test = require(&apos;selenium-webdriver/testing&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">test.describe(&apos;百度搜索测试1,firefox浏览器&apos;, function() &#123;</span><br><span class=\"line\">    this.timeout(15000);</span><br><span class=\"line\">    var driver;</span><br><span class=\"line\"></span><br><span class=\"line\">    test.before(function() &#123;</span><br><span class=\"line\">        driver = new webdriver.Builder().forBrowser(&apos;firefox&apos;).usingServer(&apos;http://localhost:4444/wd/hub&apos;).build();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索node.js&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;node.js&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;node.js_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索jquery&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;jquery&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;jquery_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索angular&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;angular&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;angular_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.after(function() &#123;</span><br><span class=\"line\">        driver.quit();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>建立 ui_tests/test2.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webdriver = require(&apos;selenium-webdriver&apos;),</span><br><span class=\"line\">    By = webdriver.By,</span><br><span class=\"line\">    until = webdriver.until,</span><br><span class=\"line\">    test = require(&apos;selenium-webdriver/testing&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">test.describe(&apos;百度搜索测试2,chrome浏览器&apos;, function() &#123;</span><br><span class=\"line\">    this.timeout(15000);</span><br><span class=\"line\">    var driver;</span><br><span class=\"line\"></span><br><span class=\"line\">    test.before(function() &#123;</span><br><span class=\"line\">        driver = new webdriver.Builder().forBrowser(&apos;chrome&apos;).usingServer(&apos;http://localhost:4444/wd/hub&apos;).build();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索sublime&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;sublime&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;sublime_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索webstorm&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;webstorm&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;webstorm_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索atom&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;atom&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;atom_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.after(function() &#123;</span><br><span class=\"line\">        driver.quit();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>建立 ui_tests/test3.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webdriver = require(&apos;selenium-webdriver&apos;),</span><br><span class=\"line\">    By = webdriver.By,</span><br><span class=\"line\">    until = webdriver.until,</span><br><span class=\"line\">    test = require(&apos;selenium-webdriver/testing&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">test.describe(&apos;百度搜索测试3,ie测试&apos;, function() &#123;</span><br><span class=\"line\">    this.timeout(15000);</span><br><span class=\"line\">    var driver;</span><br><span class=\"line\"></span><br><span class=\"line\">    test.before(function() &#123;</span><br><span class=\"line\">        driver = new webdriver.Builder().forBrowser(&apos;internet explorer&apos;).usingServer(&apos;http://localhost:4444/wd/hub&apos;).build();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索webdriver&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;webdriver&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;webdriver_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索selenium&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;selenium&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;selenium_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.it(&apos;搜索mocha&apos;, function() &#123;</span><br><span class=\"line\">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class=\"line\">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;mocha&apos;);</span><br><span class=\"line\">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class=\"line\">        driver.wait(until.titleIs(&apos;mocha_百度搜索&apos;), 10000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test.after(function() &#123;</span><br><span class=\"line\">        driver.quit();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha .\\ui_tests\\*.js</span><br></pre></td></tr></table></figure>\n\n<p>可以看到</p>\n<p><img src=\"/images/test-guide/test_run.gif\" alt></p>\n<p>以上就是一次完整的UI测试。</p>\n<h2 id=\"测试覆盖率\"><a href=\"#测试覆盖率\" class=\"headerlink\" title=\"测试覆盖率\"></a>测试覆盖率</h2><p>测试覆盖率是针对单元测试的指标，他有下面几个维度：</p>\n<ol>\n<li>行覆盖率（line coverage）：是否每一行都执行了？</li>\n<li>函数覆盖率（function coverage）：是否每个函数都调用了？</li>\n<li>分支覆盖率（branch coverage）：是否每个if代码块都执行了？</li>\n<li>语句覆盖率（statement coverage）：是否每个语句都执行了？</li>\n</ol>\n<p>我们来实践一下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install istanbul --save</span><br></pre></td></tr></table></figure>\n\n<p>建立utils/ifElseTest.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(a) &#123;</span><br><span class=\"line\">    if (a &lt; 10) &#123;</span><br><span class=\"line\">        return 666;</span><br><span class=\"line\">    &#125; else if (a &gt;= 10 &amp;&amp; a &lt; 20) &#123;</span><br><span class=\"line\">        return 777;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return 888;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>建立test/ifElseTest.test.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var expect = require(&apos;chai&apos;).expect;</span><br><span class=\"line\"></span><br><span class=\"line\">var ifElseTest = require(&apos;../utils/ifElseTest&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;ifElseTest 方法测试&apos;, function() &#123;</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(5)).to.be.equal(666);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(5)).to.be.equal(666);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(6)).to.be.equal(666);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(6)).to.be.equal(666);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(17)).to.be.equal(777);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(17)).to.be.equal(777);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>改写 package.json中的scripts部分:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;fe_tests_example&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;mocha ./test/*.js&quot;,</span><br><span class=\"line\">    &quot;test-cov&quot;: &quot;./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;repository&quot;: &#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;git&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;http://gitlab.futunn.com/evanyan/fe_tests_example.git&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;chai&quot;: &quot;^4.0.2&quot;,</span><br><span class=\"line\">    &quot;mocha&quot;: &quot;^3.4.2&quot;,</span><br><span class=\"line\">    &quot;selenium-webdriver&quot;: &quot;^3.4.0&quot;,</span><br><span class=\"line\">    &quot;istanbul&quot;: &quot;^0.4.5&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run test-cov</span><br></pre></td></tr></table></figure>\n\n<p>可以看到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">λ npm run test-cov</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; fe_tests_example@1.0.0 test-cov D:\\work\\fe_tests_example</span><br><span class=\"line\">&gt; istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  add 方法测试</span><br><span class=\"line\">    √ 2+2=4</span><br><span class=\"line\">    √ 5+6=11</span><br><span class=\"line\">    √ 0+(-2)=-2</span><br><span class=\"line\"></span><br><span class=\"line\">  ifElseTest 方法测试</span><br><span class=\"line\">    √ expect(ifElseTest(5)).to.be.equal(666);</span><br><span class=\"line\">    √ expect(ifElseTest(6)).to.be.equal(666);</span><br><span class=\"line\">    √ expect(ifElseTest(17)).to.be.equal(777);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  6 passing (199ms)</span><br><span class=\"line\"></span><br><span class=\"line\">=============================================================================</span><br><span class=\"line\">Writing coverage object [D:\\work\\fe_tests_example\\coverage\\coverage.json]</span><br><span class=\"line\">Writing coverage reports at [D:\\work\\fe_tests_example\\coverage]</span><br><span class=\"line\">=============================================================================</span><br><span class=\"line\"></span><br><span class=\"line\">=============================== Coverage summary ===============================</span><br><span class=\"line\">Statements   : 87.5% ( 7/8 )</span><br><span class=\"line\">Branches     : 83.33% ( 5/6 )</span><br><span class=\"line\">Functions    : 100% ( 2/2 )</span><br><span class=\"line\">Lines        : 87.5% ( 7/8 )</span><br><span class=\"line\">================================================================================</span><br></pre></td></tr></table></figure>\n\n<p>此时项目中生成了 coverage文件夹，打开coverage/lcov-report/index.html，可以看到：<br><img src=\"/images/test-guide/71873817.jpg\" alt></p>\n<p>可以看到，ifElseTest.js中，其中有一个if-else代码块没有被测到。<br>我们改写一下 ifElseTest.test.js文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var expect = require(&apos;chai&apos;).expect;</span><br><span class=\"line\"></span><br><span class=\"line\">var ifElseTest = require(&apos;../utils/ifElseTest&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;ifElseTest 方法测试&apos;, function() &#123;</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(5)).to.be.equal(666);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(5)).to.be.equal(666);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(6)).to.be.equal(666);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(6)).to.be.equal(666);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(17)).to.be.equal(777);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(17)).to.be.equal(777);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(&apos;expect(ifElseTest(88)).to.be.equal(888);&apos;, function() &#123;</span><br><span class=\"line\">        expect(ifElseTest(88)).to.be.equal(888);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run test-cov</span><br></pre></td></tr></table></figure>\n\n<p>可以看到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">λ npm run test-cov</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; fe_tests_example@1.0.0 test-cov D:\\work\\fe_tests_example</span><br><span class=\"line\">&gt; istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  add 方法测试</span><br><span class=\"line\">    √ 2+2=4</span><br><span class=\"line\">    √ 5+6=11</span><br><span class=\"line\">    √ 0+(-2)=-2</span><br><span class=\"line\"></span><br><span class=\"line\">  ifElseTest 方法测试</span><br><span class=\"line\">    √ expect(ifElseTest(5)).to.be.equal(666);</span><br><span class=\"line\">    √ expect(ifElseTest(6)).to.be.equal(666);</span><br><span class=\"line\">    √ expect(ifElseTest(17)).to.be.equal(777);</span><br><span class=\"line\">    √ expect(ifElseTest(88)).to.be.equal(888);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  7 passing (50ms)</span><br><span class=\"line\"></span><br><span class=\"line\">=============================================================================</span><br><span class=\"line\">Writing coverage object [D:\\work\\fe_tests_example\\coverage\\coverage.json]</span><br><span class=\"line\">Writing coverage reports at [D:\\work\\fe_tests_example\\coverage]</span><br><span class=\"line\">=============================================================================</span><br><span class=\"line\"></span><br><span class=\"line\">=============================== Coverage summary ===============================</span><br><span class=\"line\">Statements   : 100% ( 8/8 )</span><br><span class=\"line\">Branches     : 100% ( 6/6 )</span><br><span class=\"line\">Functions    : 100% ( 2/2 )</span><br><span class=\"line\">Lines        : 100% ( 8/8 )</span><br><span class=\"line\">================================================================================</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://oqt9zb1sq.bkt.clouddn.com/17-7-12/61203301.jpg\" alt></p>\n<p>可以看到测试覆盖率达到100%，被测代码的每一行都被测到。</p>\n<h2 id=\"具体实践的一些建议\"><a href=\"#具体实践的一些建议\" class=\"headerlink\" title=\"具体实践的一些建议\"></a>具体实践的一些建议</h2><ol>\n<li>所有测试代码，都应该放在test文件夹中</li>\n<li>单元测试测逻辑部分，被测代码的测试覆盖率尽量达到100%；端对端测试测试主要流程是否能跑通，针对前端ui组件，还有查看组件在不同浏览器下表现的任务。所以，单元测试的测试量应该比端对端测试大很多。</li>\n<li>单元测试只测逻辑部分代码，io操作、dom操作的代码不纳入单元测试范畴中。</li>\n<li>io操作、dom操作的测试由端对端测试来完成。</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"noopener\">mocha api 文档</a><br><a href=\"http://chaijs.com/api/bdd/\" title=\"chai api doc\" target=\"_blank\" rel=\"noopener\">chai api文档</a><br><a href=\"http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/\" target=\"_blank\" rel=\"noopener\">selenium-webdriver api文档</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjzwat4yj0026uaid80sgsaui","category_id":"cjzwat4yn0028uaidpbgrxymu","_id":"cjzwat4yq002euaid46fffsfy"},{"post_id":"cjzwat4yk0027uaidzytr21g6","category_id":"cjzwat4yn0028uaidpbgrxymu","_id":"cjzwat4yr002huaidfb2ohd71"}],"PostTag":[{"post_id":"cjzwat4uh0000uaid3fyljemr","tag_id":"cjzwat4up0004uaid5nfo06at","_id":"cjzwat4uw000auaiduv796ynt"},{"post_id":"cjzwat4um0002uaid5jf2c7mm","tag_id":"cjzwat4uv0009uaidiz44uvnp","_id":"cjzwat4v1000fuaid30jcmlio"},{"post_id":"cjzwat4v0000euaidsv4yewwx","tag_id":"cjzwat4uv0009uaidiz44uvnp","_id":"cjzwat4v3000iuaideh8vgizh"},{"post_id":"cjzwat4uq0005uaideymyd3nm","tag_id":"cjzwat4uv0009uaidiz44uvnp","_id":"cjzwat4v4000kuaid29hvjkec"},{"post_id":"cjzwat4v1000guaid1udqemdh","tag_id":"cjzwat4uv0009uaidiz44uvnp","_id":"cjzwat4v5000nuaidfz4mzi97"},{"post_id":"cjzwat4v3000juaid3klg06u6","tag_id":"cjzwat4uv0009uaidiz44uvnp","_id":"cjzwat4v6000puaid84l7ptwv"},{"post_id":"cjzwat4v4000luaidq6qdenqs","tag_id":"cjzwat4uv0009uaidiz44uvnp","_id":"cjzwat4v7000ruaidxhzdwfja"},{"post_id":"cjzwat4us0007uaide2h981mr","tag_id":"cjzwat4v2000huaid8h1784id","_id":"cjzwat4v9000uuaidxrjt6afi"},{"post_id":"cjzwat4us0007uaide2h981mr","tag_id":"cjzwat4v5000muaidtv35e1e4","_id":"cjzwat4va000wuaid9ttb88rq"},{"post_id":"cjzwat4v6000quaid5dbt09gd","tag_id":"cjzwat4uv0009uaidiz44uvnp","_id":"cjzwat4vb000zuaidadqnu1q9"},{"post_id":"cjzwat4v7000tuaidykrd7ksi","tag_id":"cjzwat4uv0009uaidiz44uvnp","_id":"cjzwat4vc0011uaid8ins2ngt"},{"post_id":"cjzwat4ut0008uaid829trxnh","tag_id":"cjzwat4v7000suaid0jbw2hi0","_id":"cjzwat4ve0014uaidp4nqsqhg"},{"post_id":"cjzwat4vb0010uaidtqyobala","tag_id":"cjzwat4vb000yuaidywc934dt","_id":"cjzwat4vf0016uaid6shkjxbh"},{"post_id":"cjzwat4vd0012uaid2tcnzx0u","tag_id":"cjzwat4vb000yuaidywc934dt","_id":"cjzwat4vh0019uaid3yjfpobj"},{"post_id":"cjzwat4ve0015uaidxy6ehyf6","tag_id":"cjzwat4vb000yuaidywc934dt","_id":"cjzwat4vj001buaidqunvo72y"},{"post_id":"cjzwat4uw000buaidy7c6bxzt","tag_id":"cjzwat4vb000yuaidywc934dt","_id":"cjzwat4vk001duaide7zgnlx4"},{"post_id":"cjzwat4uw000buaidy7c6bxzt","tag_id":"cjzwat4ve0013uaidhxl8kppp","_id":"cjzwat4vl001guaidpzut37gq"},{"post_id":"cjzwat4vg0017uaidt50fyq6u","tag_id":"cjzwat4vb000yuaidywc934dt","_id":"cjzwat4vl001iuaidci5dz0e3"},{"post_id":"cjzwat4vh001auaidnvcvua34","tag_id":"cjzwat4vb000yuaidywc934dt","_id":"cjzwat4vn001luaidhj3txs7a"},{"post_id":"cjzwat4vj001cuaidmfsksn3o","tag_id":"cjzwat4vb000yuaidywc934dt","_id":"cjzwat4vn001muaid7ketqb42"},{"post_id":"cjzwat4ux000cuaidm9paxe0i","tag_id":"cjzwat4vh0018uaidkcg9iqo0","_id":"cjzwat4vo001ouaidmx28rkd7"},{"post_id":"cjzwat4ux000cuaidm9paxe0i","tag_id":"cjzwat4vk001euaidulhqsnkj","_id":"cjzwat4vo001puaidrj01yuxv"},{"post_id":"cjzwat4v5000ouaidvdwc3xfu","tag_id":"cjzwat4vm001kuaid364w84me","_id":"cjzwat4vo001ruaidd0o6rsrg"},{"post_id":"cjzwat4v5000ouaidvdwc3xfu","tag_id":"cjzwat4vk001euaidulhqsnkj","_id":"cjzwat4vp001suaid78b7aa9g"},{"post_id":"cjzwat4v9000vuaidgh1gkm4e","tag_id":"cjzwat4vb000yuaidywc934dt","_id":"cjzwat4vp001uuaiduc0vtard"},{"post_id":"cjzwat4va000xuaidk8qfyw66","tag_id":"cjzwat4vb000yuaidywc934dt","_id":"cjzwat4vq001wuaidybz6ru6n"},{"post_id":"cjzwat4vk001fuaidjaxwxasi","tag_id":"cjzwat4vp001vuaidbo7d4d30","_id":"cjzwat4vq001yuaidta0ey6vq"},{"post_id":"cjzwat4vl001huaid2h3defgr","tag_id":"cjzwat4vq001xuaid2anihkw0","_id":"cjzwat4vr0022uaid6dwrvs2h"},{"post_id":"cjzwat4vl001huaid2h3defgr","tag_id":"cjzwat4vq001zuaid9t85wby6","_id":"cjzwat4vr0023uaid1mmn1fjf"},{"post_id":"cjzwat4vl001huaid2h3defgr","tag_id":"cjzwat4vr0020uaidcohe3r6r","_id":"cjzwat4vr0024uaid8jskzm16"},{"post_id":"cjzwat4vm001juaidh4nkserg","tag_id":"cjzwat4vr0021uaidle6uin5e","_id":"cjzwat4vr0025uaid3kpa2t9r"},{"post_id":"cjzwat4yj0026uaid80sgsaui","tag_id":"cjzwat4v2000huaid8h1784id","_id":"cjzwat4yq002cuaidmi0ibwb8"},{"post_id":"cjzwat4yj0026uaid80sgsaui","tag_id":"cjzwat4v5000muaidtv35e1e4","_id":"cjzwat4yq002duaidd5pskb2t"},{"post_id":"cjzwat4yj0026uaid80sgsaui","tag_id":"cjzwat4yn0029uaid08vxstbr","_id":"cjzwat4yr002fuaidhnqophbq"},{"post_id":"cjzwat4yk0027uaidzytr21g6","tag_id":"cjzwat4v2000huaid8h1784id","_id":"cjzwat4yr002guaidcpguuzfb"},{"post_id":"cjzwat4yk0027uaidzytr21g6","tag_id":"cjzwat4v5000muaidtv35e1e4","_id":"cjzwat4yr002iuaidjlxww5zw"},{"post_id":"cjzwat4yk0027uaidzytr21g6","tag_id":"cjzwat4yn0029uaid08vxstbr","_id":"cjzwat4ys002juaidv1fjbc60"},{"post_id":"cjzwat4zk002kuaid3sg10zsy","tag_id":"cjzwat4zl002luaidtso2qg1n","_id":"cjzwat4zo002nuaidka6nr2kw"},{"post_id":"cjzwat4zk002kuaid3sg10zsy","tag_id":"cjzwat4zo002muaidhbequv40","_id":"cjzwat4zo002ouaidf50yd54v"}],"Tag":[{"name":"canvas","_id":"cjzwat4up0004uaid5nfo06at"},{"name":"设计模式","_id":"cjzwat4uv0009uaidiz44uvnp"},{"name":"css","_id":"cjzwat4v2000huaid8h1784id"},{"name":"html","_id":"cjzwat4v5000muaidtv35e1e4"},{"name":"用户增长","_id":"cjzwat4v7000suaid0jbw2hi0"},{"name":"redis","_id":"cjzwat4vb000yuaidywc934dt"},{"name":"算法","_id":"cjzwat4ve0013uaidhxl8kppp"},{"name":"iframe","_id":"cjzwat4vh0018uaidkcg9iqo0"},{"name":"bug fix","_id":"cjzwat4vk001euaidulhqsnkj"},{"name":"node.js","_id":"cjzwat4vm001kuaid364w84me"},{"name":"沟通技巧","_id":"cjzwat4vp001vuaidbo7d4d30"},{"name":"http","_id":"cjzwat4vq001xuaid2anihkw0"},{"name":"tcp","_id":"cjzwat4vq001zuaid9t85wby6"},{"name":"ip","_id":"cjzwat4vr0020uaidcohe3r6r"},{"name":"vue.js","_id":"cjzwat4vr0021uaidle6uin5e"},{"name":"翻译","_id":"cjzwat4yn0029uaid08vxstbr"},{"name":"测试","_id":"cjzwat4zl002luaidtso2qg1n"},{"name":"自动化","_id":"cjzwat4zo002muaidhbequv40"}]}}